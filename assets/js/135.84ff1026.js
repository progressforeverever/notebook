(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{465:function(_,v,t){"use strict";t.r(v);var n=t(4),e=Object(n.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"事务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[_._v("#")]),_._v(" 事务")]),_._v(" "),v("p",[_._v("事务看起来感觉简单，但是要实现事务必须要遵守 4 个特性，分别如下：")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("原子性（Atomicity）")]),_._v("：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节，而且事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，就好比买一件商品，购买成功时，则给商家付了钱，商品到手；购买失败时，则商品在商家手中，消费者的钱也没花出去。")]),_._v(" "),v("li",[v("strong",[_._v("一致性（Consistency）")]),_._v("：是指事务操作前和操作后，数据满足完整性约束，数据库保持一致性状态。比如，用户 A 和用户 B 在银行分别有 800 元和 600 元，总共 1400 元，用户 A 给用户 B 转账 200 元，分为两个步骤，从 A 的账户扣除 200 元和对 B 的账户增加 200 元。一致性就是要求上述步骤操作后，最后的结果是用户 A 还有 600 元，用户 B 有 800 元，总共 1400 元，而不会出现用户 A 扣除了 200 元，但用户 B 未增加的情况（该情况，用户 A 和 B 均为 600 元，总共 1200 元）。")]),_._v(" "),v("li",[v("strong",[_._v("隔离性（Isolation）")]),_._v("：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，因为多个事务同时使用相同的数据时，不会相互干扰，每个事务都有一个完整的数据空间，对其他并发事务是隔离的。也就是说，消费者购买商品这个事务，是不影响其他消费者购买的。")]),_._v(" "),v("li",[v("strong",[_._v("持久性（Durability）")]),_._v("：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。")])]),_._v(" "),v("p",[_._v("InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("持久性")]),_._v("是通过 "),v("strong",[_._v("redo log （重做日志）来保证的；")])]),_._v(" "),v("li",[v("strong",[_._v("原子性")]),_._v("是通过 "),v("strong",[_._v("undo log（回滚日志） 来保证的；")])]),_._v(" "),v("li",[_._v("隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；")]),_._v(" "),v("li",[_._v("一致性则是通过持久性+原子性+隔离性来保证；")])]),_._v(" "),v("p",[_._v("MySQL 服务端是允许多个客户端连接的，这意味着 MySQL 会出现同时处理多个事务的情况。")]),_._v(" "),v("p",[_._v("那么"),v("strong",[_._v("在同时处理多个事务的时候，就可能出现脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）的问题")]),_._v("。")]),_._v(" "),v("h3",{attrs:{id:"脏读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#脏读"}},[_._v("#")]),_._v(" 脏读")]),_._v(" "),v("p",[v("strong",[_._v("如果一个事务「读到」了另一个「未提交事务修改过的数据」，就意味着发生了「脏读」现象。")])]),_._v(" "),v("p",[_._v("即使没有提交事务。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/10b513008ea35ee880c592a88adcb12f.png",alt:"图片"}})]),_._v(" "),v("p",[_._v("因为事务 A 是还没提交事务的，也就是它随时可能发生回滚操作，"),v("strong",[_._v("如果在上面这种情况事务 A 发生了回滚，那么事务 B 刚才得到的数据就是过期的数据，这种现象就被称为脏读。")])]),_._v(" "),v("h3",{attrs:{id:"不可重复读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#不可重复读"}},[_._v("#")]),_._v(" 不可重复读")]),_._v(" "),v("p",[v("strong",[_._v("在一个事务内多次读取同一个数据，如果出现前后两次读到的数据不一样的情况，就意味着发生了「不可重复读」现象。")])]),_._v(" "),v("p",[_._v("举个栗子。")]),_._v(" "),v("p",[_._v("假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后继续执行代码逻辑处理，"),v("strong",[_._v("在这过程中如果事务 B 更新了这条数据，并提交了事务，那么当事务 A 再次读取该数据时，就会发现前后两次读到的数据是不一致的，这种现象就被称为不可重复读。")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/f5b4f8f0c0adcf044b34c1f300a95abf.png",alt:"图片"}})]),_._v(" "),v("h3",{attrs:{id:"幻读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#幻读"}},[_._v("#")]),_._v(" "),v("a",{attrs:{href:"https://xiaolincoding.com/mysql/transaction/mvcc.html#%E5%B9%BB%E8%AF%BB",target:"_blank",rel:"noopener noreferrer"}},[_._v("#"),v("OutboundLink")],1),_._v("幻读")]),_._v(" "),v("p",[v("strong",[_._v("在一个事务内多次查询某个符合查询条件的「记录数量」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象。")])]),_._v(" "),v("p",[_._v("举个栗子。")]),_._v(" "),v("p",[_._v("假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库查询账户余额大于 100 万的记录，发现共有 5 条，然后事务 B 也按相同的搜索条件也是查询出了 5 条记录。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/d19a1019dc35dfe8cfe7fbff8cd97e31.png",alt:"图片"}})]),_._v(" "),v("p",[_._v("接下来，事务 A 插入了一条余额超过 100 万的账号，并提交了事务，此时数据库超过 100 万余额的账号个数就变为 6。")]),_._v(" "),v("p",[_._v("然后事务 B 再次查询账户余额大于 100 万的记录，此时查询到的记录数量有 6 条，"),v("strong",[_._v("发现和前一次读到的记录数量不一样了，就感觉发生了幻觉一样，这种现象就被称为幻读。")])]),_._v(" "),v("p",[_._v("前面我们提到，当多个事务并发执行时可能会遇到「脏读、不可重复读、幻读」的现象，这些现象会对事务的一致性产生不同程序的影响。")]),_._v(" "),v("ul",[v("li",[_._v("脏读：读到其他事务未提交的数据；")]),_._v(" "),v("li",[_._v("不可重复读：前后读取的数据不一致；")]),_._v(" "),v("li",[_._v("幻读：前后读取的记录数量不一致。")])]),_._v(" "),v("p",[_._v("这三个现象的严重性排序如下：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/d37bfa1678eb71ae7e33dc8f211d1ec1.png",alt:"图片"}})]),_._v(" "),v("p",[_._v("SQL 标准提出了四种隔离级别来规避这些现象，隔离级别越高，性能效率就越低，这四个隔离级别如下：")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("读未提交（*read uncommitted*）")]),_._v("，指一个事务还没提交时，它做的变更就能被其他事务看到；")]),_._v(" "),v("li",[v("strong",[_._v("读提交（*read committed*）")]),_._v("，指一个事务提交之后，它做的变更才能被其他事务看到；")]),_._v(" "),v("li",[v("strong",[_._v("可重复读（*repeatable read*）")]),_._v("，指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，"),v("strong",[_._v("MySQL InnoDB 引擎的默认隔离级别")]),_._v("；")]),_._v(" "),v("li",[v("strong",[_._v("串行化（*serializable* ）")]),_._v("；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；")])]),_._v(" "),v("p",[_._v("按隔离水平高低排序如下：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/cce766a69dea725cd8f19b90db2d0430.png",alt:"图片"}})]),_._v(" "),v("p",[_._v("针对不同的隔离级别，并发事务时可能发生的现象也会不同。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/4e98ea2e60923b969790898565b4d643.png",alt:"图片"}})]),_._v(" "),v("p",[_._v("不同的数据库厂商对 SQL 标准中规定的 4 种隔离级别的支持不一样，有的数据库只实现了其中几种隔离级别，"),v("strong",[_._v("我们讨论的 MySQL 虽然支持 4 种隔离级别，但是与SQL 标准中规定的各级隔离级别允许发生的现象却有些出入")]),_._v("。")]),_._v(" "),v("p",[_._v("MySQL 在「可重复读」隔离级别下，可以很大程度上避免幻读现象的发生（注意是很大程度避免，并不是彻底避免），所以 MySQL 并不会使用「串行化」隔离级别来避免幻读现象的发生，因为使用「串行化」隔离级别会影响性能。")]),_._v(" "),v("p",[v("strong",[_._v("MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象（并不是完全解决了，详见这篇"),v("a",{attrs:{href:"https://xiaolincoding.com/mysql/transaction/phantom.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("文章 (opens new window)"),v("OutboundLink")],1),_._v("）")]),_._v("，解决的方案有两种：")]),_._v(" "),v("ul",[v("li",[_._v("针对"),v("strong",[_._v("快照读")]),_._v("（普通 select 语句），是"),v("strong",[_._v("通过 MVCC 方式解决了幻读")]),_._v("，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。")]),_._v(" "),v("li",[_._v("针对"),v("strong",[_._v("当前读")]),_._v("（select ... for update 等语句），是"),v("strong",[_._v("通过 next-key lock（记录锁+间隙锁）方式解决了幻读")]),_._v("，因为当执行 select ... for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。")])]),_._v(" "),v("p",[_._v("接下来，举个具体的例子来说明这四种隔离级别，有一张账户余额表，里面有一条账户余额为 100 万的记录。然后有两个并发的事务，事务 A 只负责查询余额，事务 B 则会将我的余额改成 200 万，下面是按照时间顺序执行两个事务的行为：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/d5de450e901ed926d0b5278c8b65b9fe.png",alt:"图片"}})]),_._v(" "),v("p",[_._v("在不同隔离级别下，事务 A 执行过程中查询到的余额可能会不同：")]),_._v(" "),v("ul",[v("li",[_._v("在「读未提交」隔离级别下，事务 B 修改余额后，虽然没有提交事务，但是此时的余额已经可以被事务 A 看见了，于是事务 A 中余额 V1 查询的值是 200 万，余额 V2、V3 自然也是 200 万了；")]),_._v(" "),v("li",[_._v("在「读提交」隔离级别下，事务 B 修改余额后，因为没有提交事务，所以事务 A 中余额 V1 的值还是 100 万，等事务 B 提交完后，最新的余额数据才能被事务 A 看见，因此额 V2、V3 都是 200 万；")]),_._v(" "),v("li",[_._v("在「可重复读」隔离级别下，事务 A 只能看见启动事务时的数据，所以余额 V1、余额 V2 的值都是 100 万，当事务 A 提交事务后，就能看见最新的余额数据了，所以余额 V3 的值是 200 万；")]),_._v(" "),v("li",[_._v("在「串行化」隔离级别下，事务 B 在执行将余额 100 万修改为 200 万时，由于此前事务 A 执行了读操作，这样就发生了读写冲突，于是就会被锁住，直到事务 A 提交后，事务 B 才可以继续执行，所以从 A 的角度看，余额 V1、V2 的值是 100 万，余额 V3 的值是 200万。")])]),_._v(" "),v("p",[_._v("这四种隔离级别具体是如何实现的呢？")]),_._v(" "),v("ul",[v("li",[_._v("对于「读未提交」隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；")]),_._v(" "),v("li",[_._v("对于「串行化」隔离级别的事务来说，通过加读写锁的方式来避免并行访问；")]),_._v(" "),v("li",[_._v("对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 "),v("strong",[_._v("Read View *"),v("em",[_._v("来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。*")]),_._v("「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View")]),_._v("。")])])])}),[],!1,null,null,null);v.default=e.exports}}]);