(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{457:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"mysql09-mysql为什么有时候会选错索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql09-mysql为什么有时候会选错索引"}},[s._v("#")]),s._v(" MySQL09 MySQL为什么有时候会选错索引")]),s._v(" "),t("p",[s._v("前面我们介绍过索引，你已经知道了在"),t("strong",[s._v("MySQL中一张表其实是可以支持多个索引的")]),s._v("。但是，你写SQL语句的时候，"),t("strong",[s._v("并没有主动指定使用哪个索引。也就是说，使用哪个索引是由MySQL来确定的。")])]),s._v(" "),t("p",[s._v("不知道你有没有碰到过这种情况，"),t("strong",[s._v("一条本来可以执行得很快的语句，却由于MySQL选错了索引，而导致执行速度变得很慢？")])]),s._v(" "),t("p",[s._v("我们一起来看一个例子吧。")]),s._v(" "),t("p",[s._v("我们先建一个简单的表，表里有a、b两个字段，并分别建上索引：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENGINE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("InnoDB")]),s._v("；\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("然后，我们往表t中插入10万行记录，取值按整数递增，即：(1,1,1)，(2,2,2)，(3,3,3) 直到(100000,100000,100000)。")]),s._v(" "),t("p",[s._v("我是用"),t("strong",[s._v("存储过程")]),s._v("来插入数据的，这里我贴出来方便你复现：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delimiter")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("procedure")]),s._v(" idata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("declare")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("insert")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("into")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("values")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delimiter")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("call")]),s._v(" idata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("存储过程 学习：")]),s._v(" "),t("p",[s._v("MySQL存储过程是"),t("strong",[s._v("一组为了完成特定任务而预先编译并存储在数据库中的SQL语句集合")]),s._v("。存储过程可以包含SQL查询、控制流语句（如条件语句和循环语句）、变量和错误处理等。与简单的SQL查询相比，存储过程具有以下优势：")]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("封装性：")]),s._v(" 存储过程允许将一系列SQL语句封装到一个单一的过程中。这有助于提高代码的模块化性和可维护性。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("代码重用：")]),s._v(" 存储过程可以在不同的查询中被调用，实现了代码的重用，减少了重复编写相似代码的需要。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("性能优化：")]),s._v(" 存储过程在数据库中被编译和存储，因此执行速度通常比相同的逻辑写在应用程序中要快。此外，存储过程还可以被数据库引擎优化，提高执行效率。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("权限控制：")]),s._v(" 存储过程的执行权限可以独立于表的访问权限，提供更细粒度的权限控制。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("事务控制：")]),s._v(" 存储过程支持事务处理，可以包含事务开始、提交和回滚等语句，确保一系列操作的原子性。")])])]),s._v(" "),t("p",[s._v("一个简单的MySQL存储过程的例子如下：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DELIMITER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PROCEDURE")]),s._v(" GetCustomerCount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" CustomerCount "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" customers"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DELIMITER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("在上面的例子中，创建了一个名为 "),t("code",[s._v("GetCustomerCount")]),s._v(" 的存储过程，用于返回 "),t("code",[s._v("customers")]),s._v(" 表中的行数。要调用此存储过程，可以使用 "),t("code",[s._v("CALL")]),s._v(" 语句：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CALL")]),s._v(" GetCustomerCount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这将执行存储过程并返回结果。存储过程的语法和功能可以根据具体需求进行扩展。")]),s._v(" "),t("p",[s._v("下面是一些与MySQL存储过程相关的基本关键字：")]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("CREATE PROCEDURE:")])]),s._v(" "),t("ul",[t("li",[s._v("用于"),t("strong",[s._v("创建存储过程")]),s._v("。在其后，你会定义存储过程的名称、参数、以及包含在存储过程中的SQL语句。")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PROCEDURE")]),s._v(" procedure_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- SQL statements")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("DELIMITER:")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("用于更改语句分隔符。在定义存储过程时，DELIMITER语句通常用于将语句分隔符更改为其他字符，以便正确处理存储过程中的分号。")])])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DELIMITER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("BEGIN...END:")])]),s._v(" "),t("ul",[t("li",[s._v("用于定义存储过程的主体。在BEGIN和END之间，你可以包含一系列SQL语句，这些语句将在调用存储过程时执行。")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- SQL statements")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("CALL:")])]),s._v(" "),t("ul",[t("li",[s._v("用于"),t("strong",[s._v("调用存储过程")]),s._v("。在执行存储过程时，使用CALL语句，后面跟着存储过程的名称和必要的参数。")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CALL")]),s._v(" procedure_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("OUT参数:")])]),s._v(" "),t("ul",[t("li",[s._v("用于从存储过程中传递输出值。在存储过程中，你可以定义一个OUT参数，用于返回值给调用者。")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PROCEDURE")]),s._v(" procedure_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OUT")]),s._v(" out_parameter "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- Set value for out_parameter")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("IN参数:")])]),s._v(" "),t("ul",[t("li",[s._v("用于将输入值传递给存储过程。在存储过程定义中，你可以包含一个或多个IN参数，用于接收输入值。")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PROCEDURE")]),s._v(" procedure_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" in_parameter "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- Use value of in_parameter")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("INOUT参数:")])]),s._v(" "),t("ul",[t("li",[s._v("用于既能接收输入值又能返回输出值的参数。")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PROCEDURE")]),s._v(" procedure_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INOUT")]),s._v(" in_out_parameter "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- Use and modify value of in_out_parameter")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])])]),s._v(" "),t("p",[s._v("这些关键字用于定义、调用和执行存储过程，并在存储过程中处理参数和SQL语句。")]),s._v(" "),t("p",[s._v("这里的"),t("code",[s._v("delimiter;;")])]),s._v(" "),t("p",[s._v("在MySQL中，分号 "),t("code",[s._v(";")]),s._v(" 是默认的SQL语句分隔符。然而，在存储过程等情况下，一个存储过程可能包含多个SQL语句，而每个语句都以分号结尾。")]),s._v(" "),t("p",[s._v("为了避免在存储过程定义中的分号与语句分隔符混淆，人们通常使用 "),t("code",[s._v("DELIMITER")]),s._v(" 语句来更改分隔符。在你的例子中，"),t("strong",[t("code",[s._v("DELIMITER ;;")]),s._v(" 将分隔符更改为 "),t("code",[s._v(";;")])]),s._v("，这样就可以在存储过程定义中使用分号而不会与语句结束的分号冲突。")]),s._v(" "),t("p",[s._v("当存储过程的定义完成后，通过 "),t("code",[s._v("DELIMITER ;")]),s._v(" 将分隔符还原为默认的分号。这样做是为了确保在执行后续的SQL语句时，分号能够正确地作为语句结束的标志。")]),s._v(" "),t("p",[s._v("所以，"),t("code",[s._v("DELIMITER")]),s._v(" 的目的是在定义存储过程时提供一个临时的分隔符，以便正确解析包含多个语句的存储过程体。")]),s._v(" "),t("p",[s._v("经常开发手册上会写  禁止使用存储过程")]),s._v(" "),t("p",[s._v("禁止使用存储过程的决策可能是出于多方面的考虑，这些考虑通常与具体的开发需求、团队经验、性能优化、可维护性等因素有关。以下是一些常见的原因：")]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("可移植性：")])]),s._v(" "),t("ul",[t("li",[s._v("存储过程的语法和功能在不同的数据库管理系统中可能有所不同。"),t("strong",[s._v("如果应用程序的设计考虑到可能更改使用的数据库，那么使用存储过程可能会导致可移植性问题。")])])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("维护复杂性：")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("存储过程的逻辑被封装在数据库中，而不是应用程序中。这可能增加对数据库的依赖性，使得应用程序的维护和更新更为复杂。")])])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("版本控制：")])]),s._v(" "),t("ul",[t("li",[s._v("存储过程的修改可能需要在数据库中进行，这可能会"),t("strong",[s._v("涉及到数据库的备份、升级和版本控制等问题")]),s._v("。相比之下，应用程序的代码通常更容易进行版本控制。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("测试困难：")])]),s._v(" "),t("ul",[t("li",[s._v("存储过程的"),t("strong",[s._v("测试可能会变得更加复杂，因为需要与数据库进行交互。相比之下，在应用程序中进行单元测试通常更为直观和容易。")])])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("分布式系统：")])]),s._v(" "),t("ul",[t("li",[s._v("在分布式系统中，"),t("strong",[s._v("存储过程可能引入额外的复杂性，尤其是当存储过程涉及多个数据库节点时。")])])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("ORM框架的普及：")])]),s._v(" "),t("ul",[t("li",[s._v("随着对象关系映射（ORM）框架的普及，将数据访问逻辑封装在应用程序中变得更加普遍。ORM框架通常提供了更直观和可维护的方式来处理数据库交互。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("性能考虑：")])]),s._v(" "),t("ul",[t("li",[s._v("在某些情况下，存储过程可能不如在应用程序中执行相同的逻辑效率高。数据库优化的方法可能取决于具体的数据库引擎。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("团队技能：")])]),s._v(" "),t("ul",[t("li",[s._v("如果团队缺乏对存储过程的熟悉度，或者更擅长使用其他数据库交互的方式，那么禁止使用存储过程可能更符合团队的技术栈。")])])])]),s._v(" "),t("p",[s._v("需要注意的是，这并不意味着存储过程在所有情况下都是不可取的。在某些情况下，存储过程可能是一种有效的选择，特别是对于大型、复杂的数据库逻辑。然而，在特定的开发环境和团队中，选择是否使用存储过程通常取决于多个因素。")]),s._v(" "),t("p",[s._v("接下来，我们分析一条SQL语句：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("between")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("你一定会说，这个语句还用分析吗，很简单呀，a上有索引，肯定是要使用索引a的。")]),s._v(" "),t("p",[s._v("你说得没错，图1显示的就是使用explain命令看到的这条语句的执行情况。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231130215752274.png",alt:"image-20231130215752274"}})]),s._v(" "),t("p",[s._v("图1 使用"),t("strong",[s._v("explain命令查看语句执行情况")])]),s._v(" "),t("p",[s._v("从图1看上去，这条查询语句的执行也确实符合预期，key这个字段值是’a’，表示优化器选择了索引a。")]),s._v(" "),t("p",[s._v("不过别急，这个案例不会这么简单。在我们已经准备好的包含了10万行数据的表上，我们再做如下操作。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231130215818040.png",alt:"image-20231130215800001"}})]),s._v(" "),t("p",[s._v("图2 session A和session B的执行流程")]),s._v(" "),t("p",[s._v("这里，session A的操作你已经很熟悉了，它就是开启了一个事务。随后，session B把数据都删除后，又调用了 idata这个存储过程，插入了10万行数据。")]),s._v(" "),t("p",[s._v("这时候，session B的查询语句select * from t where a between 10000 and 20000就不会再选择索引a了。我们可以通过慢查询日志（slow log）来查看一下具体的执行情况。")]),s._v(" "),t("p",[s._v("为了说明优化器选择的结果是否正确，我增加了一个对照，即：使"),t("strong",[s._v("用force index(a)来让优化器强制使用索引a")]),s._v("（这部分内容，我还会在这篇文章的后半部分中提到）。")]),s._v(" "),t("p",[s._v("下面的三条SQL语句，就是这个实验过程。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" long_query_time"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("between")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*Q1*/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("force")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("between")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*Q2*/")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ul",[t("li",[s._v("第一句，是"),t("strong",[s._v("将慢查询日志的阈值设置为0，表示这个线程接下来的语句都会被记录入慢查询日志中；")])]),s._v(" "),t("li",[s._v("第二句，Q1是session B原来的查询；")]),s._v(" "),t("li",[s._v("第三句，Q2是加了force index(a)来和session B原来的查询语句执行情况对比。")])]),s._v(" "),t("p",[s._v("如图3所示是这三条SQL语句执行完成后的慢查询日志。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231130215834944.png",alt:"image-20231130215809111"}})]),s._v(" "),t("p",[s._v("图3 slow log结果")]),s._v(" "),t("p",[s._v("可以看到，"),t("strong",[s._v("Q1扫描了10万行，显然是走了全表扫描，执行时间是40毫秒。Q2扫描了10001行，执行了21毫秒。也就是说，我们在没有使用force index的时候，MySQL用错了索引，导致了更长的执行时间。")])]),s._v(" "),t("p",[s._v("这个例子对应的是我们平常不断地删除历史数据和新增数据的场景。这时，MySQL竟然会选错索引，是不是有点奇怪呢？今天，我们就从这个奇怪的结果说起吧。")]),s._v(" "),t("h2",{attrs:{id:"优化器的逻辑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化器的逻辑"}},[s._v("#")]),s._v(" 优化器的逻辑")]),s._v(" "),t("p",[s._v("在第一篇文章中，我们就提到过，"),t("strong",[s._v("选择索引是优化器的工作。")])]),s._v(" "),t("p",[s._v("而优化器选择索引的目的，是找到一个最优的执行方案，并用最小的代价去执行语句。在数据库里面，扫描行数是影响执行代价的因素之一。扫描的行数越少，意味着访问磁盘数据的次数越少，消耗的CPU资源越少。")]),s._v(" "),t("p",[s._v("当然，"),t("strong",[s._v("扫描行数并不是唯一的判断标准，优化器还会结合是否使用临时表、是否排序等因素进行综合判断。")])]),s._v(" "),t("p",[s._v("我们这个简单的查询语句并没有涉及到临时表和排序，所以MySQL选错索引肯定是在判断扫描行数的时候出问题了。")]),s._v(" "),t("p",[s._v("那么，问题就是："),t("strong",[s._v("扫描行数是怎么判断的？")])]),s._v(" "),t("p",[s._v("MySQL在真正开始执行语句之前，并不能精确地知道满足这个条件的记录有多少条，而只能根据统计信息来估算记录数。")]),s._v(" "),t("p",[t("strong",[s._v("这个统计信息就是索引的“区分度”。显然，一个索引上不同的值越多，这个索引的区分度就越好。"),t("strong",[s._v("而一个")]),s._v("索引上不同的值的个数，我们称之为“基数”（cardinality）")]),s._v("。也就是说，这个基数越大，索引的区分度越好。")]),s._v(" "),t("p",[s._v("我们可以使用show index方法，看到一个索引的基数。如图4所示，就是表t的show index 的结果 。虽然这个表的每一行的三个字段值都是一样的，"),t("strong",[s._v("但是在统计信息中，这三个索引的基数值并不同，而且其实都不准确。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231130215800001.png",alt:"image-20231130215818040"}})]),s._v(" "),t("p",[s._v("图4 表t的show index 结果")]),s._v(" "),t("p",[s._v("那么，"),t("strong",[s._v("MySQL是怎样得到索引的基数的呢？"),t("strong",[s._v("这里，我给你简单介绍一下")]),s._v("MySQL采样统计的方法。")])]),s._v(" "),t("p",[s._v("为什么要采样统计呢？因为把整张表取出来一行行统计，虽然可以得到精确的结果，但是代价太高了，所以只能选择“采样统计”。")]),s._v(" "),t("p",[s._v("采样统计的时候，I"),t("strong",[s._v("nnoDB默认会选择N个数据页，统计这些页面上的不同值，得到一个平均值，然后乘以这个索引的页面数，就得到了这个索引的基数。")])]),s._v(" "),t("p",[s._v("而数据表是会持续更新的，索引统计信息也不会固定不变。所以，当"),t("strong",[s._v("变更的数据行数超过1/M的时候，会自动触发重新做一次索引统计。")])]),s._v(" "),t("p",[s._v("在MySQL中，有两种存储索引统计的方式，可以通过设置参数innodb_stats_persistent的值来选择：")]),s._v(" "),t("ul",[t("li",[s._v("设置为on的时候，表示统计信息会持久化存储。这时，默认的N是20，M是10。")]),s._v(" "),t("li",[s._v("设置为off的时候，表示统计信息只存储在内存中。这时，默认的N是8，M是16。")])]),s._v(" "),t("p",[s._v("由于是采样统计，所以不管N是20还是8，这个基数都是很容易不准的。")]),s._v(" "),t("p",[s._v("但，这还不是全部。")]),s._v(" "),t("p",[s._v("你可以从图4中看到，这次的索引统计值（cardinality列）虽然不够精确，但大体上还是差不多的，"),t("strong",[s._v("选错索引一定还有别的原因。")])]),s._v(" "),t("p",[s._v("其实索引统计只是一个输入，对于一个具体的语句来说，优化器还要判断，执行这个语句本身要扫描多少行。")]),s._v(" "),t("p",[s._v("接下来，我们再一起看看优化器预估的，这两个语句的扫描行数是多少。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231130215826736.png",alt:"image-20231130215826736"}})]),s._v(" "),t("p",[s._v("图5 意外的explain结果")]),s._v(" "),t("p",[s._v("rows这个字段表示的是预计扫描行数。")]),s._v(" "),t("p",[s._v("其中，Q1的结果还是符合预期的，rows的值是104620；但是Q2的rows值是37116，偏差就大了。而图1中我们用explain命令看到的rows是只有10001行，是这个偏差误导了优化器的判断。")]),s._v(" "),t("p",[s._v("到这里，可能你的第一个疑问不是为什么不准，而是优化器为什么放着扫描37000行的执行计划不用，却选择了扫描行数是100000的执行计划呢？")]),s._v(" "),t("p",[s._v("这是因为，如果使用索引a，每次从索引a上拿到一个值，都要回到主键索引上查出整行数据，这个代价优化器也要算进去的。")]),s._v(" "),t("p",[s._v("而如果选择扫描10万行，是直接在主键索引上扫描的，没有额外的代价。")]),s._v(" "),t("p",[t("strong",[s._v("优化器会估算这两个选择的代价，从结果看来，优化器认为直接扫描主键索引更快。当然，从执行时间看来，这个选择并不是最优的。")])]),s._v(" "),t("p",[t("strong",[s._v("使用普通索引需要把回表的代价算进去")]),s._v("，在图1执行explain的时候，也考虑了这个策略的代价 ，但图1的选择是对的。也就是说，这个策略并没有问题。")]),s._v(" "),t("p",[s._v("所以冤有头债有主，MySQL选错索引，这件事儿还得归咎到没能准确地判断出扫描行数。至于为什么会得到错误的扫描行数，这个原因就作为课后问题，留给你去分析了。")]),s._v(" "),t("p",[t("strong",[s._v("既然是统计信息不对，那就修正。analyze table t 命令，可以用来重新统计索引信息")]),s._v("。我们来看一下执行效果。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231130215854880.png",alt:"image-20231130215834944"}})]),s._v(" "),t("p",[s._v("图6 执行analyze table t 命令恢复的explain结果")]),s._v(" "),t("p",[s._v("这回对了。")]),s._v(" "),t("p",[s._v("所以在实践中，如果你发现explain的结果预估的rows值跟实际情况差距比较大，可以采用这个方法来处理。")]),s._v(" "),t("p",[s._v("其实，如果只是索引统计不准确，通过analyze命令可以解决很多问题，但是前面我们说了，优化器可不止是看扫描行数。")]),s._v(" "),t("p",[s._v("依然是基于这个表t，我们看看另外一个语句：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("between")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("between")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("从条件上看，这个查询没有符合条件的记录，因此会返回空集合。")]),s._v(" "),t("p",[s._v("在开始执行这条语句之前，你可以先设想一下，如果你来选择索引，会选择哪一个呢？")]),s._v(" "),t("p",[s._v("为了便于分析，我们先来看一下a、b这两个索引的结构图。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231130215845517.png",alt:"image-20231130215845517"}})]),s._v(" "),t("p",[s._v("图7 a、b索引的结构图")]),s._v(" "),t("p",[s._v("如果使用索引a进行查询，那么就是扫描索引a的前1000个值，然后取到对应的id，再到主键索引上去查出每一行，然后根据字段b来过滤。显然这样需要扫描1000行。")]),s._v(" "),t("p",[s._v("如果使用索引b进行查询，那么就是扫描索引b的最后50001个值，与上面的执行过程相同，也是需要回到主键索引上取值再判断，所以需要扫描50001行。")]),s._v(" "),t("p",[s._v("所以你一定会想，如果使用索引a的话，执行速度明显会快很多。那么，下面我们就来看看到底是不是这么一回事儿。")]),s._v(" "),t("p",[s._v("图8是执行explain的结果。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("between")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("between")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231130215809111.png",alt:"image-20231130215854880"}})]),s._v(" "),t("p",[s._v("图8 使用explain方法查看执行计划 2")]),s._v(" "),t("p",[s._v("可以看到，返回结果中key字段显示，这次优化器选择了索引b，而rows字段显示需要扫描的行数是50198。")]),s._v(" "),t("p",[s._v("从这个结果中，你可以得到两个结论：")]),s._v(" "),t("ol",[t("li",[s._v("扫描行数的估计值依然不准确；")]),s._v(" "),t("li",[s._v("这个例子里MySQL又选错了索引。")])]),s._v(" "),t("h2",{attrs:{id:"索引选择异常和处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引选择异常和处理"}},[s._v("#")]),s._v(" 索引选择异常和处理")]),s._v(" "),t("p",[s._v("其实大多数时候优化器都能找到正确的索引，但偶尔你还是会碰到我们上面举例的这两种情况：原本可以执行得很快的SQL语句，执行速度却比你预期的慢很多，你应该怎么办呢？")]),s._v(" "),t("p",[t("strong",[s._v("一种方法是，像我们第一个例子一样，采用force index强行选择一个索引")]),s._v("。MySQL会根据词法解析的结果分析出可能可以使用的索引作为候选项，然后在候选列表中依次判断每个索引需要扫描多少行。如果force index指定的索引在候选索引列表中，就直接选择这个索引，不再评估其他索引的执行代价。")]),s._v(" "),t("p",[s._v("我们来看看第二个例子。刚开始分析时，我们认为选择索引a会更好。现在，我们就来看看执行效果：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231130215902087.png",alt:"image-20231130215902087"}})]),s._v(" "),t("p",[s._v("图9 使用不同索引的语句执行耗时")]),s._v(" "),t("p",[s._v("可以看到，原本语句需要执行2.23秒，而当你使用force index(a)的时候，只用了0.05秒，比优化器的选择快了40多倍。")]),s._v(" "),t("p",[s._v("也就是说，优化器没有选择正确的索引，force index起到了“矫正”的作用。")]),s._v(" "),t("p",[t("strong",[s._v("不过很多程序员不喜欢使用force index，一来这么写不优美，二来如果索引改了名字，这个语句也得改，显得很麻烦。而且如果以后迁移到别的数据库的话，这个语法还可能会不兼容。")])]),s._v(" "),t("p",[s._v("但其实"),t("strong",[s._v("使用force index最主要的问题还是变更的及时性。因为选错索引的情况还是比较少出现的，所以开发的时候通常不会先写上force index。而是等到线上出现问题的时候，你才会再去修改SQL语句、加上force index。但是修改之后还要测试和发布，对于生产系统来说，这个过程不够敏捷。")])]),s._v(" "),t("p",[s._v("所以，数据库的问题最好还是在数据库内部来解决。那么，在数据库里面该怎样解决呢？")]),s._v(" "),t("p",[s._v("既然优化器放弃了使用索引a，说明a还不够合适，所以"),t("strong",[s._v("第二种方法就是，我们可以考虑修改语句，引导MySQL使用我们期望的索引")]),s._v("。比如，在这个例子里，显然把“order by b limit 1” 改成 “order by b,a limit 1” ，语义的逻辑是相同的。")]),s._v(" "),t("p",[s._v("我们来看看改之后的效果：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231130215908926.png",alt:"image-20231130215908926"}})]),s._v(" "),t("p",[s._v("图10 order by b,a limit 1 执行结果")]),s._v(" "),t("p",[s._v("之前优化器选择使用索引b，是因为它认为使用索引b可以避免排序（b本身是索引，已经是有序的了，如果选择索引b的话，不需要再做排序，只需要遍历），所以即使扫描行数多，也判定为代价更小。")]),s._v(" "),t("p",[t("strong",[s._v("现在order by b,a 这种写法，要求按照b,a排序，就意味着使用这两个索引都需要排序。因此，扫描行数成了影响决策的主要条件")]),s._v("，于是此时优化器选了只需要扫描1000行的索引a。")]),s._v(" "),t("p",[s._v("当然，这种修改并不是通用的优化手段，只是刚好在这个语句里面有limit 1，因此如果有满足条件的记录， order by b limit 1和order by b,a limit 1 都会返回b是最小的那一行，逻辑上一致，才可以这么做。")]),s._v(" "),t("p",[s._v("如果你觉得修改语义这件事儿不太好，这里还有一种改法，图11是执行效果。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("between")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("between")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("alias "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231130215916894.png",alt:"image-20231130215916894"}})]),s._v(" "),t("p",[s._v("图11 改写SQL的explain")]),s._v(" "),t("p",[s._v("在这个例子里，我们用limit 100让优化器意识到，使用b索引代价是很高的。其实是我们根据数据特征诱导了一下优化器，也不具备通用性。")]),s._v(" "),t("p",[t("strong",[s._v("第三种方法是，在有些场景下，我们可以新建一个更合适的索引，来提供给优化器做选择，或删掉误用的索引。")])]),s._v(" "),t("p",[s._v("不过，在这个例子中，我没有找到通过新增索引来改变优化器行为的方法。这种情况其实比较少，尤其是经过DBA索引优化过的库，再碰到这个bug，找到一个更合适的索引一般比较难。")]),s._v(" "),t("p",[s._v("如果我说还有一个方法是删掉索引b，你可能会觉得好笑。但实际上我碰到过两次这样的例子，最终是DBA跟业务开发沟通后，发现这个优化器错误选择的索引其实根本没有必要存在，于是就删掉了这个索引，优化器也就重新选择到了正确的索引。")]),s._v(" "),t("h2",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),t("p",[s._v("今天我们一起聊了聊索引统计的更新机制，并提到了优化器存在选错索引的可能性。")]),s._v(" "),t("p",[t("strong",[s._v("对于由于索引统计信息不准确导致的问题，你可以用analyze table来解决。")])]),s._v(" "),t("p",[s._v("而对于其他优化器误判的情况，你可以在"),t("strong",[s._v("应用端用force index来强行指定索引，"),t("strong",[s._v("也可以通过")]),s._v("修改语句来引导优化器")]),s._v("，还可以通过"),t("strong",[s._v("增加或者删除索引来绕过这个问题。")])]),s._v(" "),t("p",[s._v("你可能会说，今天这篇文章后面的几个例子，怎么都没有展开说明其原理。我要告诉你的是，今天的话题，我们面对的是MySQL的bug，每一个展开都必须深入到一行行代码去量化，实在不是我们在这里应该做的事情。")]),s._v(" "),t("p",[s._v("所以，我把我用过的解决方法跟你分享，希望你在碰到类似情况的时候，能够有一些思路。")])])}),[],!1,null,null,null);t.default=e.exports}}]);