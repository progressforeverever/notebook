(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{421:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"spring-基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-基础"}},[s._v("#")]),s._v(" Spring 基础")]),s._v(" "),t("h3",{attrs:{id:"什么是-spring-框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-框架"}},[s._v("#")]),s._v(" 什么是 Spring 框架?")]),s._v(" "),t("p",[s._v("Spring 是一款开源的轻量级 Java 开发框架，旨在提高开发人员的开发效率以及系统的可维护性。")]),s._v(" "),t("p",[t("strong",[s._v("我们一般说 Spring 框架指的都是 Spring Framework，它是很多模块的集合")]),s._v("，使用这些模块可以很方便地协助我们进行开发，比如说 Spring 支持 "),t("strong",[s._v("IoC（Inversion of Control:控制反转） 和 AOP(Aspect-Oriented Programming:面向切面编程)")]),s._v("、可以很方便地对数据库进行访问、"),t("strong",[s._v("可以很方便地集成第三方组件（电子邮件，任务，调度，缓存等等）、对单元测试支持比较好、支持 RESTful Java 应用程序的开发。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/38ef122122de4375abcd27c3de8f60b4.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("Spring 最核心的思想就是不重新造轮子，开箱即用，提高开发效率。")])]),s._v(" "),t("p",[t("strong",[s._v("Spring 提供的核心功能主要是 IoC 和 AOP。学习 Spring ，一定要把 IoC 和 AOP 的核心思想搞懂！")])]),s._v(" "),t("ul",[t("li",[s._v("Spring 官网："),t("a",{attrs:{href:"https://spring.io/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://spring.io/"),t("OutboundLink")],1)]),s._v(" "),t("li",[s._v("GitHub 地址： https://github.com/spring-projects/spring-framework")])]),s._v(" "),t("h3",{attrs:{id:"spring-包含的模块有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-包含的模块有哪些"}},[s._v("#")]),s._v(" Spring 包含的模块有哪些？")]),s._v(" "),t("p",[t("strong",[s._v("Spring4.x 版本")]),s._v("：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/jvme0c60b4606711fc4a0b6faf03230247a.png",alt:"Spring4.x主要模块"}})]),s._v(" "),t("p",[t("strong",[s._v("Spring5.x 版本")]),s._v("：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/20200831175708.png",alt:"Spring5.x主要模块"}})]),s._v(" "),t("p",[s._v("Spring5.x 版本中 Web 模块的 Portlet 组件已经被废弃掉，同时增加了用于异步响应式处理的 WebFlux 组件。")]),s._v(" "),t("p",[s._v("Spring 各个模块的依赖关系如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/20200902100038.png",alt:"Spring 各个模块的依赖关系"}})]),s._v(" "),t("h4",{attrs:{id:"core-container"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#core-container"}},[s._v("#")]),s._v(" Core Container")]),s._v(" "),t("p",[s._v("Spring 框架的核心模块，也可以说是基础模块，主要提供 IoC 依赖注入功能的支持。Spring 其他所有的功能基本都需要依赖于该模块，我们从上面那张 Spring 各个模块的依赖关系图就可以看出来。")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("spring-core")]),s._v("："),t("strong",[s._v("Spring 框架基本的核心工具类。")])]),s._v(" "),t("li",[t("strong",[s._v("spring-beans")]),s._v("："),t("strong",[s._v("提供对 bean 的创建、配置和管理等功能的支持。")])]),s._v(" "),t("li",[t("strong",[s._v("spring-context")]),s._v("：提供对国际化、事件传播、资源加载等功能的支持。****")]),s._v(" "),t("li",[t("strong",[s._v("spring-expression")]),s._v("：提供对表达式语言（Spring Expression Language） SpEL 的支持，只依赖于 core 模块，不依赖于其他模块，可以单独使用。")])]),s._v(" "),t("h4",{attrs:{id:"aop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[s._v("#")]),s._v(" AOP")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("spring-aspects")]),s._v("：该模块为与 AspectJ 的集成提供支持。")]),s._v(" "),t("li",[t("strong",[s._v("spring-aop")]),s._v("："),t("strong",[s._v("提供了面向切面的编程实现。")])]),s._v(" "),t("li",[t("strong",[s._v("spring-instrument")]),s._v("：提供了为 JVM 添加代理（agent）的功能。 具体来讲，它为 Tomcat 提供了一个织入代理，能够为 Tomcat 传递类文 件，就像这些文件是被类加载器加载的一样。没有理解也没关系，这个模块的使用场景非常有限。")])]),s._v(" "),t("h4",{attrs:{id:"data-access-integration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-access-integration"}},[s._v("#")]),s._v(" Data Access/Integration")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("spring-jdbc")]),s._v("：提供了对数据库访问的抽象 JDBC。不同的数据库都有自己独立的 API 用于操作数据库，而 Java 程序只需要和 JDBC API 交互，这样就屏蔽了数据库的影响。")]),s._v(" "),t("li",[t("strong",[s._v("spring-tx")]),s._v("：提供对事务的支持。")]),s._v(" "),t("li",[t("strong",[s._v("spring-orm")]),s._v("：提供对 Hibernate、JPA、iBatis 等 ORM 框架的支持。")]),s._v(" "),t("li",[t("strong",[s._v("spring-oxm")]),s._v("：提供一个抽象层支撑 OXM(Object-to-XML-Mapping)，例如：JAXB、Castor、XMLBeans、JiBX 和 XStream 等。")]),s._v(" "),t("li",[t("strong",[s._v("spring-jms")]),s._v(" : 消息服务。自 Spring Framework 4.1 以后，它还提供了对 spring-messaging 模块的继承。")])]),s._v(" "),t("h4",{attrs:{id:"spring-web"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-web"}},[s._v("#")]),s._v(" Spring Web")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("spring-web")]),s._v("：对 Web 功能的实现提供一些最基础的支持。")]),s._v(" "),t("li",[t("strong",[s._v("spring-webmvc")]),s._v("："),t("strong",[s._v("提供对 Spring MVC 的实现。")])]),s._v(" "),t("li",[t("strong",[s._v("spring-websocket")]),s._v("：提供了对 WebSocket 的支持，WebSocket 可以让客户端和服务端进行双向通信。")]),s._v(" "),t("li",[t("strong",[s._v("spring-webflux")]),s._v("：提供对 WebFlux 的支持。WebFlux 是 Spring Framework 5.0 中引入的新的响应式框架。与 Spring MVC 不同，它不需要 Servlet API，是完全异步。")])]),s._v(" "),t("h4",{attrs:{id:"messaging"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#messaging"}},[s._v("#")]),s._v(" Messaging")]),s._v(" "),t("p",[t("strong",[s._v("spring-messaging")]),s._v(" 是从 Spring4.0 开始新加入的一个模块，主要职责是为 Spring 框架集成一些基础的报文传送应用。")]),s._v(" "),t("h4",{attrs:{id:"spring-test"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-test"}},[s._v("#")]),s._v(" Spring Test")]),s._v(" "),t("p",[s._v("Spring 团队提倡测试驱动开发（TDD）。有了控制反转 (IoC)的帮助，单元测试和集成测试变得更简单。")]),s._v(" "),t("p",[s._v("Spring 的测试模块对 JUnit（单元测试框架）、TestNG（类似 JUnit）、Mockito（主要用来 Mock 对象）、PowerMock（解决 Mockito 的问题比如无法模拟 final, static， private 方法）等等常用的测试框架支持的都比较好。")]),s._v(" "),t("h3",{attrs:{id:"spring-spring-mvc-spring-boot-之间什么关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-spring-mvc-spring-boot-之间什么关系"}},[s._v("#")]),s._v(" Spring,Spring MVC,Spring Boot 之间什么关系?")]),s._v(" "),t("p",[s._v("很多人对 Spring,Spring MVC,Spring Boot 这三者傻傻分不清楚！这里简单介绍一下这三者，其实很简单，没有什么高深的东西。")]),s._v(" "),t("p",[t("strong",[s._v("Spring 包含了多个功能模块（上面刚刚提到过），其中最重要的是 Spring-Core（主要提供 IoC 依赖注入功能的支持） 模块， Spring 中的其他模块（比如 Spring MVC）的功能实现基本都需要依赖于该模块")]),s._v("。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://oss.javaguide.cn/github/javaguide/jvme0c60b4606711fc4a0b6faf03230247a.png",alt:"Spring主要模块"}})]),s._v(" "),t("p",[t("strong",[s._v("Spring MVC 是 Spring 中的一个很重要的模块，主要赋予 Spring 快速构建 MVC 架构的 Web 程序的能力。MVC 是模型(Model)、视图(View)、控制器(Controller)的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://oss.javaguide.cn/java-guide-blog/image-20210809181452421.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("使用 Spring 进行开发各种配置过于麻烦比如开启某些 Spring 特性时，需要用 XML 或 Java 进行显式配置。于是，Spring Boot 诞生了！")])]),s._v(" "),t("p",[s._v("Spring 旨在简化 J2EE 企业应用程序开发。"),t("strong",[s._v("Spring Boot 旨在简化 Spring 开发（减少配置文件，开箱即用！）。")])]),s._v(" "),t("p",[t("strong",[s._v("Spring Boot 只是简化了配置，如果你需要构建 MVC 架构的 Web 程序，你还是需要使用 Spring MVC 作为 MVC 框架，只是说 Spring Boot 帮你简化了 Spring MVC 的很多配置，真正做到开箱即用！")])]),s._v(" "),t("h2",{attrs:{id:"spring-ioc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc"}},[s._v("#")]),s._v(" Spring IoC")]),s._v(" "),t("h3",{attrs:{id:"谈谈自己对于-spring-ioc-的了解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#谈谈自己对于-spring-ioc-的了解"}},[s._v("#")]),s._v(" 谈谈自己对于 Spring IoC 的了解")]),s._v(" "),t("p",[t("strong",[s._v("IoC（Inversion of Control:控制反转）")]),s._v(" 是一种设计思想，而不是一个具体的技术实现。"),t("strong",[s._v("IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理")]),s._v("。不过， IoC 并非 Spring 特有，在其他语言中也有应用。")]),s._v(" "),t("p",[t("strong",[s._v("为什么叫控制反转？")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("控制")]),s._v("：指的是"),t("strong",[s._v("对象创建（实例化、管理）的权力")])]),s._v(" "),t("li",[t("strong",[s._v("反转")]),s._v("："),t("strong",[s._v("控制权交给外部环境（Spring 框架、IoC 容器）")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://oss.javaguide.cn/java-guide-blog/frc-365faceb5697f04f31399937c059c162.png",alt:"IoC 图解"}})]),s._v(" "),t("p",[t("strong",[s._v("将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入")]),s._v("。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。 "),t("strong",[s._v("IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。")])]),s._v(" "),t("p",[s._v("**在实际项目中一个 Service 类可能依赖了很多其他的类，假如我们需要实例化这个 Service，你可能要每次都要搞清这个 Service 所有底层类的构造函数，这可能会把人逼疯。**如果利用 IoC 的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。")]),s._v(" "),t("p",[s._v("在 Spring 中， "),t("strong",[s._v("IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个 Map（key，value），Map 中存放的是各种对象。")])]),s._v(" "),t("p",[t("strong",[s._v("Spring 时代我们一般通过 XML 文件来配置 Bean，后来开发人员觉得 XML 文件来配置不太好，于是 SpringBoot 注解配置就慢慢开始流行起来。")])]),s._v(" "),t("p",[s._v("相关阅读：")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://javadoop.com/post/spring-ioc",target:"_blank",rel:"noopener noreferrer"}},[s._v("IoC 源码阅读"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("RouterLink",{attrs:{to:"/java/50.Spring/ioc-and-aop.html"}},[s._v("IoC & AOP 详解（快速搞懂）")])],1)]),s._v(" "),t("h3",{attrs:{id:"什么是-spring-bean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-bean"}},[s._v("#")]),s._v(" 什么是 Spring Bean？")]),s._v(" "),t("p",[s._v("简单来说，"),t("strong",[s._v("Bean 代指的就是那些被 IoC 容器所管理的对象。")])]),s._v(" "),t("p",[s._v("我们需要告诉 IoC 容器帮助我们管理哪些对象，"),t("strong",[s._v("这个是通过配置元数据来定义的")]),s._v("。"),t("strong",[s._v("配置元数据可以是 XML 文件、注解或者 Java 配置类。")])]),s._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!-- Constructor-arg with 'value' attribute --\x3e")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("bean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("id")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("..."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("..."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("constructor-arg")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("value")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("..."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("bean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("下图简单地展示了 IoC 容器如何使用配置元数据来管理对象。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/062b422bd7ac4d53afd28fb74b2bc94d.png",alt:""}})]),s._v(" "),t("p",[t("code",[s._v("org.springframework.beans")]),s._v("和 "),t("code",[s._v("org.springframework.context")]),s._v(" 这两个包是 IoC 实现的基础，如果想要研究 IoC 相关的源码的话，可以去看看")]),s._v(" "),t("h3",{attrs:{id:"将一个类声明为-bean-的注解有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将一个类声明为-bean-的注解有哪些"}},[s._v("#")]),s._v(" 将一个类声明为 Bean 的注解有哪些?")]),s._v(" "),t("ul",[t("li",[t("strong",[t("code",[s._v("@Component")]),s._v("：通用的注解，可标注任意类为 "),t("code",[s._v("Spring")]),s._v(" 组件")]),s._v("。如果一个 Bean "),t("strong",[s._v("不知道属于哪个层，可以使用"),t("code",[s._v("@Component")]),s._v(" 注解标注。")])]),s._v(" "),t("li",[t("code",[s._v("@Repository")]),s._v(" "),t("strong",[s._v(": 对应持久层即 Dao 层，主要用于数据库相关操作。")])]),s._v(" "),t("li",[t("code",[s._v("@Service")]),s._v(" : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。")]),s._v(" "),t("li",[t("code",[s._v("@Controller")]),s._v(" : 对应 Spring MVC 控制层，主要用于接受用户请求并调用 "),t("code",[s._v("Service")]),s._v(" 层返回数据给前端页面。")])]),s._v(" "),t("h3",{attrs:{id:"component-和-bean-的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#component-和-bean-的区别是什么"}},[s._v("#")]),s._v(" @Component 和 @Bean 的区别是什么？")]),s._v(" "),t("ul",[t("li",[t("strong",[t("code",[s._v("@Component")]),s._v(" 注解作用于类，而"),t("code",[s._v("@Bean")]),s._v("注解作用于方法。")])]),s._v(" "),t("li",[t("code",[s._v("@Component")]),s._v("通常是通过"),t("strong",[s._v("类路径扫描来自动侦测以及自动装配到 Spring 容器中（我们可以使用 "),t("code",[s._v("@ComponentScan")]),s._v(" 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中）")]),s._v("。"),t("code",[s._v("@Bean")]),s._v(" 注解通常是我们在标有该注解的方法中定义产生这个 bean,"),t("code",[s._v("@Bean")]),s._v("告诉了 Spring 这是某个类的实例，当我需要用它的时候还给我。")]),s._v(" "),t("li",[t("code",[s._v("@Bean")]),s._v(" 注解比 "),t("code",[s._v("@Component")]),s._v(" 注解的自定义性更强，"),t("strong",[s._v("而且很多地方我们只能通过 "),t("code",[s._v("@Bean")]),s._v(" 注解来注册 bean。比如当我们引用第三方库中的类需要装配到 "),t("code",[s._v("Spring")]),s._v("容器时，则只能通过 "),t("code",[s._v("@Bean")]),s._v("来实现。")])])]),s._v(" "),t("p",[t("code",[s._v("@Bean")]),s._v("注解使用示例：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Configuration")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AppConfig")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Bean")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransferService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("transferService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransferServiceImpl")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("上面的代码相当于下面的 xml 配置")]),s._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("beans")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("bean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("id")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("transferService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("com.acme.TransferServiceImpl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("/>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("beans")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("下面这个例子是通过 "),t("code",[s._v("@Component")]),s._v(" 无法实现的。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Bean")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OneService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("status"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("status"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        when "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("serviceImpl1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        when "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("serviceImpl2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        when "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("serviceImpl3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h3",{attrs:{id:"注入-bean-的注解有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注入-bean-的注解有哪些"}},[s._v("#")]),s._v(" 注入 Bean 的注解有哪些？")]),s._v(" "),t("p",[t("strong",[s._v("之前是标注了bean,用到的时候就要去注入了。Spring 内置的 "),t("code",[s._v("@Autowired")]),s._v(" 以及 JDK 内置的 "),t("code",[s._v("@Resource")]),s._v(" 和 "),t("code",[s._v("@Inject")]),s._v(" 都可以用于注入 Bean。")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("Annotaion")]),s._v(" "),t("th",[s._v("Package")]),s._v(" "),t("th",[s._v("Source")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("@Autowired")])]),s._v(" "),t("td",[t("code",[s._v("org.springframework.bean.factory")])]),s._v(" "),t("td",[s._v("Spring 2.5+")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("@Resource")])]),s._v(" "),t("td",[t("code",[s._v("javax.annotation")])]),s._v(" "),t("td",[s._v("Java JSR-250")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("@Inject")])]),s._v(" "),t("td",[t("code",[s._v("javax.inject")])]),s._v(" "),t("td",[s._v("Java JSR-330")])])])]),s._v(" "),t("p",[t("code",[s._v("@Autowired")]),s._v(" 和"),t("code",[s._v("@Resource")]),s._v("使用的比较多一些。")]),s._v(" "),t("h3",{attrs:{id:"autowired-和-resource-的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#autowired-和-resource-的区别是什么"}},[s._v("#")]),s._v(" @Autowired 和 @Resource 的区别是什么？")]),s._v(" "),t("p",[t("code",[s._v("Autowired")]),s._v(" 属于 "),t("strong",[s._v("Spring 内置的注解，默认的注入方式为"),t("code",[s._v("byType")]),s._v("（根据类型进行匹配），也就是说会优先根据接口类型去匹配并注入 Bean （接口的实现类）。")])]),s._v(" "),t("p",[t("strong",[s._v("这会有什么问题呢？")]),s._v(" 当"),t("strong",[s._v("一个接口存在多个实现类的话，"),t("code",[s._v("byType")]),s._v("这种方式就无法正确注入对象了")]),s._v("，因为这个时候 Spring 会同时找到多个满足条件的选择，默认情况下它自己不知道选择哪一个。")]),s._v(" "),t("p",[s._v("这种情况下，"),t("strong",[s._v("注入方式会变为 "),t("code",[s._v("byName")]),s._v("（根据名称进行匹配），这个名称通常就是类名（首字母小写）。就比如说下面代码中的 "),t("code",[s._v("smsService")]),s._v(" 就是我这里所说的名称，这样应该比较好理解了吧。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// smsService 就是我们上面所说的名称")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Autowired")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SmsService")]),s._v(" smsService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("举个例子，"),t("code",[s._v("SmsService")]),s._v(" 接口有两个实现类: "),t("code",[s._v("SmsServiceImpl1")]),s._v("和 "),t("code",[s._v("SmsServiceImpl2")]),s._v("，且它们都已经被 Spring 容器所管理。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 报错，byName 和 byType 都无法匹配到 bean")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Autowired")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SmsService")]),s._v(" smsService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 正确注入 SmsServiceImpl1 对象对应的 bean")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Autowired")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SmsService")]),s._v(" smsServiceImpl1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 正确注入  SmsServiceImpl1 对象对应的 bean")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// smsServiceImpl1 就是我们上面所说的名称")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Autowired")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Qualifier")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"smsServiceImpl1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SmsService")]),s._v(" smsService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("我们还是建议通过 "),t("code",[s._v("@Qualifier")]),s._v(" 注解来显式指定名称而不是依赖变量的名称。")]),s._v(" "),t("p",[t("strong",[t("code",[s._v("@Resource")]),s._v("属于 JDK 提供的注解，默认注入方式为 "),t("code",[s._v("byName")]),s._v("。如果无法通过名称匹配到对应的 Bean 的话，注入方式会变为"),t("code",[s._v("byType")]),s._v("。")])]),s._v(" "),t("p",[t("code",[s._v("@Resource")]),s._v(" 有两个比较重要且日常开发常用的属性："),t("strong",[t("code",[s._v("name")]),s._v("（名称）、"),t("code",[s._v("type")]),s._v("（类型）。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Resource")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("strong",[s._v("如果仅指定 "),t("code",[s._v("name")]),s._v(" 属性则注入方式为"),t("code",[s._v("byName")]),s._v("，如果仅指定"),t("code",[s._v("type")]),s._v("属性则注入方式为"),t("code",[s._v("byType")]),s._v("，如果同时指定"),t("code",[s._v("name")]),s._v(" 和"),t("code",[s._v("type")]),s._v("属性（不建议这么做）则注入方式为"),t("code",[s._v("byType")]),s._v("+"),t("code",[s._v("byName")]),s._v("。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 报错，byName 和 byType 都无法匹配到 bean")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Resource")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SmsService")]),s._v(" smsService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 正确注入 SmsServiceImpl1 对象对应的 bean")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Resource")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SmsService")]),s._v(" smsServiceImpl1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 正确注入 SmsServiceImpl1 对象对应的 bean（比较推荐这种方式）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Resource")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"smsServiceImpl1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SmsService")]),s._v(" smsService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("简单总结一下：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("@Autowired")]),s._v(" 是 Spring 提供的注解，"),t("code",[s._v("@Resource")]),s._v(" 是 JDK 提供的注解。")]),s._v(" "),t("li",[t("strong",[t("code",[s._v("Autowired")]),s._v(" 默认的注入方式为"),t("code",[s._v("byType")]),s._v("（根据类型进行匹配），"),t("code",[s._v("@Resource")]),s._v("默认注入方式为 "),t("code",[s._v("byName")]),s._v("（根据名称进行匹配）。")])]),s._v(" "),t("li",[t("strong",[s._v("当一个接口存在多个实现类的情况下，"),t("code",[s._v("@Autowired")]),s._v(" 和"),t("code",[s._v("@Resource")]),s._v("都需要通过名称才能正确匹配到对应的 Bean。"),t("code",[s._v("Autowired")]),s._v(" 可以通过 "),t("code",[s._v("@Qualifier")]),s._v(" 注解来显式指定名称，"),t("code",[s._v("@Resource")]),s._v("可以通过 "),t("code",[s._v("name")]),s._v(" 属性来显式指定名称。")])]),s._v(" "),t("li",[t("code",[s._v("@Autowired")]),s._v(" 支持在构造函数、方法、字段和参数上使用。"),t("code",[s._v("@Resource")]),s._v(" 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。")])]),s._v(" "),t("h3",{attrs:{id:"bean-的作用域有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bean-的作用域有哪些"}},[s._v("#")]),s._v(" Bean 的作用域有哪些?")]),s._v(" "),t("p",[s._v("Spring 中 Bean 的作用域通常有下面几种：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("singleton")]),s._v(" : IoC 容器中只有唯一的 bean 实例。"),t("strong",[s._v("Spring 中的 bean 默认都是单例的，是对单例设计模式的应用。")])]),s._v(" "),t("li",[t("strong",[s._v("prototype")]),s._v(" : "),t("strong",[s._v("每次获取都会创建一个新的 bean 实例。也就是说，连续 "),t("code",[s._v("getBean()")]),s._v(" 两次，得到的是不同的 Bean 实例。")])]),s._v(" "),t("li",[t("strong",[s._v("request")]),s._v(" （仅 Web 应用可用）: 每一次 HTTP 请求都会产生一个新的 bean（请求 bean），该 bean 仅在当前 HTTP request 内有效。")]),s._v(" "),t("li",[t("strong",[s._v("session")]),s._v(" （仅 Web 应用可用） : 每一次来自新 session 的 HTTP 请求都会产生一个新的 bean（会话 bean），该 bean 仅在当前 HTTP session 内有效。")]),s._v(" "),t("li",[t("strong",[s._v("application/global-session")]),s._v(" （仅 Web 应用可用）：每个 Web 应用在启动时创建一个 Bean（应用 Bean），该 bean 仅在当前应用启动时间内有效。")]),s._v(" "),t("li",[t("strong",[s._v("websocket")]),s._v(" （仅 Web 应用可用）：每一次 WebSocket 会话产生一个新的 bean。")])]),s._v(" "),t("p",[t("strong",[s._v("如何配置 bean 的作用域呢？")])]),s._v(" "),t("p",[s._v("xml 方式：")]),s._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("bean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("id")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("..."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("..."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("scope")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("singleton"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("bean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("注解方式：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Bean")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Scope")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConfigurableBeanFactory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SCOPE_PROTOTYPE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("personPrototype")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"bean-是线程安全的吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bean-是线程安全的吗"}},[s._v("#")]),s._v(" Bean 是线程安全的吗？")]),s._v(" "),t("p",[s._v("Spring 框架中的 Bean 是否线程安全，取决于其作用域和状态。")]),s._v(" "),t("p",[s._v("我们这里以最常用的两种作用域 prototype 和 singleton 为例介绍。几乎所有场景的 Bean 作用域都是使用默认的 singleton ，重点关注 singleton 作用域即可。")]),s._v(" "),t("p",[t("strong",[s._v("prototype 作用域下，每次获取都会创建一个新的 bean 实例，不存在资源竞争问题，所以不存在线程安全问题")]),s._v("。singleton 作用域下，IoC 容器中只有唯一的 bean 实例，"),t("strong",[s._v("可能会存在资源竞争问题（取决于 Bean 是否有状态）。如果这个 bean 是有状态的话，那就存在线程安全问题（有状态 Bean 是指包含可变的成员变量的对象）。")])]),s._v(" "),t("p",[s._v("不过，大部分 Bean 实际都是无状态（没有定义可变的成员变量）的（比如 Dao、Service），这种情况下， Bean 是线程安全的。")]),s._v(" "),t("p",[s._v("对于有状态单例 Bean 的线程安全问题，常见的有两种解决办法：")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("在 Bean 中尽量避免定义可变的成员变量。")])]),s._v(" "),t("li",[t("strong",[s._v("在类中定义一个 "),t("code",[s._v("ThreadLocal")]),s._v(" 成员变量，将需要的可变成员变量保存在 "),t("code",[s._v("ThreadLocal")]),s._v(" 中（推荐的一种方式）。")])])]),s._v(" "),t("h3",{attrs:{id:"bean-的生命周期了解么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bean-的生命周期了解么"}},[s._v("#")]),s._v(" Bean 的生命周期了解么?")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("Bean 容器找到配置文件中 Spring Bean 的定义。")])]),s._v(" "),t("li",[s._v("Bean 容器利用 "),t("strong",[s._v("Java Reflection API 创建一个 Bean 的实例。")])]),s._v(" "),t("li",[t("strong",[s._v("如果涉及到一些属性值 利用 "),t("code",[s._v("set()")]),s._v("方法设置一些属性值。")])]),s._v(" "),t("li",[t("strong",[s._v("如果 Bean 实现了 "),t("code",[s._v("BeanNameAware")]),s._v(" 接口，调用 "),t("code",[s._v("setBeanName()")]),s._v("方法，传入 Bean 的名字。")])]),s._v(" "),t("li",[s._v("如果 Bean 实现了 "),t("code",[s._v("BeanClassLoaderAware")]),s._v(" 接口，调用 "),t("code",[s._v("setBeanClassLoader()")]),s._v("方法，传入 "),t("code",[s._v("ClassLoader")]),s._v("对象的实例。")]),s._v(" "),t("li",[s._v("如果 Bean 实现了 "),t("code",[s._v("BeanFactoryAware")]),s._v(" 接口，调用 "),t("code",[s._v("setBeanFactory()")]),s._v("方法，传入 "),t("code",[s._v("BeanFactory")]),s._v("对象的实例。")]),s._v(" "),t("li",[s._v("与上面的类似，如果实现了其他 "),t("code",[s._v("*.Aware")]),s._v("接口，就调用相应的方法。")]),s._v(" "),t("li",[s._v("如果有和加载这个 Bean 的 Spring 容器相关的 "),t("code",[s._v("BeanPostProcessor")]),s._v(" 对象，执行"),t("code",[s._v("postProcessBeforeInitialization()")]),s._v(" 方法")]),s._v(" "),t("li",[s._v("如果 Bean 实现了"),t("code",[s._v("InitializingBean")]),s._v("接口，执行"),t("code",[s._v("afterPropertiesSet()")]),s._v("方法。")]),s._v(" "),t("li",[t("strong",[s._v("如果 Bean 在配置文件中的定义包含 init-method 属性，执行指定的方法。")])]),s._v(" "),t("li",[s._v("如果有和加载这个 Bean 的 Spring 容器相关的 "),t("code",[s._v("BeanPostProcessor")]),s._v(" 对象，执行"),t("code",[s._v("postProcessAfterInitialization()")]),s._v(" 方法")]),s._v(" "),t("li",[t("strong",[s._v("当要销毁 Bean 的时候，如果 Bean 实现了 "),t("code",[s._v("DisposableBean")]),s._v(" 接口，执行 "),t("code",[s._v("destroy()")]),s._v(" 方法。")])]),s._v(" "),t("li",[t("strong",[s._v("当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的方法。")])])]),s._v(" "),t("p",[s._v("图示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.xiaozhuanlan.com/photo/2019/24bc2bad3ce28144d60d9e0a2edf6c7f.jpg",alt:"Spring Bean 生命周期"}})]),s._v(" "),t("p",[s._v("与之比较类似的中文版本:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://images.xiaozhuanlan.com/photo/2019/b5d264565657a5395c2781081a7483e1.jpg",alt:"Spring Bean 生命周期"}})]),s._v(" "),t("h2",{attrs:{id:"spring-aop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop"}},[s._v("#")]),s._v(" Spring AoP")]),s._v(" "),t("h3",{attrs:{id:"谈谈自己对于-aop-的了解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#谈谈自己对于-aop-的了解"}},[s._v("#")]),s._v(" 谈谈自己对于 AOP 的了解")]),s._v(" "),t("p",[t("strong",[s._v("AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。")])]),s._v(" "),t("p",[s._v("Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 "),t("strong",[s._v("JDK Proxy")]),s._v("，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 "),t("strong",[s._v("Cglib")]),s._v(" 生成一个被代理对象的子类来作为代理，如下图所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/230ae587a322d6e4d09510161987d346.jpeg",alt:"SpringAOPProcess"}})]),s._v(" "),t("p",[s._v("当然你也可以使用 "),t("strong",[s._v("AspectJ")]),s._v(" ！Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。")]),s._v(" "),t("p",[s._v("AOP 切面编程涉及到的一些专业术语：")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[s._v("术语")]),s._v(" "),t("th",{staticStyle:{"text-align":"center"}},[s._v("含义")])])]),s._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("目标(Target)")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("被通知的对象")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("代理(Proxy)")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("向目标对象应用通知之后创建的代理对象")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("连接点(JoinPoint)")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("目标对象的所属类中，定义的所有方法均为连接点")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("切入点(Pointcut)")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("被切面拦截 / 增强的连接点（切入点一定是连接点，连接点不一定是切入点）")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("通知(Advice)")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("增强的逻辑 / 代码，也即拦截到目标对象的连接点之后要做的事情")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("切面(Aspect)")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("切入点(Pointcut)+通知(Advice)")])]),s._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[s._v("Weaving(织入)")]),s._v(" "),t("td",{staticStyle:{"text-align":"center"}},[s._v("将通知应用到目标对象，进而生成代理对象的过程动作")])])])]),s._v(" "),t("h3",{attrs:{id:"spring-aop-和-aspectj-aop-有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop-和-aspectj-aop-有什么区别"}},[s._v("#")]),s._v(" Spring AOP 和 AspectJ AOP 有什么区别？")]),s._v(" "),t("p",[t("strong",[s._v("Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。")]),s._v(" Spring AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作(Bytecode Manipulation)。")]),s._v(" "),t("p",[s._v("Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。AspectJ 相比于 Spring AOP 功能更加强大，但是 Spring AOP 相对来说更简单，")]),s._v(" "),t("p",[s._v("如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择 AspectJ ，它比 Spring AOP 快很多。")]),s._v(" "),t("h3",{attrs:{id:"aspectj-定义的通知类型有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aspectj-定义的通知类型有哪些"}},[s._v("#")]),s._v(" AspectJ 定义的通知类型有哪些？")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("Before")]),s._v("（前置通知）：目标对象的方法调用之前触发")]),s._v(" "),t("li",[t("strong",[s._v("After")]),s._v(" （后置通知）：目标对象的方法调用之后触发")]),s._v(" "),t("li",[t("strong",[s._v("AfterReturning")]),s._v("（返回通知）：目标对象的方法调用完成，在返回结果值之后触发")]),s._v(" "),t("li",[t("strong",[s._v("AfterThrowing")]),s._v("（异常通知）：目标对象的方法运行中抛出 / 触发异常后触发。AfterReturning 和 AfterThrowing 两者互斥。如果方法调用成功无异常，则会有返回值；如果方法抛出了异常，则不会有返回值。")]),s._v(" "),t("li",[t("strong",[s._v("Around")]),s._v(" （环绕通知）：编程式控制目标对象的方法调用。环绕通知是所有通知类型中可操作范围最大的一种，因为它可以直接拿到目标对象，以及要执行的方法，所以环绕通知可以任意的在目标对象的方法调用前后搞事，甚至不调用目标对象的方法")])]),s._v(" "),t("h3",{attrs:{id:"多个切面的执行顺序如何控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多个切面的执行顺序如何控制"}},[s._v("#")]),s._v(" 多个切面的执行顺序如何控制？")]),s._v(" "),t("p",[s._v("1、通常使用"),t("code",[s._v("@Order")]),s._v(" 注解直接定义切面顺序")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 值越小优先级越高")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Order")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Component")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Aspect")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LoggingAspect")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Ordered")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("2、实现"),t("code",[s._v("Ordered")]),s._v(" 接口重写 "),t("code",[s._v("getOrder")]),s._v(" 方法。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Component")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Aspect")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LoggingAspect")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Ordered")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ....")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getOrder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回值越小优先级越高")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h2",{attrs:{id:"spring-mvc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc"}},[s._v("#")]),s._v(" Spring MVC")]),s._v(" "),t("h3",{attrs:{id:"说说自己对于-spring-mvc-了解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#说说自己对于-spring-mvc-了解"}},[s._v("#")]),s._v(" 说说自己对于 Spring MVC 了解?")]),s._v(" "),t("p",[t("strong",[s._v("MVC 是模型(Model)、视图(View)、控制器(Controller)的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://oss.javaguide.cn/java-guide-blog/image-20210809181452421.png",alt:""}})]),s._v(" "),t("p",[s._v("网上有很多人说 MVC 不是设计模式，只是软件设计规范，我个人更倾向于 MVC 同样是众多设计模式中的一种。"),t("strong",[t("a",{attrs:{href:"https://github.com/iluwatar/java-design-patterns",target:"_blank",rel:"noopener noreferrer"}},[s._v("java-design-patterns"),t("OutboundLink")],1)]),s._v(" 项目中就有关于 MVC 的相关介绍。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/159b3d3e70dd45e6afa81bf06d09264e.png",alt:""}})]),s._v(" "),t("p",[s._v("想要真正理解 Spring MVC，我们先来看看 Model 1 和 Model 2 这两个没有 Spring MVC 的时代。")]),s._v(" "),t("p",[t("strong",[s._v("Model 1 时代")])]),s._v(" "),t("p",[s._v("很多学 Java 后端比较晚的朋友可能并没有接触过 Model 1 时代下的 JavaWeb 应用开发。在 Model1 模式下，整个 Web 应用几乎全部用 JSP 页面组成，只用少量的 JavaBean 来处理数据库连接、访问等操作。")]),s._v(" "),t("p",[s._v("这个模式下 JSP 即是控制层（Controller）又是表现层（View）。显而易见，这种模式存在很多问题。比如控制逻辑和表现逻辑混杂在一起，导致代码重用率极低；再比如前端和后端相互依赖，难以进行测试维护并且开发效率极低。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://oss.javaguide.cn/java-guide-blog/mvc-mode1.png",alt:"mvc-mode1"}})]),s._v(" "),t("p",[t("strong",[s._v("Model 2 时代")])]),s._v(" "),t("p",[s._v("学过 Servlet 并做过相关 Demo 的朋友应该了解“Java Bean(Model)+ JSP（View）+Servlet（Controller） ”这种开发模式，这就是早期的 JavaWeb MVC 开发模式。")]),s._v(" "),t("ul",[t("li",[s._v("Model:系统涉及的数据，也就是 dao 和 bean。")]),s._v(" "),t("li",[s._v("View：展示模型中的数据，只是用来展示。")]),s._v(" "),t("li",[s._v("Controller：接受用户请求，并将请求发送至 Model，最后返回数据给 JSP 并展示给用户")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://oss.javaguide.cn/java-guide-blog/mvc-model2.png",alt:""}})]),s._v(" "),t("p",[s._v("Model2 模式下还存在很多问题，Model2 的抽象和封装程度还远远不够，使用 Model2 进行开发时不可避免地会重复造轮子，这就大大降低了程序的可维护性和复用性。")]),s._v(" "),t("p",[s._v("于是，很多 JavaWeb 开发相关的 MVC 框架应运而生比如 Struts2，但是 Struts2 比较笨重。")]),s._v(" "),t("p",[t("strong",[s._v("Spring MVC 时代")])]),s._v(" "),t("p",[s._v("随着 Spring 轻量级开发框架的流行，Spring 生态圈出现了 Spring MVC 框架， Spring MVC 是当前最优秀的 MVC 框架。相比于 Struts2 ， Spring MVC 使用更加简单和方便，开发效率更高，并且 Spring MVC 运行速度更快。")]),s._v(" "),t("p",[s._v("MVC 是一种设计模式，Spring MVC 是一款很优秀的 MVC 框架。Spring MVC 可以帮助我们进行更简洁的 Web 层的开发，并且它天生与 Spring 框架集成**。Spring MVC 下我们一般把后端项目分为 Service 层（处理业务）、Dao 层（数据库操作）、Entity 层（实体类）、Controller 层(控制层，返回数据给前台页面)。**")]),s._v(" "),t("h3",{attrs:{id:"spring-mvc-的核心组件有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-的核心组件有哪些"}},[s._v("#")]),s._v(" Spring MVC 的核心组件有哪些？")]),s._v(" "),t("p",[s._v("记住了下面这些组件，也就记住了 SpringMVC 的工作原理。")]),s._v(" "),t("ul",[t("li",[t("strong",[t("code",[s._v("DispatcherServlet")])]),s._v("："),t("strong",[s._v("核心的中央处理器")]),s._v("，负责"),t("strong",[s._v("接收请求、分发，并给予客户端响应。")])]),s._v(" "),t("li",[t("strong",[t("code",[s._v("HandlerMapping")])]),s._v("："),t("strong",[s._v("处理器映射器")]),s._v("，"),t("strong",[s._v("根据 URL 去匹配查找能处理的 "),t("code",[s._v("Handler")]),s._v(" ，并会将请求涉及到的拦截器和 "),t("code",[s._v("Handler")]),s._v(" 一起封装。")])]),s._v(" "),t("li",[t("strong",[t("code",[s._v("HandlerAdapter")])]),s._v("："),t("strong",[s._v("处理器适配器")]),s._v("，根据 "),t("code",[s._v("HandlerMapping")]),s._v(" "),t("strong",[s._v("找到的 "),t("code",[s._v("Handler")]),s._v(" ，适配执行对应的 "),t("code",[s._v("Handler")]),s._v("；")])]),s._v(" "),t("li",[t("strong",[t("code",[s._v("Handler")])]),s._v("："),t("strong",[s._v("请求处理器")]),s._v("，处理实际请求的处理器。")]),s._v(" "),t("li",[t("strong",[t("code",[s._v("ViewResolver")])]),s._v("："),t("strong",[s._v("视图解析器")]),s._v("，根据 "),t("code",[s._v("Handler")]),s._v(" 返回的逻辑视图 / 视图，解析并渲染真正的视图，并传递给 "),t("code",[s._v("DispatcherServlet")]),s._v(" 响应客户端")])]),s._v(" "),t("h3",{attrs:{id:"springmvc-工作原理了解吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springmvc-工作原理了解吗"}},[s._v("#")]),s._v(" SpringMVC 工作原理了解吗?")]),s._v(" "),t("p",[t("strong",[s._v("Spring MVC 原理如下图所示：")])]),s._v(" "),t("blockquote",[t("p",[s._v("SpringMVC 工作原理的图解我没有自己画，直接图省事在网上找了一个非常清晰直观的，原出处不明。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/de6d2b213f112297298f3e223bf08f28.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("流程说明（重要）：")])]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("客户端（浏览器）发送请求， "),t("code",[s._v("DispatcherServlet")]),s._v("拦截请求。")])]),s._v(" "),t("li",[t("code",[s._v("DispatcherServlet")]),s._v(" 根据请求信息调用 "),t("code",[s._v("HandlerMapping")]),s._v(" 。"),t("strong",[t("code",[s._v("HandlerMapping")]),s._v(" 根据 URL 去匹配查找能处理的 "),t("code",[s._v("Handler")]),s._v("（也就是我们平常说的 "),t("code",[s._v("Controller")]),s._v(" 控制器） ，并会将请求涉及到的拦截器和 "),t("code",[s._v("Handler")]),s._v(" 一起封装")]),s._v("。")]),s._v(" "),t("li",[t("strong",[t("code",[s._v("DispatcherServlet")]),s._v(" 调用 "),t("code",[s._v("HandlerAdapter")]),s._v("适配器执行 "),t("code",[s._v("Handler")]),s._v(" 。")])]),s._v(" "),t("li",[t("code",[s._v("Handler")]),s._v(" 完成对用户请求的处理后，会返回一个 "),t("code",[s._v("ModelAndView")]),s._v(" 对象给"),t("code",[s._v("DispatcherServlet")]),s._v("，"),t("code",[s._v("ModelAndView")]),s._v(" 顾名思义，包含了数据模型以及相应的视图的信息。"),t("code",[s._v("Model")]),s._v(" 是返回的数据对象，"),t("code",[s._v("View")]),s._v(" 是个逻辑上的 "),t("code",[s._v("View")]),s._v("。")]),s._v(" "),t("li",[t("code",[s._v("ViewResolver")]),s._v(" 会根据逻辑 "),t("code",[s._v("View")]),s._v(" 查找实际的 "),t("code",[s._v("View")]),s._v("。")]),s._v(" "),t("li",[t("code",[s._v("DispaterServlet")]),s._v(" 把返回的 "),t("code",[s._v("Model")]),s._v(" 传给 "),t("code",[s._v("View")]),s._v("（视图渲染）。")]),s._v(" "),t("li",[s._v("把 "),t("code",[s._v("View")]),s._v(" 返回给请求者（浏览器）")])]),s._v(" "),t("h3",{attrs:{id:"统一异常处理怎么做"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#统一异常处理怎么做"}},[s._v("#")]),s._v(" 统一异常处理怎么做？")]),s._v(" "),t("p",[t("strong",[s._v("推荐使用注解的方式统一异常处理，具体会使用到 "),t("code",[s._v("@ControllerAdvice")]),s._v(" + "),t("code",[s._v("@ExceptionHandler")]),s._v(" 这两个注解 。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@ControllerAdvice")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@ResponseBody")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GlobalExceptionHandler")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@ExceptionHandler")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BaseException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ResponseEntity")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("handleAppException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BaseException")]),s._v(" ex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletRequest")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//......")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@ExceptionHandler")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ResourceNotFoundException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ResponseEntity")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ErrorReponse")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("handleResourceNotFoundException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ResourceNotFoundException")]),s._v(" ex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletRequest")]),s._v(" request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//......")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("strong",[s._v("这种异常处理方式下，会给所有或者指定的 "),t("code",[s._v("Controller")]),s._v(" 织入异常处理的逻辑（AOP）")]),s._v("，"),t("strong",[s._v("当 "),t("code",[s._v("Controller")]),s._v(" 中的方法抛出异常的时候，由被"),t("code",[s._v("@ExceptionHandler")]),s._v(" 注解修饰的方法进行处理。")])]),s._v(" "),t("p",[t("code",[s._v("ExceptionHandlerMethodResolver")]),s._v(" 中 "),t("strong",[t("code",[s._v("getMappedMethod")]),s._v(" 方法决定了异常具体被哪个被 "),t("code",[s._v("@ExceptionHandler")]),s._v(" 注解修饰的方法处理异常。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Method")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMappedMethod")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" exceptionType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" matches "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//找到可以处理的所有异常信息。mappedMethods 中存放了异常和处理异常的方法的对应关系")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" mappedException "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mappedMethods"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("keySet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mappedException"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isAssignableFrom")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("exceptionType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t\t\tmatches"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mappedException"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不为空说明有方法处理异常")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("matches"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isEmpty")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 按照匹配程度从小到大排序")]),s._v("\n\t\t\tmatches"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExceptionDepthComparator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("exceptionType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回处理异常的方法")]),s._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mappedMethods"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("matches"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("p",[s._v("从源代码看出："),t("strong",[t("code",[s._v("getMappedMethod()")]),s._v("会首先找到可以匹配处理异常的所有方法信息，然后对其进行从小到大的排序，最后取最小的那一个匹配的方法(即匹配度最高的那个)。")])]),s._v(" "),t("h2",{attrs:{id:"spring-框架中用到了哪些设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-框架中用到了哪些设计模式"}},[s._v("#")]),s._v(" Spring 框架中用到了哪些设计模式？")]),s._v(" "),t("blockquote",[t("p",[s._v("关于下面这些设计模式的详细介绍，可以看我写的 "),t("a",{attrs:{href:"https://javaguide.cn/system-design/framework/spring/spring-design-patterns-summary.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Spring 中的设计模式详解"),t("OutboundLink")],1),s._v(" 这篇文章。")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("工厂设计模式")]),s._v(" : Spring 使用工厂模式通过 "),t("code",[s._v("BeanFactory")]),s._v("、"),t("code",[s._v("ApplicationContext")]),s._v(" 创建 bean 对象。")]),s._v(" "),t("li",[t("strong",[s._v("代理设计模式")]),s._v(" : Spring AOP 功能的实现。")]),s._v(" "),t("li",[t("strong",[s._v("单例设计模式")]),s._v(" : Spring 中的 Bean 默认都是单例的。")]),s._v(" "),t("li",[t("strong",[s._v("模板方法模式")]),s._v(" : Spring 中 "),t("code",[s._v("jdbcTemplate")]),s._v("、"),t("code",[s._v("hibernateTemplate")]),s._v(" 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。")]),s._v(" "),t("li",[t("strong",[s._v("包装器设计模式")]),s._v(" : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。")]),s._v(" "),t("li",[t("strong",[s._v("观察者模式:")]),s._v(" Spring 事件驱动模型就是观察者模式很经典的一个应用。")]),s._v(" "),t("li",[t("strong",[s._v("适配器模式")]),s._v(" : Spring AOP 的增强或通知(Advice)使用到了适配器模式、spring MVC 中也是用到了适配器模式适配"),t("code",[s._v("Controller")]),s._v("。")]),s._v(" "),t("li",[s._v("……")])]),s._v(" "),t("h2",{attrs:{id:"spring-事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-事务"}},[s._v("#")]),s._v(" Spring 事务")]),s._v(" "),t("p",[s._v("关于 Spring 事务的详细介绍，可以看我写的 "),t("a",{attrs:{href:"https://javaguide.cn/system-design/framework/spring/spring-transaction.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Spring 事务详解"),t("OutboundLink")],1),s._v(" 这篇文章。")]),s._v(" "),t("h3",{attrs:{id:"spring-管理事务的方式有几种"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-管理事务的方式有几种"}},[s._v("#")]),s._v(" Spring 管理事务的方式有几种？")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("编程式事务")]),s._v("：在代码中硬编码(不推荐使用) : 通过 "),t("code",[s._v("TransactionTemplate")]),s._v("或者 "),t("code",[s._v("TransactionManager")]),s._v(" 手动管理事务，实际应用中很少使用，但是对于你理解 Spring 事务管理原理有帮助。")]),s._v(" "),t("li",[t("strong",[s._v("声明式事务")]),s._v("：在 XML 配置文件中配置或者直接基于注解（推荐使用） : 实际是通过 AOP 实现（基于"),t("code",[s._v("@Transactional")]),s._v(" 的全注解方式使用最多）")])]),s._v(" "),t("h3",{attrs:{id:"spring-事务中哪几种事务传播行为"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-事务中哪几种事务传播行为"}},[s._v("#")]),s._v(" Spring 事务中哪几种事务传播行为?")]),s._v(" "),t("p",[t("strong",[s._v("事务传播行为是为了解决业务层方法之间互相调用的事务问题")]),s._v("。")]),s._v(" "),t("p",[s._v("当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。")]),s._v(" "),t("p",[s._v("正确的事务传播行为可能的值如下:")]),s._v(" "),t("p",[t("strong",[s._v("1."),t("code",[s._v("TransactionDefinition.PROPAGATION_REQUIRED")])])]),s._v(" "),t("p",[s._v("使用的最多的一个事务传播行为，我们平时经常使用的"),t("code",[s._v("@Transactional")]),s._v("注解默认使用就是这个事务传播行为。如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。")]),s._v(" "),t("p",[t("strong",[t("code",[s._v("2.TransactionDefinition.PROPAGATION_REQUIRES_NEW")])])]),s._v(" "),t("p",[s._v("创建一个新的事务，如果当前存在事务，则把当前事务挂起。也就是说不管外部方法是否开启事务，"),t("code",[s._v("Propagation.REQUIRES_NEW")]),s._v("修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。")]),s._v(" "),t("p",[t("strong",[s._v("3."),t("code",[s._v("TransactionDefinition.PROPAGATION_NESTED")])])]),s._v(" "),t("p",[s._v("如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于"),t("code",[s._v("TransactionDefinition.PROPAGATION_REQUIRED")]),s._v("。")]),s._v(" "),t("p",[t("strong",[s._v("4."),t("code",[s._v("TransactionDefinition.PROPAGATION_MANDATORY")])])]),s._v(" "),t("p",[s._v("如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）")]),s._v(" "),t("p",[s._v("这个使用的很少。")]),s._v(" "),t("p",[s._v("若是错误的配置以下 3 种事务传播行为，事务将不会发生回滚：")]),s._v(" "),t("ul",[t("li",[t("strong",[t("code",[s._v("TransactionDefinition.PROPAGATION_SUPPORTS")])]),s._v(": 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。")]),s._v(" "),t("li",[t("strong",[t("code",[s._v("TransactionDefinition.PROPAGATION_NOT_SUPPORTED")])]),s._v(": 以非事务方式运行，如果当前存在事务，则把当前事务挂起。")]),s._v(" "),t("li",[t("strong",[t("code",[s._v("TransactionDefinition.PROPAGATION_NEVER")])]),s._v(": 以非事务方式运行，如果当前存在事务，则抛出异常。")])]),s._v(" "),t("h3",{attrs:{id:"spring-事务中的隔离级别有哪几种"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-事务中的隔离级别有哪几种"}},[s._v("#")]),s._v(" Spring 事务中的隔离级别有哪几种?")]),s._v(" "),t("p",[s._v("和事务传播行为这块一样，为了方便使用，Spring 也相应地定义了一个枚举类："),t("code",[s._v("Isolation")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Isolation")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("DEFAULT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionDefinition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ISOLATION_DEFAULT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("READ_UNCOMMITTED")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionDefinition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ISOLATION_READ_UNCOMMITTED")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("READ_COMMITTED")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionDefinition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ISOLATION_READ_COMMITTED")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("REPEATABLE_READ")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionDefinition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ISOLATION_REPEATABLE_READ")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("SERIALIZABLE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TransactionDefinition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ISOLATION_SERIALIZABLE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Isolation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("p",[s._v("下面我依次对每一种事务隔离级别进行介绍：")]),s._v(" "),t("ul",[t("li",[t("strong",[t("code",[s._v("TransactionDefinition.ISOLATION_DEFAULT")])]),s._v(" :使用后端数据库默认的隔离级别，MySQL 默认采用的 "),t("code",[s._v("REPEATABLE_READ")]),s._v(" 隔离级别 Oracle 默认采用的 "),t("code",[s._v("READ_COMMITTED")]),s._v(" 隔离级别.")]),s._v(" "),t("li",[t("strong",[t("code",[s._v("TransactionDefinition.ISOLATION_READ_UNCOMMITTED")])]),s._v(" :最低的隔离级别，使用这个隔离级别很少，因为它允许读取尚未提交的数据变更，"),t("strong",[s._v("可能会导致脏读、幻读或不可重复读")])]),s._v(" "),t("li",[t("strong",[t("code",[s._v("TransactionDefinition.ISOLATION_READ_COMMITTED")])]),s._v(" : 允许读取并发事务已经提交的数据，"),t("strong",[s._v("可以阻止脏读，但是幻读或不可重复读仍有可能发生")])]),s._v(" "),t("li",[t("strong",[t("code",[s._v("TransactionDefinition.ISOLATION_REPEATABLE_READ")])]),s._v(" : 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，"),t("strong",[s._v("可以阻止脏读和不可重复读，但幻读仍有可能发生。")])]),s._v(" "),t("li",[t("strong",[t("code",[s._v("TransactionDefinition.ISOLATION_SERIALIZABLE")])]),s._v(" : 最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，"),t("strong",[s._v("该级别可以防止脏读、不可重复读以及幻读")]),s._v("。但是这将严重影响程序的性能。通常情况下也不会用到该级别。")])]),s._v(" "),t("h3",{attrs:{id:"transactional-rollbackfor-exception-class-注解了解吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#transactional-rollbackfor-exception-class-注解了解吗"}},[s._v("#")]),s._v(" @Transactional(rollbackFor = Exception.class)注解了解吗？")]),s._v(" "),t("p",[t("code",[s._v("Exception")]),s._v(" 分为运行时异常 "),t("code",[s._v("RuntimeException")]),s._v(" 和非运行时异常。事务管理对于企业应用来说是至关重要的，即使出现异常情况，它也可以保证数据的一致性。")]),s._v(" "),t("p",[s._v("当 "),t("code",[s._v("@Transactional")]),s._v(" 注解作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。如果类或者方法加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚。")]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("@Transactional")]),s._v(" 注解中如果不配置"),t("code",[s._v("rollbackFor")]),s._v("属性,那么事务只会在遇到"),t("code",[s._v("RuntimeException")]),s._v("的时候才会回滚，加上 "),t("code",[s._v("rollbackFor=Exception.class")]),s._v(",可以让事务在遇到非运行时异常时也回滚。")]),s._v(" "),t("h2",{attrs:{id:"spring-data-jpa"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-jpa"}},[s._v("#")]),s._v(" Spring Data JPA")]),s._v(" "),t("p",[s._v("JPA 重要的是实战，这里仅对小部分知识点进行总结。")]),s._v(" "),t("h3",{attrs:{id:"如何使用-jpa-在数据库中非持久化一个字段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何使用-jpa-在数据库中非持久化一个字段"}},[s._v("#")]),s._v(" 如何使用 JPA 在数据库中非持久化一个字段？")]),s._v(" "),t("p",[s._v("假如我们有下面一个类：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Entity")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"USER"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Id")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@GeneratedValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("strategy "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GenerationType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AUTO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Column")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ID"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Column")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"USER_NAME"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" userName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Column")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"PASSWORD"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" password"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" secrect"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("p",[s._v("如果我们想让"),t("code",[s._v("secrect")]),s._v(" 这个字段不被持久化，也就是不被数据库存储怎么办？我们可以采用下面几种方法：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" transient1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// not persistent because of static")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" transient2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Satish"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// not persistent because of final")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transient")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" transient3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// not persistent because of transient")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Transient")]),s._v("\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//@Transient注解")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" transient4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// not persistent because of @Transient")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("一般使用后面两种方式比较多，我个人使用注解的方式比较多。")]),s._v(" "),t("h3",{attrs:{id:"jpa-的审计功能是做什么的-有什么用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jpa-的审计功能是做什么的-有什么用"}},[s._v("#")]),s._v(" JPA 的审计功能是做什么的？有什么用？")]),s._v(" "),t("p",[t("strong",[s._v("审计功能主要是帮助我们记录数据库操作的具体行为比如某条记录是谁创建的、什么时间创建的、最后修改人是谁、最后修改时间是什么时候。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Data")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@AllArgsConstructor")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@NoArgsConstructor")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@MappedSuperclass")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@EntityListeners")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AuditingEntityListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AbstractAuditBase")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@CreatedDate")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Column")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("updatable "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@JsonIgnore")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Instant")]),s._v(" createdAt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@LastModifiedDate")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@JsonIgnore")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Instant")]),s._v(" updatedAt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@CreatedBy")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Column")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("updatable "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@JsonIgnore")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" createdBy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@LastModifiedBy")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@JsonIgnore")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" updatedBy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("ul",[t("li",[t("p",[t("strong",[t("code",[s._v("@CreatedDate")]),s._v(": 表示该字段为创建时间字段，在这个实体被 insert 的时候，会设置值")])])]),s._v(" "),t("li",[t("p",[t("strong",[t("code",[s._v("@CreatedBy")]),s._v(" :表示该字段为创建人，在这个实体被 insert 的时候，会设置值")])]),s._v(" "),t("p",[t("code",[s._v("@LastModifiedDate")]),s._v("、"),t("code",[s._v("@LastModifiedBy")]),s._v("同理。")])])]),s._v(" "),t("h3",{attrs:{id:"实体之间的关联关系注解有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实体之间的关联关系注解有哪些"}},[s._v("#")]),s._v(" 实体之间的关联关系注解有哪些？")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("@OneToOne")]),s._v(" : 一对一。")]),s._v(" "),t("li",[t("code",[s._v("@ManyToMany")]),s._v("：多对多。")]),s._v(" "),t("li",[t("code",[s._v("@OneToMany")]),s._v(" : 一对多。")]),s._v(" "),t("li",[t("code",[s._v("@ManyToOne")]),s._v("：多对一。")])]),s._v(" "),t("p",[s._v("利用 "),t("code",[s._v("@ManyToOne")]),s._v(" 和 "),t("code",[s._v("@OneToMany")]),s._v(" 也可以表达多对多的关联关系。")]),s._v(" "),t("h2",{attrs:{id:"spring-security"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-security"}},[s._v("#")]),s._v(" Spring Security")]),s._v(" "),t("p",[s._v("Spring Security 重要的是实战，这里仅对小部分知识点进行总结。")]),s._v(" "),t("h3",{attrs:{id:"有哪些控制请求访问权限的方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有哪些控制请求访问权限的方法"}},[s._v("#")]),s._v(" 有哪些控制请求访问权限的方法？")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/image-20220728201854641.png",alt:""}})]),s._v(" "),t("ul",[t("li",[t("code",[s._v("permitAll()")]),s._v("：无条件允许任何形式访问，不管你登录还是没有登录。")]),s._v(" "),t("li",[t("code",[s._v("anonymous()")]),s._v("：允许匿名访问，也就是没有登录才可以访问。")]),s._v(" "),t("li",[t("code",[s._v("denyAll()")]),s._v("：无条件决绝任何形式的访问。")]),s._v(" "),t("li",[t("code",[s._v("authenticated()")]),s._v("：只允许已认证的用户访问。")]),s._v(" "),t("li",[t("code",[s._v("fullyAuthenticated()")]),s._v("：只允许已经登录或者通过 remember-me 登录的用户访问。")]),s._v(" "),t("li",[t("code",[s._v("hasRole(String)")]),s._v(" : 只允许指定的角色访问。")]),s._v(" "),t("li",[t("code",[s._v("hasAnyRole(String)")]),s._v(" : 指定一个或者多个角色，满足其一的用户即可访问。")]),s._v(" "),t("li",[t("code",[s._v("hasAuthority(String)")]),s._v("：只允许具有指定权限的用户访问")]),s._v(" "),t("li",[t("code",[s._v("hasAnyAuthority(String)")]),s._v("：指定一个或者多个权限，满足其一的用户即可访问。")]),s._v(" "),t("li",[t("code",[s._v("hasIpAddress(String)")]),s._v(" : 只允许指定 ip 的用户访问。")])]),s._v(" "),t("h3",{attrs:{id:"hasrole-和-hasauthority-有区别吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hasrole-和-hasauthority-有区别吗"}},[s._v("#")]),s._v(" hasRole 和 hasAuthority 有区别吗？")]),s._v(" "),t("p",[s._v("可以看看松哥的这篇文章："),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/GTNOa2k9_n_H0w24upClRw",target:"_blank",rel:"noopener noreferrer"}},[s._v("Spring Security 中的 hasRole 和 hasAuthority 有区别吗？"),t("OutboundLink")],1),s._v("，介绍的比较详细。")]),s._v(" "),t("h3",{attrs:{id:"如何对密码进行加密"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何对密码进行加密"}},[s._v("#")]),s._v(" 如何对密码进行加密？")]),s._v(" "),t("p",[s._v("如果我们需要保存密码这类敏感数据到数据库的话，需要先加密再保存。")]),s._v(" "),t("p",[s._v("Spring Security 提供了多种加密算法的实现，开箱即用，非常方便。这些加密算法实现类的父类是 "),t("code",[s._v("PasswordEncoder")]),s._v(" ，如果你想要自己实现一个加密算法的话，也需要继承 "),t("code",[s._v("PasswordEncoder")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("PasswordEncoder")]),s._v(" 接口一共也就 3 个必须实现的方法。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PasswordEncoder")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 加密也就是对原始密码进行编码")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("encode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CharSequence")]),s._v(" var1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 比对原始密码和数据库中保存的密码")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("matches")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CharSequence")]),s._v(" var1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" var2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 判断加密密码是否需要再次进行加密，默认返回 false")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("upgradeEncoding")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" encodedPassword"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/image-20220728183540954.png",alt:""}})]),s._v(" "),t("p",[s._v("官方推荐使用基于 bcrypt 强哈希函数的加密算法实现类。")]),s._v(" "),t("h3",{attrs:{id:"如何优雅更换系统使用的加密算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何优雅更换系统使用的加密算法"}},[s._v("#")]),s._v(" 如何优雅更换系统使用的加密算法？")]),s._v(" "),t("p",[s._v("如果我们在开发过程中，突然发现现有的加密算法无法满足我们的需求，需要更换成另外一个加密算法，这个时候应该怎么办呢？")]),s._v(" "),t("p",[s._v("推荐的做法是通过 "),t("code",[s._v("DelegatingPasswordEncoder")]),s._v(" 兼容多种不同的密码加密方案，以适应不同的业务需求。")]),s._v(" "),t("p",[s._v("从名字也能看出来，"),t("code",[s._v("DelegatingPasswordEncoder")]),s._v(" 其实就是一个代理类，并非是一种全新的加密算法，它做的事情就是代理上面提到的加密算法实现类。在 Spring Security 5.0 之后，默认就是基于 "),t("code",[s._v("DelegatingPasswordEncoder")]),s._v(" 进行密码加密的。")])])}),[],!1,null,null,null);t.default=e.exports}}]);