{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{391:function(s,o,e){\"use strict\";e.r(o);var v=e(4),t=Object(v.a)({},(function(){var s=this,o=s._self._c;return o(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[o(\"h1\",{attrs:{id:\"再探token\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#再探token\"}},[s._v(\"#\")]),s._v(\" 再探token\")]),s._v(\" \"),o(\"blockquote\",[o(\"p\",[s._v(\"怎么能把如此重要的cookie、session。token放到那里面呢？\")]),s._v(\" \"),o(\"p\",[s._v(\"正好，最近项目中用了token，那就再来复习加深了解一边。\")]),s._v(\" \"),o(\"p\",[s._v(\"btw,开坑田螺哥的公众号分享的知识点。\")]),s._v(\" \"),o(\"p\",[s._v(\"本笔记参考：\")]),s._v(\" \"),o(\"p\",[s._v(\"juejin.cn/post/6932702419344162823\")]),s._v(\" \"),o(\"p\",[s._v(\"田螺哥的公众号文章（转载）：你管这破玩意儿叫 Token?\")])]),s._v(\" \"),o(\"h2\",{attrs:{id:\"cookie\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cookie\"}},[s._v(\"#\")]),s._v(\" cookie\")]),s._v(\" \"),o(\"p\",[s._v(\"1991 年 HTTP 0.9 诞生了，\"),o(\"strong\",[s._v(\"当时只是为了满足大家浏览 web 文档的要求\")]),s._v(\" ，所以只有 GET 请求，浏览完了就走了，两个连接之间是没有任何联系的，\"),o(\"strong\",[s._v(\"这也是 HTTP 为无状态的原因\")]),s._v(\"，因为它诞生之初就没有这个需求。\")]),s._v(\" \"),o(\"p\",[s._v(\"但随着\"),o(\"strong\",[s._v(\"交互式 Web\")]),s._v(\" 的兴起（所谓交互式就是你不光可以浏览，还可以登录，发评论，购物等用户操作的行为），单纯地浏览 web 已经无法满足人们的要求。单纯地浏览 web 已经无法满足人们的要求，比如随着网上购物的兴起，需要记录用户的购物车记录，就\"),o(\"strong\",[s._v(\"需要有一个机制记录每个连接的关系\")]),s._v(\"，这样我们就知道加入购物车的商品到底属于谁了，于是 \"),o(\"strong\",[s._v(\"Cookie 就诞生了\")]),s._v(\"。\")]),s._v(\" \"),o(\"blockquote\",[o(\"p\",[s._v(\"Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行 Session 跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息 。\")])]),s._v(\" \"),o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/token01.jpg\"}}),s._v(\" \"),o(\"p\",[s._v(\"以加入购物车为例，每次浏览器请求后 server 都会将本次商品 id 存储在 Cookie 中返回给客户端，客户端会将 Cookie 保存在本地，下一次再将上次保存在本地的 Cookie 传给 server 就行了，这样每个 Cookie 都保存着用户的商品 id，购买记录也就不会丢失了\")]),s._v(\" \"),o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/token02.jpg\"}}),s._v(\" \"),o(\"p\",[s._v(\"仔细观察上图相信你不难发现随着购物车内的商品越来越多，\"),o(\"strong\",[s._v(\"每次请求的 cookie 也越来越大，这对每个请求来说是一个很大的负担\")]),s._v(\"，我只是想将一个商品加入购买车，为何要将历史的商品记录也一起返回给 server ？\"),o(\"strong\",[s._v(\"购物车信息其实已经记录在 server 了\")]),s._v(\"，浏览器这样的操作岂不是多此一举？怎么改进呢\")]),s._v(\" \"),o(\"h2\",{attrs:{id:\"session\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#session\"}},[s._v(\"#\")]),s._v(\" session\")]),s._v(\" \"),o(\"p\",[s._v(\"由于用户的购物车信息都会\"),o(\"strong\",[s._v(\"保存在 Server 中\")]),s._v(\"，所以在 \"),o(\"strong\",[s._v(\"Cookie 里只要保存能识别用户身份的信息\")]),s._v(\"，**知道是谁发起了加入购物车操作即可，**这样每次请求后只要在 \"),o(\"strong\",[s._v(\"Cookie 里带上用户的身份信息\")]),s._v(\"，\"),o(\"strong\",[s._v(\"请求体里也只要带上本次加入购物车的商品 id\")]),s._v(\"，\"),o(\"strong\",[s._v(\"大大减少了 cookie 的体积大小，\"),o(\"strong\",[s._v(\"我们把这种\")]),s._v(\"能识别哪个请求由哪个用户发起的机制称为 Session（会话机制）\")]),s._v(\"，\"),o(\"strong\",[s._v(\"生成的能识别用户身份信息的字符串称为 sessionId\")]),s._v(\"，它的工作机制如下\")]),s._v(\" \"),o(\"p\",[s._v(\"它的工作机制如下\")]),s._v(\" \"),o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/token03.jpg\"}}),s._v(\" \"),o(\"ol\",[o(\"li\",[s._v(\"首先用户登录，server 会为用户生成一个 session，\"),o(\"strong\",[s._v(\"为其分配唯一的 sessionId\")]),s._v(\"，这个 sessionId 是\"),o(\"strong\",[s._v(\"与某个用户绑定的\")]),s._v(\"，也就是说根据此 sessionid（假设为 abc） 可以查询到它到底是哪个用户，然后将此 sessionid 通过 cookie 传给浏览器\")]),s._v(\" \"),o(\"li\",[s._v(\"之后浏览器的每次添加购物车请求中\"),o(\"strong\",[s._v(\"只要在 cookie 里带上 sessionId=abc 这一个键值对即可\")]),s._v(\"，server 根据 sessionId 找到它对应的用户后，把传过来的商品 id 保存到 server 中对应用户的购物车即可\")])]),s._v(\" \"),o(\"p\",[s._v(\"可以看到通过这种方式再也不需要在 cookie 里传所有的购物车的商品 id 了，大大减轻了请求的负担！\")]),s._v(\" \"),o(\"p\",[s._v(\"另外通过上文不难观察出 \"),o(\"strong\",[s._v(\"cookie 是存储在 client 的，而 session 保存在 server\")]),s._v(\"，\"),o(\"strong\",[s._v(\"sessionId 需要借助 cookie 的传递才有意义。\")])]),s._v(\" \"),o(\"h3\",{attrs:{id:\"session的痛点\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#session的痛点\"}},[s._v(\"#\")]),s._v(\" session的痛点\")]),s._v(\" \"),o(\"p\",[s._v(\"cookie能被禁用，session亦有其通点。\")]),s._v(\" \"),o(\"p\",[o(\"strong\",[s._v(\"集群模式下session共享的问题\")])]),s._v(\" \"),o(\"p\",[s._v(\"看起来通过  cookie + session 的方式是解决了问题， 但是我们忽略了一个问题，\"),o(\"strong\",[s._v(\"上述情况能正常工作是因为我们假设 server 是单机工作\")]),s._v(\"的，但实际在生产上，为了保障高可用，一般服务器至少需要两台机器，通过负载均衡的方式来决定到底请求该打到哪台机器上。\")]),s._v(\" \"),o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/token04.jpg\"}}),s._v(\" \"),o(\"p\",[o(\"strong\",[s._v(\"如图示：客户端请求后，由负载均衡器（如 Nginx）来决定到底打到哪台机器\")])]),s._v(\" \"),o(\"p\",[s._v(\"假设登录请求打到了 A 机器，A 机器生成了 session 并在 cookie 里添加 sessionId 返回给了浏览器，那么问题来了：下次添加购物车时如果请求打到了 B 或者 C，由于 session 是在 A 机器生成的，此时的 B,C 是找不到 session 的，那么就会发生无法添加购物车的错误，就得重新登录了，此时请问该怎么办。主要有以下三种方式\")]),s._v(\" \"),o(\"h3\",{attrs:{id:\"session复制\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#session复制\"}},[s._v(\"#\")]),s._v(\" session复制\")]),s._v(\" \"),o(\"p\",[s._v(\"A 生成 session 后复制到 B, C，这样每台机器都有一份 session，无论添加购物车的请求打到哪台机器，由于 session 都能找到，故不会有问题\")]),s._v(\" \"),o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/token05.jpg\"}}),s._v(\" \"),o(\"p\",[s._v(\"这种方式虽然可行，但缺点也很明显：\")]),s._v(\" \"),o(\"ol\",[o(\"li\",[s._v(\"同一样的一份 session 保存了多份，\"),o(\"strong\",[s._v(\"数据冗余\")])]),s._v(\" \"),o(\"li\",[s._v(\"如果节点少还好，但如果节点多的话，特别是像阿里，微信这种由于 DAU 上亿，可能需要部署成千上万台机器，这样节点增多复制造成的性能消耗也会很大。\")])]),s._v(\" \"),o(\"h3\",{attrs:{id:\"session粘连\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#session粘连\"}},[s._v(\"#\")]),s._v(\" session粘连\")]),s._v(\" \"),o(\"p\",[s._v(\"这种方式是让每个客户端请求只打到固定的一台机器上，比如\"),o(\"strong\",[s._v(\"浏览器登录请求打到 A 机器后\")]),s._v(\"，\"),o(\"strong\",[s._v(\"后续所有的添加购物车请求也都打到 A 机器上\")]),s._v(\"，\"),o(\"strong\",[s._v(\"Nginx 的 sticky 模块可以支持这种方式\")]),s._v(\"，支持按 ip 或 cookie 粘连等等，如按 ip 粘连方式如下\")]),s._v(\" \"),o(\"div\",{staticClass:\"language- line-numbers-mode\"},[o(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[o(\"code\",[s._v(\"upstream tomcats {\\n　　ip_hash;\\n　　server 10.1.1.107:88;\\n　　server 10.1.1.132:80;\\n}\\n\")])]),s._v(\" \"),o(\"div\",{staticClass:\"line-numbers-wrapper\"},[o(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),o(\"br\"),o(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),o(\"br\"),o(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),o(\"br\"),o(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),o(\"br\"),o(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),o(\"br\")])]),o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/token06.jpg\"}}),s._v(\" \"),o(\"p\",[s._v(\"这样的话每个 client 请求到达 Nginx 后，只要它的 ip 不变，根据 ip hash 算出来的值会打到固定的机器上，也就不存在 session 找不到的问题了，当然不难看出这种方式缺点也是很明显，\"),o(\"strong\",[s._v(\"对应的机器挂了怎么办？\")])]),s._v(\" \"),o(\"h3\",{attrs:{id:\"session共享\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#session共享\"}},[s._v(\"#\")]),s._v(\" session共享\")]),s._v(\" \"),o(\"p\",[s._v(\"这种方式也是目前各大公司普遍采用的方案，将 session 保存在 redis，memcached 等中间件中，请求到来时，\"),o(\"strong\",[s._v(\"各个机器去这些中间件取一下 session 即可。\")])]),s._v(\" \"),o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/token07.jpg\"}}),s._v(\" \"),o(\"p\",[s._v(\"缺点其实也不难发现，就是每个请求都要去 redis 取一下 session，多了一次内部连接，消耗了一点性能，另外为了保证 redis 的高可用，必须做集群，当然了对于大公司来说, redis 集群基本都会部署，\"),o(\"strong\",[s._v(\"所以这方案可以说是大公司的首选了。\")])]),s._v(\" \"),o(\"blockquote\",[o(\"p\",[s._v(\"redis集群数据共享的问题，暂时还没学到，留意着。\")])]),s._v(\" \"),o(\"h2\",{attrs:{id:\"token\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#token\"}},[s._v(\"#\")]),s._v(\" token\")]),s._v(\" \"),o(\"blockquote\",[o(\"p\",[s._v(\"token:no session!\")])]),s._v(\" \"),o(\"p\",[s._v(\"通过上文分析我们知道通过在服务端共享 session 的方式可以完成用户的身份定位，但是不难发现也有一个小小的瑕疵：搞个校验机制我还得搭个 redis 集群？大厂确实 redis 用得比较普遍，但对于小厂来说可能它的业务量还未达到用 redis 的程度，所以有没有\"),o(\"strong\",[s._v(\"其他不用 server 存储 session 的用户身份校验机制呢\")]),s._v(\"，这就是我们今天要介绍的主角：token。\")]),s._v(\" \"),o(\"p\",[s._v(\"首先请求方输入自己的用户名，密码，然后 server 据此生成 token，客户端拿到 token 后会保存到本地，之后向 server 请求时在\"),o(\"strong\",[s._v(\"请求头带上此 token 即可。\")])]),s._v(\" \"),o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/token08.jpg\"}}),s._v(\" \"),o(\"p\",[s._v(\"几个问题:\")]),s._v(\" \"),o(\"ol\",[o(\"li\",[s._v(\"如何校验？\")])]),s._v(\" \"),o(\"p\",[s._v(\"我们可以\"),o(\"strong\",[s._v(\"借鉴 HTTPS 的签名机制来校验\")]),s._v(\"。先来看 jwt token 的组成部分\")]),s._v(\" \"),o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/token09.jpg\"}}),s._v(\" \"),o(\"p\",[s._v(\"可以看到 token 主要由三部分组成\")]),s._v(\" \"),o(\"ol\",[o(\"li\",[s._v(\"header：指定了签名算法\")]),s._v(\" \"),o(\"li\",[s._v(\"payload：可以指定用户 id，过期时间等非敏感数据\")]),s._v(\" \"),o(\"li\",[s._v(\"Signature: 签名，\"),o(\"strong\",[s._v(\"server 根据 header 知道它该用哪种签名算法\")]),s._v(\"，再用密钥根据此签名算法对 head + payload 生成签名，这样一个 token 就生成了。\")])]),s._v(\" \"),o(\"p\",[s._v(\"当 server 收到浏览器传过来的 token 时，它会\"),o(\"strong\",[s._v(\"首先取出 token 中的 header + payload\")]),s._v(\"，\"),o(\"strong\",[s._v(\"根据密钥生成签名，然后再与 token 中的签名比对\")]),s._v(\"，如果成功则说明签名是合法的，即 token 是合法的。\")]),s._v(\" \"),o(\"p\",[s._v(\"**只要 server 保证密钥不泄露，那么生成的 token 就是安全的，**因为如果伪造 token 的话在签名验证环节是无法通过的，就此即可判定 token 非法。\")]),s._v(\" \"),o(\"p\",[s._v(\"不过需要注意的是，**token 一旦由 server 生成，它就是有效的，直到过期，无法让 token 失效，**除非在 server 为 token 设立一个黑名单，\"),o(\"strong\",[s._v(\"在校验 token 前先过一遍此黑名单\")]),s._v(\"，如果在黑名单里则此  token 失效，但一旦这样做的话，那就意味着黑名单就必须保存在 server，这又回到了 session 的模式，那直接用 session 不香吗。所以一般的做法是当客户端登出要让 token 失效时，直接在本地移除 token 即可，下次登录重新生成 token 就好。\")]),s._v(\" \"),o(\"p\",[s._v(\"另外需要注意的是 t\"),o(\"strong\",[s._v(\"oken 一般是放在 header 的 Authorization 自定义头里\")]),s._v(\"，不是放在 Cookie 里的，这主要是为了解决跨域不能共享 Cookie 的问题\")]),s._v(\" \"),o(\"p\",[s._v(\"Cookie 跨站是不能共享的，这样的话如果你要实现多应用**（多系统）的单点登录（SSO**）**，使用 Cookie 来做需要的话就很困难了（要用比较复杂的 trick 来实现，有兴趣的话可以看文末参考链接）\")]),s._v(\" \"),o(\"blockquote\",[o(\"p\",[o(\"strong\",[s._v(\"画外音: 所谓单点登录，是指在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。\")])])]),s._v(\" \"),o(\"p\",[s._v(\"但如果用 token 来实现 SSO 会非常简单，如下\")]),s._v(\" \"),o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/token10.jpg\"}}),s._v(\" \"),o(\"p\",[o(\"strong\",[s._v(\"只要在 header 中的 authorize 字段（或其他自定义）加上 token 即可完成所有跨域站点的认证。\")])]),s._v(\" \"),o(\"h3\",{attrs:{id:\"token的缺点\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#token的缺点\"}},[s._v(\"#\")]),s._v(\" token的缺点\")]),s._v(\" \"),o(\"ol\",[o(\"li\",[s._v(\"token太长了\")])]),s._v(\" \"),o(\"p\",[s._v(\"token 是 header, payload 编码后的样式，所以一般要比 sessionId 长很多，\"),o(\"strong\",[s._v(\"很有可能超出 cookie 的大小限制\")]),s._v(\"（cookie 一般有大小限制的，如 4kb），如果你在 token 中存储的信息越长，那么 token 本身也会越长，这样的话由于你\"),o(\"strong\",[s._v(\"每次请求都会带上 token，对请求来是个不小的负担\")])]),s._v(\" \"),o(\"p\",[s._v(\"token的安全问题：\")]),s._v(\" \"),o(\"p\",[s._v(\"网上很多文章说 token 更安全，其实不然，细心的你可能发现了，我们说 \"),o(\"strong\",[s._v(\"token 是存在浏览器的\")]),s._v(\"，再细问，**存在浏览器的哪里？**既然它太长放在 cookie 里可能导致 cookie 超限，那就只好放在 \"),o(\"strong\",[s._v(\"local storage\")]),s._v(\" 里，这样会造成安全隐患，因为 **local storage 这类的本地存储是可以被 JS 直接读取的，**另外由上文也提到，token 一旦生成无法让其失效，必须等到其过期才行，这样的话如果服务端检测到了一个安全威胁，也无法使相关的 token 失效。\")]),s._v(\" \"),o(\"p\",[o(\"strong\",[s._v(\"所以 token 更适合一次性的命令认证，设置一个比较短的有效期\")])]),s._v(\" \"),o(\"h2\",{attrs:{id:\"token与session的对比\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#token与session的对比\"}},[s._v(\"#\")]),s._v(\" token与session的对比\")]),s._v(\" \"),o(\"ul\",[o(\"li\",[s._v(\"基于session和基于JWT的方式的主要区别就是用户的状态保存的位置，\"),o(\"strong\",[s._v(\"session是保存在服务端\")]),s._v(\"的，而\"),o(\"strong\",[s._v(\"JWT是保存在客户端\")]),s._v(\"的\")]),s._v(\" \"),o(\"li\",[s._v(\"JWT的payload使用的是base64编码的，因此在\"),o(\"strong\",[s._v(\"JWT中不能存储敏感数据\")]),s._v(\"。而session的信息是存在服务端的，相对来说更安全\")]),s._v(\" \"),o(\"li\",[s._v(\"JWT的payload使用的是base64编码的，因此在\"),o(\"strong\",[s._v(\"JWT中不能存储敏感数据\")]),s._v(\"。而session的信息是存在服务端的，相对来说更安全\")])]),s._v(\" \"),o(\"p\",[o(\"strong\",[s._v(\"来了，实战中遇到的问题来了\")])]),s._v(\" \"),o(\"p\",[o(\"strong\",[s._v(\"无状态是JWT的特点\")]),s._v(\"但也导致了这个问题，JWT是一次性的。想修改里面的内容，就必须签发一个新的JWT\")]),s._v(\" \"),o(\"ul\",[o(\"li\",[o(\"strong\",[s._v(\"无法废弃 一旦签发一个JWT，在到期之前就会始终有效，无法中途废弃。\"),o(\"strong\",[s._v(\"若想废弃，一种常用的处理手段是\")]),s._v(\"结合redis\")])]),s._v(\" \"),o(\"li\",[o(\"strong\",[s._v(\"续签\")]),s._v(\" 如果使用JWT做会话管理，**传统的cookie续签方案一般都是框架自带的，session有效期30分钟，30分钟内如果有访问，有效期被刷新至30分钟。    （cookie session会自动刷新）**一样的道理，要改变JWT的有效时间，就要签发新的JWT。最简单的一种方式是每次请求刷新JWT，\"),o(\"strong\",[s._v(\"即每个HTTP请求都返回一个新的JWT。这个方法不仅暴力不优雅\")]),s._v(\"，而且每次请求都要做JWT的加密解密，会带来性能问题。\"),o(\"strong\",[s._v(\"另一种方法是在redis中单独为每个JWT设置过期时间，每次访问时刷新JWT的过期时间（实战中就采用的是这种）\")])])]),s._v(\" \"),o(\"p\",[s._v(\"实现：讲讲大致流程即可\")]),s._v(\" \"),o(\"ul\",[o(\"li\",[s._v(\"登录发token存redis\")]),s._v(\" \"),o(\"li\",[s._v(\"登出  删key\")]),s._v(\" \"),o(\"li\",[s._v(\"更新密码   更新token\")]),s._v(\" \"),o(\"li\",[s._v(\"拦截器  验token  刷新token\")])])])}),[],!1,null,null,null);o.default=t.exports}}]);","extractedComments":[]}