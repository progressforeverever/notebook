{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{506:function(v,_,t){\"use strict\";t.r(_);var n=t(4),o=Object(n.a)({},(function(){var v=this,_=v._self._c;return _(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":v.$parent.slotKey}},[_(\"h1\",{attrs:{id:\"_4-5-如何避免预读失效和缓存污染的问题\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-5-如何避免预读失效和缓存污染的问题\"}},[v._v(\"#\")]),v._v(\" 4.5 如何避免预读失效和缓存污染的问题？\")]),v._v(\" \"),_(\"p\",[v._v(\"大家好，我是小林。\")]),v._v(\" \"),_(\"p\",[v._v(\"上周群里看到有位小伙伴面试时，被问到这两个问题：\")]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%BC%93%E5%AD%98/%E6%8F%90%E9%97%AE.png\",alt:\"\"}})]),v._v(\" \"),_(\"p\",[v._v(\"咋一看，以为是在问操作系统的问题，其实这两个题目都是在问\"),_(\"strong\",[v._v(\"如何改进 LRU 算法\")]),v._v(\"。\")]),v._v(\" \"),_(\"p\",[v._v(\"因为传统的 LRU 算法存在这两个问题：\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[_(\"strong\",[v._v(\"「预读失效」导致缓存命中率下降（对应第一个题目）\")])]),v._v(\" \"),_(\"li\",[_(\"strong\",[v._v(\"「缓存污染」导致缓存命中率下降（对应第二个题目）\")])])]),v._v(\" \"),_(\"p\",[v._v(\"Redis 的缓存淘汰算法则是通过\"),_(\"strong\",[v._v(\"实现 LFU 算法\")]),v._v(\"来避免「缓存污染」而导致缓存命中率下降的问题（Redis 没有预读机制）。\")]),v._v(\" \"),_(\"p\",[v._v(\"MySQL 和 Linux 操作系统是通过\"),_(\"strong\",[v._v(\"改进 LRU 算法\")]),v._v(\"来避免「预读失效和缓存污染」而导致缓存命中率下降的问题。\")]),v._v(\" \"),_(\"p\",[v._v(\"这次，就重点讲讲 \"),_(\"strong\",[v._v(\"MySQL 和 Linux 操作系统是如何改进 LRU 算法的？\")])]),v._v(\" \"),_(\"p\",[v._v(\"好了，开始发车，坐稳了！\")]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98%E6%B1%A1%E6%9F%93%E6%8F%90%E7%BA%B2.png\",alt:\"\"}})]),v._v(\" \"),_(\"h2\",{attrs:{id:\"linux-和-mysql-的缓存\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#linux-和-mysql-的缓存\"}},[v._v(\"#\")]),v._v(\" Linux 和 MySQL 的缓存\")]),v._v(\" \"),_(\"h3\",{attrs:{id:\"linux-操作系统的缓存\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#linux-操作系统的缓存\"}},[v._v(\"#\")]),v._v(\" Linux 操作系统的缓存\")]),v._v(\" \"),_(\"p\",[v._v(\"在应用程序读取文件的数据的时候，\"),_(\"strong\",[v._v(\"Linux 操作系统是会对读取的文件数据进行缓存的\")]),v._v(\"，会缓存在文件系统中的 \"),_(\"strong\",[v._v(\"Page Cache\")]),v._v(\"（如下图中的页缓存）。\")]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.png\",alt:\"\"}})]),v._v(\" \"),_(\"p\",[v._v(\"Page Cache 属于内存空间里的数据，由于内存访问比磁盘访问快很多，在下一次访问相同的数据就不需要通过磁盘 I/O 了，命中缓存就直接返回数据即可。\")]),v._v(\" \"),_(\"p\",[v._v(\"因此，Page Cache 起到了加速访问数据的作用。\")]),v._v(\" \"),_(\"h3\",{attrs:{id:\"mysql-的缓存\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mysql-的缓存\"}},[v._v(\"#\")]),v._v(\" MySQL 的缓存\")]),v._v(\" \"),_(\"p\",[v._v(\"MySQL 的数据是存储在磁盘里的，为了提升数据库的读写性能，Innodb 存储引擎设计了一个\"),_(\"strong\",[v._v(\"缓冲池\")]),v._v(\"（Buffer Pool），Buffer Pool 属于内存空间里的数据。\")]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/innodb/%E7%BC%93%E5%86%B2%E6%B1%A0.drawio.png\",alt:\"\"}})]),v._v(\" \"),_(\"p\",[v._v(\"有了缓冲池后：\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[v._v(\"当读取数据时，如果数据存在于 Buffer Pool 中，客户端就会直接读取 Buffer Pool 中的数据，否则再去磁盘中读取。\")]),v._v(\" \"),_(\"li\",[v._v(\"当修改数据时，首先是修改 Buffer Pool 中数据所在的页，然后将其页设置为脏页，最后由后台线程将脏页写入到磁盘。\")])]),v._v(\" \"),_(\"h2\",{attrs:{id:\"传统-lru-是如何管理内存数据的\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#传统-lru-是如何管理内存数据的\"}},[v._v(\"#\")]),v._v(\" 传统 LRU 是如何管理内存数据的？\")]),v._v(\" \"),_(\"p\",[_(\"strong\",[v._v(\"Linux 的 Page Cache 和  MySQL 的 Buffer Pool 的大小是有限的，并不能无限的缓存数据，对于一些频繁访问的数据我们希望可以一直留在内存中，而一些很少访问的数据希望可以在某些时机可以淘汰掉，从而保证内存不会因为满了而导致无法再缓存新的数据，同时还能保证常用数据留在内存中。\")])]),v._v(\" \"),_(\"p\",[v._v(\"要实现这个，\"),_(\"strong\",[v._v(\"最容易想到的就是 LRU（Least recently used）算法。\")])]),v._v(\" \"),_(\"p\",[_(\"strong\",[v._v(\"LRU 算法一般是用「链表」作为数据结构来实现的，链表头部的数据是最近使用的，而链表末尾的数据是最久没被使用的。那么，当空间不够了，就淘汰最久没被使用的节点，也就是链表末尾的数据，从而腾出内存空间。\")])]),v._v(\" \"),_(\"p\",[v._v(\"因为 Linux 的 Page Cache 和  MySQL 的 Buffer Pool 缓存的\"),_(\"strong\",[v._v(\"基本数据单位都是页（Page）单位\")]),v._v(\"，所以\"),_(\"strong\",[v._v(\"后续以「页」名称代替「数据」\")]),v._v(\"。\")]),v._v(\" \"),_(\"p\",[v._v(\"传统的 LRU 算法的实现思路是这样的：\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[v._v(\"当访问的页在内存里，就直接把该页对应的 LRU 链表节点移动到链表的头部。\")]),v._v(\" \"),_(\"li\",[v._v(\"当访问的页不在内存里，除了要把该页放入到 LRU 链表的头部，还要淘汰 LRU 链表末尾的页。\")])]),v._v(\" \"),_(\"p\",[v._v(\"比如下图，假设 LRU 链表长度为 5，LRU 链表从左到右有编号为 1，2，3，4，5 的页。\")]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/innodb/lru.png\",alt:\"\"}})]),v._v(\" \"),_(\"p\",[v._v(\"如果访问了 3 号页，因为 3 号页已经在内存了，所以把 3 号页移动到链表头部即可，表示最近被访问了。\")]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/innodb/lru2.png\",alt:\"\"}})]),v._v(\" \"),_(\"p\",[v._v(\"而如果接下来，访问了 8 号页，因为 8 号页不在内存里**，且 LRU 链表长度为 5，所以必须要淘汰数据，以腾出内存空间来缓存 8 号页，于是就会淘汰末尾的 5 号页，然后再将 8 号页加入到头部。**\")]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/innodb/lru3.png\",alt:\"\"}})]),v._v(\" \"),_(\"p\",[_(\"strong\",[v._v(\"传统的 LRU 算法并没有被 Linux 和 MySQL 使用，因为传统的 LRU 算法无法避免下面这两个问题：\")])]),v._v(\" \"),_(\"ul\",[_(\"li\",[_(\"strong\",[v._v(\"预读失效导致缓存命中率下降；\")])]),v._v(\" \"),_(\"li\",[_(\"strong\",[v._v(\"缓存污染导致缓存命中率下降；\")])])]),v._v(\" \"),_(\"h2\",{attrs:{id:\"预读失效-怎么办\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#预读失效-怎么办\"}},[v._v(\"#\")]),v._v(\" 预读失效，怎么办？\")]),v._v(\" \"),_(\"h3\",{attrs:{id:\"什么是预读机制\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是预读机制\"}},[v._v(\"#\")]),v._v(\" 什么是预读机制？\")]),v._v(\" \"),_(\"p\",[v._v(\"Linux 操作系统为基于 Page Cache 的读缓存机制提供\"),_(\"strong\",[v._v(\"预读机制\")]),v._v(\"，一个例子是：\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[_(\"strong\",[v._v(\"应用程序只想读取磁盘上文件 A 的 offset 为 0-3KB 范围内的数据，由于磁盘的基本读写单位为 block（4KB），于是操作系统至少会读 0-4KB 的内容，这恰好可以在一个 page 中装下。\")])]),v._v(\" \"),_(\"li\",[v._v(\"但是操作系统出于\"),_(\"strong\",[v._v(\"空间局部性原理（靠近当前被访问数据的数据，在未来很大概率会被访问到），会选择将磁盘块 offset [4KB,8KB)、[8KB,12KB) 以及 [12KB,16KB) 都加载到内存，于是额外在内存中申请了 3 个 page；\")])])]),v._v(\" \"),_(\"p\",[v._v(\"下图代表了操作系统的预读机制：\")]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://img-blog.csdnimg.cn/img_convert/ae8252378169c8c14b8b9907983f7d8b.png\",alt:\"\"}})]),v._v(\" \"),_(\"p\",[v._v(\"上图中，应用程序利用 read 系统调动读取 4KB 数据，实际上内核使用预读机制（ReadaHead）机制完成了 16KB 数据的读取，也就是通过一次磁盘顺序读将多个 Page 数据装入 Page Cache。\")]),v._v(\" \"),_(\"p\",[v._v(\"这样下次读取 4KB 数据后面的数据的时候，就不用从磁盘读取了，直接在 Page Cache 即可命中数据。因此，预读机制带来的好处就是\"),_(\"strong\",[v._v(\"减少了 磁盘 I/O 次数，提高系统磁盘 I/O 吞吐量\")]),v._v(\"。\")]),v._v(\" \"),_(\"p\",[v._v(\"MySQL Innodb 存储引擎的 Buffer Pool 也有类似的预读机制，MySQL 从磁盘加载页时，\"),_(\"strong\",[v._v(\"会提前把它相邻的页一并加载进来，目的是为了减少磁盘 IO。\")])]),v._v(\" \"),_(\"h3\",{attrs:{id:\"预读失效会带来什么问题\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#预读失效会带来什么问题\"}},[v._v(\"#\")]),v._v(\" 预读失效会带来什么问题？\")]),v._v(\" \"),_(\"p\",[v._v(\"如果\"),_(\"strong\",[v._v(\"这些被提前加载进来的页，并没有被访问\")]),v._v(\"，相当于这个预读工作是白做了，这个就是\"),_(\"strong\",[v._v(\"预读失效\")]),v._v(\"。\")]),v._v(\" \"),_(\"p\",[v._v(\"如果使用\"),_(\"strong\",[v._v(\"传统的 LRU 算法，就会把「预读页」放到 LRU 链表头部，而当内存空间不够的时候，还需要把末尾的页淘汰掉。\")])]),v._v(\" \"),_(\"p\",[v._v(\"如果这些「预读页」如果一直不会被访问到，就会出现一个很奇怪的问题，\"),_(\"strong\",[v._v(\"不会被访问的预读页却占用了 LRU 链表前排的位置，而末尾淘汰的页，可能是热点数据，这样就大大降低了缓存命中率\")]),v._v(\" 。\")]),v._v(\" \"),_(\"h3\",{attrs:{id:\"如何避免预读失效造成的影响\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何避免预读失效造成的影响\"}},[v._v(\"#\")]),v._v(\" 如何避免预读失效造成的影响？\")]),v._v(\" \"),_(\"p\",[_(\"strong\",[v._v(\"我们不能因为害怕预读失效，而将预读机制去掉，大部分情况下，空间局部性原理还是成立的。\")])]),v._v(\" \"),_(\"p\",[v._v(\"要避免预读失效带来影响，最好就是\"),_(\"strong\",[v._v(\"让预读页停留在内存里的时间要尽可能的短，让真正被访问的页才移动到 LRU 链表的头部，从而保证真正被读取的热数据留在内存里的时间尽可能长\")]),v._v(\"。\")]),v._v(\" \"),_(\"p\",[v._v(\"那到底怎么才能避免呢？\")]),v._v(\" \"),_(\"p\",[v._v(\"Linux 操作系统和 MySQL Innodb 通过改进传统 LRU 链表来避免预读失效带来的影响，具体的改进分别如下：\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[v._v(\"Linux 操作系统实现两个了 LRU 链表：\"),_(\"strong\",[v._v(\"活跃 LRU 链表（active_list）和非活跃 LRU 链表（inactive_list）\")]),v._v(\"；\")]),v._v(\" \"),_(\"li\",[v._v(\"MySQL 的 Innodb 存储引擎是在一个 LRU 链表上划分来 2 个区域：\"),_(\"strong\",[v._v(\"young 区域 和 old 区域\")]),v._v(\"。\")])]),v._v(\" \"),_(\"p\",[v._v(\"这两个改进方式，设计思想都是类似的，\"),_(\"strong\",[v._v(\"都是将数据分为了冷数据和热数据，然后分别进行 LRU 算法\")]),v._v(\"。不再像传统的 LRU 算法那样，所有数据都只用一个 LRU 算法管理。\")]),v._v(\" \"),_(\"p\",[v._v(\"接下来，具体聊聊 Linux 和 MySQL 是如何避免预读失效带来的影响？\")]),v._v(\" \"),_(\"blockquote\",[_(\"p\",[v._v(\"Linux 是如何避免预读失效带来的影响？\")])]),v._v(\" \"),_(\"p\",[v._v(\"Linux 操作系统实现两个了 LRU 链表：\"),_(\"strong\",[v._v(\"活跃 LRU 链表（active_list）和非活跃 LRU 链表（inactive_list）\")]),v._v(\"。\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[_(\"strong\",[v._v(\"active list\")]),v._v(\" 活跃内存页链表，这里存放的是最近被访问过（活跃）的内存页；\")]),v._v(\" \"),_(\"li\",[_(\"strong\",[v._v(\"inactive list\")]),v._v(\" 不活跃内存页链表，这里存放的是很少被访问（非活跃）的内存页；\")])]),v._v(\" \"),_(\"p\",[v._v(\"有了这两个 LRU 链表后，\"),_(\"strong\",[v._v(\"预读页就只需要加入到 inactive list 区域的头部，当页被真正访问的时候，才将页插入 active list 的头部\")]),v._v(\"。如果预读的页一直没有被访问，就会从 inactive list 移除，这样就不会影响 active list 中的热点数据。\")]),v._v(\" \"),_(\"p\",[v._v(\"接下来，给大家举个例子。\")]),v._v(\" \"),_(\"p\",[v._v(\"假设 active list 和 inactive list 的长度为 5，目前内存中已经有如下 10 个页：\")]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%BC%93%E5%AD%98/active_inactive_list.drawio.png\",alt:\"\"}})]),v._v(\" \"),_(\"p\",[v._v(\"现在有个编号为 20 的页被预读了，这个页只会被插入到 inactive list 的头部，而 inactive list 末尾的页（10 号）会被淘汰掉。\")]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%BC%93%E5%AD%98/active_inactive_list1.drawio.png\",alt:\"\"}})]),v._v(\" \"),_(\"p\",[_(\"strong\",[v._v(\"即使编号为 20 的预读页一直不会被访问，它也没有占用到  active list 的位置\")]),v._v(\"，而且还会比 active list 中的页更早被淘汰出去。\")]),v._v(\" \"),_(\"p\",[v._v(\"如果 20 号页被预读后，立刻被访问了，那么就会将它插入到  active list 的头部，active list 末尾的页（5 号），会被\"),_(\"strong\",[v._v(\"降级\")]),v._v(\"到 inactive list，作为 inactive list 的头部，这个过程并不会有数据被淘汰。\")]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%BC%93%E5%AD%98/active_inactive_list2.drawio.png\",alt:\"\"}})]),v._v(\" \"),_(\"blockquote\",[_(\"p\",[v._v(\"MySQL 是如何避免预读失效带来的影响？\")])]),v._v(\" \"),_(\"p\",[v._v(\"MySQL 的 Innodb 存储引擎是在一个 LRU 链表上划分来 2 个区域，\"),_(\"strong\",[v._v(\"young 区域 和 old 区域\")]),v._v(\"。\")]),v._v(\" \"),_(\"p\",[_(\"strong\",[v._v(\"young 区域在 LRU 链表的前半部分，old 区域则是在后半部分，这两个区域都有各自的头和尾节点\")]),v._v(\"，如下图：\")]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/innodb/young%2Bold.png\",alt:\"\"}})]),v._v(\" \"),_(\"p\",[v._v(\"young 区域与 old 区域在 LRU 链表中的占比关系并不是一比一的关系，而是是 7 比 3（默认比例）的关系。\")]),v._v(\" \"),_(\"p\",[_(\"strong\",[v._v(\"划分这两个区域后，预读的页就只需要加入到 old 区域的头部，当页被真正访问的时候，才将页插入 young 区域的头部\")]),v._v(\"。如果预读的页一直没有被访问，就会从 old 区域移除，这样就不会影响 young 区域中的热点数据。\")]),v._v(\" \"),_(\"p\",[v._v(\"接下来，给大家举个例子。\")]),v._v(\" \"),_(\"p\",[v._v(\"假设有一个长度为 10 的 LRU 链表，其中 young 区域占比 70 %，old 区域占比 30 %。\")]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/innodb/lrutwo.drawio.png\",alt:\"\"}})]),v._v(\" \"),_(\"p\",[v._v(\"现在有个编号为 20 的页被预读了，这个页只会被插入到 old 区域头部，而 old 区域末尾的页（10 号）会被淘汰掉。\")]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/innodb/lrutwo2.png\",alt:\"\"}})]),v._v(\" \"),_(\"p\",[v._v(\"如果 20 号页一直不会被访问，它也没有占用到 young 区域的位置，而且还会比 young 区域的数据更早被淘汰出去。\")]),v._v(\" \"),_(\"p\",[v._v(\"如果 20 号页被预读后，立刻被访问了，那么就会将它插入到 young 区域的头部，young 区域末尾的页（7 号），会被挤到 old 区域，作为 old 区域的头部，这个过程并不会有页被淘汰。\")]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/innodb/lrutwo3.png\",alt:\"\"}})]),v._v(\" \"),_(\"h2\",{attrs:{id:\"缓存污染-怎么办\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存污染-怎么办\"}},[v._v(\"#\")]),v._v(\" 缓存污染，怎么办？\")]),v._v(\" \"),_(\"h3\",{attrs:{id:\"什么是缓存污染\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是缓存污染\"}},[v._v(\"#\")]),v._v(\" 什么是缓存污染？\")]),v._v(\" \"),_(\"p\",[v._v(\"虽然 Linux（实现两个 LRU 链表）和 MySQL（划分两个区域）通过改进传统的 LRU 数据结构，避免了预读失效带来的影响。\")]),v._v(\" \"),_(\"p\",[v._v(\"但是如果还是使用「只要数据被访问一次，就将数据加入到活跃 LRU 链表头部（或者 young 区域）」这种方式的话，那么\"),_(\"strong\",[v._v(\"还存在缓存污染的问题\")]),v._v(\"。\")]),v._v(\" \"),_(\"p\",[v._v(\"当我们在\"),_(\"strong\",[v._v(\"批量读取数据的时候，由于数据被访问了一次，这些大量数据都会被加入到「活跃 LRU 链表」里，然后之前缓存在活跃 LRU 链表（或者 young 区域）里的热点数据全部都被淘汰了\")]),v._v(\"，\"),_(\"strong\",[v._v(\"如果这些大量的数据在很长一段时间都不会被访问的话，那么整个活跃 LRU 链表（或者 young 区域）就被污染了\")]),v._v(\"。\")]),v._v(\" \"),_(\"h3\",{attrs:{id:\"缓存污染会带来什么问题\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存污染会带来什么问题\"}},[v._v(\"#\")]),v._v(\" 缓存污染会带来什么问题？\")]),v._v(\" \"),_(\"p\",[v._v(\"缓存污染带来的影响就是很致命的，等这些热数据又被再次访问的时候，由于缓存未命中，\"),_(\"strong\",[v._v(\"就会产生大量的磁盘 I/O，系统性能就会急剧下降。\")])]),v._v(\" \"),_(\"p\",[v._v(\"我以 MySQL 举例子，Linux 发生缓存污染的现象也是类似。\")]),v._v(\" \"),_(\"p\",[v._v(\"当某一个 SQL 语句\"),_(\"strong\",[v._v(\"扫描了大量的数据\")]),v._v(\"时，在 Buffer Pool 空间比较有限的情况下，可能会将 \"),_(\"strong\",[v._v(\"Buffer Pool 里的所有页都替换出去，导致大量热数据被淘汰了\")]),v._v(\"，等这些热数据又被再次访问的时候，由于缓存未命中，就会产生大量的磁盘 I/O，MySQL 性能就会急剧下降。\")]),v._v(\" \"),_(\"p\",[v._v(\"注意，\"),_(\"strong\",[v._v(\"缓存污染并不只是查询语句查询出了大量的数据才出现的问题，即使查询出来的结果集很小，也会造成缓存污染。\")])]),v._v(\" \"),_(\"p\",[v._v(\"比如，在一个数据量非常大的表，执行了这条语句：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[_(\"code\",[_(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"select\")]),v._v(\" \"),_(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"*\")]),v._v(\" \"),_(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"from\")]),v._v(\" t_user \"),_(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[v._v(\"where\")]),v._v(\" name \"),_(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"like\")]),v._v(\" \"),_(\"span\",{pre:!0,attrs:{class:\"token string\"}},[v._v('\"%xiaolin%\"')]),_(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n\")])]),v._v(\" \"),_(\"div\",{staticClass:\"line-numbers-wrapper\"},[_(\"span\",{staticClass:\"line-number\"},[v._v(\"1\")]),_(\"br\")])]),_(\"p\",[v._v(\"可能这个查询出来的结果就几条记录，但是由于这条语句会发生索引失效，所以这个查询过程是全表扫描的，接着会发生如下的过程：\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[v._v(\"从磁盘读到的页加入到 LRU 链表的 old 区域头部；\")]),v._v(\" \"),_(\"li\",[v._v(\"当从页里读取行记录时，也就是\"),_(\"strong\",[v._v(\"页被访问的时候，就要将该页放到 young 区域头部\")]),v._v(\"；\")]),v._v(\" \"),_(\"li\",[v._v(\"接下来拿行记录的 name 字段和字符串 xiaolin 进行模糊匹配，如果符合条件，就加入到结果集里；\")]),v._v(\" \"),_(\"li\",[v._v(\"如此往复，直到扫描完表中的所有记录。\")])]),v._v(\" \"),_(\"p\",[v._v(\"经过这一番折腾，由于这条 SQL 语句访问的页非常多，每访问一个页，都会将其加入 young 区域头部，那么\"),_(\"strong\",[v._v(\"原本 young 区域的热点数据都会被替换掉，导致缓存命中率下降\")]),v._v(\"。那些在批量扫描时，而被加入到 young 区域的页，如果在很长一段时间都不会再被访问的话，那么就污染了 young 区域。\")]),v._v(\" \"),_(\"p\",[v._v(\"举个例子，假设需要批量扫描：21，22，23，24，25 这五个页，这些页都会被逐一访问（读取页里的记录）。\")]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/innodb/lruthree.drawio.png\",alt:\"\"}})]),v._v(\" \"),_(\"p\",[_(\"strong\",[v._v(\"在批量访问这些页的时候，会被逐一插入到 young 区域头部。\")])]),v._v(\" \"),_(\"p\",[_(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/innodb/lruthree1.png\",alt:\"\"}})]),v._v(\" \"),_(\"p\",[v._v(\"可以看到，原本在 young 区域的 6 和 7 号页都被淘汰了，而批量扫描的页基本占满了 young 区域，如果这些页在很长一段时间都不会被访问，那么就对 young 区域造成了污染。\")]),v._v(\" \"),_(\"p\",[v._v(\"如果 6 和 7 号页是热点数据，那么在被淘汰后，后续有 SQL 再次读取  6 和 7 号页时，由于缓存未命中，就要从磁盘中读取了，降低了 MySQL 的性能，这就是缓存污染带来的影响。\")]),v._v(\" \"),_(\"h3\",{attrs:{id:\"怎么避免缓存污染造成的影响\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#怎么避免缓存污染造成的影响\"}},[v._v(\"#\")]),v._v(\" 怎么避免缓存污染造成的影响？\")]),v._v(\" \"),_(\"p\",[v._v(\"前面的 LRU 算法只要数据被访问一次，就将数据加入活跃 LRU 链表（或者 young 区域），\"),_(\"strong\",[v._v(\"这种 LRU 算法进入活跃 LRU 链表的门槛太低了\")]),v._v(\"！正式因为门槛太低，才导致在发生缓存污染的时候，很容就将原本在活跃 LRU 链表里的热点数据淘汰了。\")]),v._v(\" \"),_(\"p\",[v._v(\"所以，\"),_(\"strong\",[v._v(\"只要我们提高进入到活跃 LRU 链表（或者 young 区域）的门槛，就能有效地保证活跃 LRU 链表（或者 young 区域）里的热点数据不会被轻易替换掉\")]),v._v(\"。\")]),v._v(\" \"),_(\"p\",[v._v(\"Linux 操作系统和 MySQL Innodb 存储引擎分别是这样提高门槛的：\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[_(\"strong\",[v._v(\"Linux 操作系统\")]),v._v(\"：在内存页被访问\"),_(\"strong\",[v._v(\"第二次\")]),v._v(\"的时候，才将页从 inactive list 升级到 active list 里。\")]),v._v(\" \"),_(\"li\",[_(\"strong\",[v._v(\"MySQL Innodb\")]),v._v(\"：在内存页被访问\"),_(\"strong\",[v._v(\"第二次\")]),v._v(\"的时候，并不会马上将该页从 old 区域升级到 young 区域，因为还要进行\"),_(\"strong\",[v._v(\"停留在 old 区域的时间判断\")]),v._v(\"：\\n\"),_(\"ul\",[_(\"li\",[v._v(\"如果第二次的访问时间与第一次访问的时间\"),_(\"strong\",[v._v(\"在 1 秒内\")]),v._v(\"（默认值），那么该页就\"),_(\"strong\",[v._v(\"不会\")]),v._v(\"被从 old 区域升级到 young 区域；\")]),v._v(\" \"),_(\"li\",[v._v(\"如果第二次的访问时间与第一次访问的时间\"),_(\"strong\",[v._v(\"超过 1 秒\")]),v._v(\"，那么该页就\"),_(\"strong\",[v._v(\"会\")]),v._v(\"从 old 区域升级到 young 区域；\")])])])]),v._v(\" \"),_(\"p\",[v._v(\"提高了进入活跃 LRU 链表（或者 young 区域）的门槛后，就很好了避免缓存污染带来的影响。\")]),v._v(\" \"),_(\"p\",[v._v(\"在批量读取数据时候，\"),_(\"strong\",[v._v(\"如果这些大量数据只会被访问一次，那么它们就不会进入到活跃 LRU 链表（或者 young 区域）\")]),v._v(\"，也就不会把热点数据淘汰，只会待在非活跃 LRU 链表（或者 old 区域）中，后续很快也会被淘汰。\")]),v._v(\" \"),_(\"h2\",{attrs:{id:\"总结\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结\"}},[v._v(\"#\")]),v._v(\" 总结\")]),v._v(\" \"),_(\"p\",[v._v(\"传统的 LRU 算法法无法避免下面这两个问题：\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[v._v(\"预读失效导致缓存命中率下降；\")]),v._v(\" \"),_(\"li\",[v._v(\"缓存污染导致缓存命中率下降；\")])]),v._v(\" \"),_(\"p\",[v._v(\"为了避免「预读失效」造成的影响，Linux 和 MySQL 对传统的 LRU 链表做了改进：\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[v._v(\"Linux 操作系统实现两个了 LRU 链表：\"),_(\"strong\",[v._v(\"活跃 LRU 链表（active list）和非活跃 LRU 链表（inactive list）\")]),v._v(\"。\")]),v._v(\" \"),_(\"li\",[v._v(\"MySQL  Innodb 存储引擎是在一个 LRU 链表上划分来 2 个区域：\"),_(\"strong\",[v._v(\"young 区域 和 old 区域\")]),v._v(\"。\")])]),v._v(\" \"),_(\"p\",[v._v(\"但是如果还是使用「只要数据被访问一次，就将数据加入到活跃 LRU 链表头部（或者 young 区域）」这种方式的话，那么\"),_(\"strong\",[v._v(\"还存在缓存污染的问题\")]),v._v(\"。\")]),v._v(\" \"),_(\"p\",[v._v(\"为了避免「缓存污染」造成的影响，Linux 操作系统和 MySQL Innodb 存储引擎分别提高了升级为热点数据的门槛：\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[v._v(\"Linux 操作系统：在内存页被访问\"),_(\"strong\",[v._v(\"第二次\")]),v._v(\"的时候，才将页从 inactive list 升级到 active list 里。\")]),v._v(\" \"),_(\"li\",[v._v(\"MySQL Innodb：在内存页被访问\"),_(\"strong\",[v._v(\"第二次\")]),v._v(\"的时候，并不会马上将该页从 old 区域升级到 young 区域，因为还要进行\"),_(\"strong\",[v._v(\"停留在 old 区域的时间判断\")]),v._v(\"：\\n\"),_(\"ul\",[_(\"li\",[v._v(\"如果第二次的访问时间与第一次访问的时间\"),_(\"strong\",[v._v(\"在 1 秒内\")]),v._v(\"（默认值），那么该页就\"),_(\"strong\",[v._v(\"不会\")]),v._v(\"被从 old 区域升级到 young 区域；\")]),v._v(\" \"),_(\"li\",[v._v(\"如果第二次的访问时间与第一次访问的时间\"),_(\"strong\",[v._v(\"超过 1 秒\")]),v._v(\"，那么该页就\"),_(\"strong\",[v._v(\"会\")]),v._v(\"从 old 区域升级到 young 区域；\")])])])]),v._v(\" \"),_(\"p\",[v._v(\"通过提高了进入 active list（或者 young 区域）的门槛后，就很好了避免缓存污染带来的影响。\")]),v._v(\" \"),_(\"p\",[v._v(\"完！\")]),v._v(\" \"),_(\"hr\")])}),[],!1,null,null,null);_.default=o.exports}}]);","extractedComments":[]}