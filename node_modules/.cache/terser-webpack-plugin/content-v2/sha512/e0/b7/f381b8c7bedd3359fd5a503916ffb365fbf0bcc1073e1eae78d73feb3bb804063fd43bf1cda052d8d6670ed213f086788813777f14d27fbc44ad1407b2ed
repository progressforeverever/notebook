{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{398:function(t,s,a){\"use strict\";a.r(s);var v=a(4),_=Object(v.a)({},(function(){var t=this,s=t._self._c;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"mysql-03-事务隔离-为什么你改了我还看不见\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mysql-03-事务隔离-为什么你改了我还看不见\"}},[t._v(\"#\")]),t._v(\" MySQL 03 | 事务隔离：为什么你改了我还看不见？\")]),t._v(\" \"),s(\"p\",[t._v(\"仍然是参考极客时间\")]),t._v(\" \"),s(\"p\",[t._v(\"深入了解，发现之前自己知道的是多么的少。\")]),t._v(\" \"),s(\"p\",[t._v(\"窥镜自身，又弗如远甚。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"复习一下\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#复习一下\"}},[t._v(\"#\")]),t._v(\" 复习一下\")]),t._v(\" \"),s(\"p\",[t._v(\"之前经常提的，关于数据库的事务  ACID\")]),t._v(\" \"),s(\"p\",[t._v(\"能说出来ACID是什么吗？\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"A  Automatically   \"),s(\"strong\",[t._v(\"原子性\")]),t._v(\"   所有的操作，要么同时成功，要么同时失败\")]),t._v(\" \"),s(\"li\",[t._v(\"C  Consistently     \"),s(\"strong\",[t._v(\"一致性\")]),t._v(\"   写入的资料数据符合预期。\")]),t._v(\" \"),s(\"li\",[t._v(\"I    isolation           隔离性     数据库允许\"),s(\"strong\",[t._v(\"多个并发事务同时对其数据进行读写和修改的能力\")]),t._v(\"，隔离性\"),s(\"strong\",[t._v(\"可以防止多个事务并发执行时由于交叉执行而导致数据的不一致\")]),t._v(\"。\"),s(\"strong\",[t._v(\"事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。\")])]),t._v(\" \"),s(\"li\",[t._v(\"D   duration          持久性   修改是永久的。\")])]),t._v(\" \"),s(\"p\",[t._v(\"提到事务，你肯定不陌生，和数据库打交道的时候，我们总是会用到事务。最经典的例子就是转账，你要给朋友小王转100块钱，而此时你的银行卡只有100块钱。 转账过程具体到程序里会有一系列的操作，比如查询余额、做加减法、更新余额等，这些操作必 须保证是一体的，不然等程序查完之后，还没做减法之前，你这100块钱，完全可以借着这个时 间差再查一次，然后再给另外一个朋友转账，如果银行这么整，不就乱了么？\")]),t._v(\" \"),s(\"p\",[t._v(\"这时就要用到“事 务”这个概念了。 简单来说，\"),s(\"strong\",[t._v(\"事务就是要保证一组数据库操作，要么全部成功，要么全部失败\")]),t._v(\"。在MySQL中，事 务支持是在\"),s(\"strong\",[t._v(\"引擎层实现的\")]),t._v(\"。你现在知道，MySQL是一个支持多引擎的系统，但并不是所有的引擎都支持事务。比如MySQL原生的\"),s(\"strong\",[t._v(\"MyISAM引擎就不支持事务\")]),t._v(\"，这也是MyISAM\"),s(\"strong\",[t._v(\"被InnoDB取代的重要原因之一\")]),t._v(\"。 今天的文章里，我将会\"),s(\"strong\",[t._v(\"以InnoDB为例\")]),t._v(\"，剖析MySQL在事务支持方面的特定实现，并基于原理给 出相应的实践建议，希望这些案例能加深你对MySQL事务原理的理解。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"隔离性与隔离级别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#隔离性与隔离级别\"}},[t._v(\"#\")]),t._v(\" 隔离性与隔离级别\")]),t._v(\" \"),s(\"p\",[t._v(\"提到事务，你肯定会想到 ACID，今天主要要讲的是其中的 I，也就是隔离性。\")]),t._v(\" \"),s(\"p\",[t._v(\"当数据库上有多个事务同时执行的时候，就可能出现**脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）**的问题，为了解决这些问题，就有了“隔离级别”的概念。在谈隔离级别之前，你首先要知道，\"),s(\"strong\",[t._v(\"你隔离得越严实，效率就会越低\")]),t._v(\"。因此很多时候，我们都要在二者之间做 trade-off。\")]),t._v(\" \"),s(\"p\",[t._v(\"SQL 标准的事务隔离级别包括：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"mark\",[t._v(\"读未提交\")]),t._v(\"（read uncommitted）：\"),s(\"strong\",[t._v(\"指一个事务还没提交时，它做的变更就能被别的事务看到。\")])]),t._v(\" \"),s(\"li\",[s(\"mark\",[t._v(\"读提交\")]),t._v(\"（read committed）：一\"),s(\"strong\",[t._v(\"个事务提交之后，它做的变更才会被其他事务看到。\")])]),t._v(\" \"),s(\"li\",[s(\"mark\",[t._v(\"可重复读\")]),t._v(\"（repeatable read）：\"),s(\"strong\",[t._v(\"一个事务\")]),t._v(\"执行过程中看到的数据，\"),s(\"strong\",[t._v(\"总是跟这个事务在启动时看到的数据是一致的\")]),t._v(\"。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。\"),s(\"strong\",[t._v(\"（可重复读  顾名思义   一个事务  在整个阶段，看一个数据，都是不变的  可以重复读取  内容不变）\")])]),t._v(\" \"),s(\"li\",[s(\"mark\",[t._v(\"可串行化\")]),t._v(\"（serializable）：顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。\")])]),t._v(\" \"),s(\"p\",[t._v(\"好，我们回到上面提到的那几个问题。\"),s(\"strong\",[t._v(\"脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"脏读\")]),t._v(\"：所谓的脏读，指的是\"),s(\"strong\",[t._v(\"读到了其他事务未提交的数据\")]),t._v(\"，未提交意味着这些数据可能会保存到数据库，也可能会回滚，不保存到数据库。\"),s(\"strong\",[t._v(\"当这个数据发生了回滚，就意味着这个数据不存在，这就是脏读！\")]),t._v(\"  当数据库的事务隔离级别为\"),s(\"strong\",[t._v(\"读未提交\")]),t._v(\"，就会发生\"),s(\"strong\",[t._v(\"脏读\")]),t._v(\"现象！\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"不可重复读\")]),t._v(\"，指的是在一个事务内，\"),s(\"strong\",[t._v(\"最开始读到的数据和事务结束前的任意时刻读到的同一批数据出现不一致的情况。\")]),s(\"img\",{attrs:{src:\"https://pic4.zhimg.com/80/v2-592d7db06450ee0b8dd52078d7d5dba3_720w.webp\",alt:\"img\"}})]),t._v(\" \"),s(\"p\",[t._v(\"比如上图，事务 A 两次读取同一数据，第一次读取结果为 1，当事务 B 修改了数据并提交，此时的事务 A 第二次读取结果为 2，两次读取结果不一致！\")]),t._v(\" \"),s(\"p\",[t._v(\"当数据库的事务隔离级别为\"),s(\"strong\",[t._v(\"读未提交\")]),t._v(\"、\"),s(\"strong\",[t._v(\"读提交\")]),t._v(\"时，就会发生\"),s(\"strong\",[t._v(\"不可重复读\")]),t._v(\"现象！    \"),s(\"strong\",[t._v(\"顾名思义啦，只有在可重复读的隔离级别上，才不会出现不可重复读这个问题\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"幻读\")]),t._v(\"。例如事务 A 对一个表中的数据进行了修改，\"),s(\"strong\",[t._v(\"这种修改涉及到表中的全部数据行\")]),t._v(\"。此时，突然事务 B 插入了一条数据并提交了，当事务 A 提交了修改数据操作之后，再次读取全部数据，\"),s(\"strong\",[t._v(\"结果发现还有一条数据未更新，给人感觉好像产生了幻觉一样\")]),t._v(\"。这就是幻读！\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-1fa5771d9d41b548e364f5aede40008e_720w.webp\",alt:\"img\"}})]),t._v(\" \"),s(\"p\",[t._v(\"当有别的事务，在插入或者删除同一条数据的时候，就容易产生幻读的现象！\")]),t._v(\" \"),s(\"p\",[t._v(\"当数据库的事务隔离级别为\"),s(\"strong\",[t._v(\"读未提交\")]),t._v(\"、\"),s(\"strong\",[t._v(\"读提交\")]),t._v(\"、\"),s(\"strong\",[t._v(\"可重复读\")]),t._v(\"时，就会发生\"),s(\"strong\",[t._v(\"幻读\")]),t._v(\"现象！\")])])]),t._v(\" \"),s(\"p\",[t._v(\"其中“读提交”和“可重复读”比较难理解，所以我用一个例子说明这几种隔离级别。假设数据表 T 中只有一列，其中一行的值为 1，下面是按照时间顺序执行两个事务的行为。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[s(\"code\",[t._v(\"mysql\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"create\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"table\")]),t._v(\" T\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"c \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"engine\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"InnoDB\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nmysql\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"insert\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"into\")]),t._v(\" T\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"c\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"values\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\")])]),s(\"center\",[s(\"img\",{staticStyle:{zoom:\"70%\"},attrs:{src:\"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20230117233935073.png\",alt:\"image-20230117233935073\"}})]),t._v(\" \"),s(\"p\",[t._v(\"我们来看看在不同的隔离级别下，事务 A 会有哪些不同的返回结果，也就是图里面 V1、V2、V3 的返回值分别是什么：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"若隔离级别是“读未提交”， 则 V1 的值就是 2。这时候事务 B 虽然还没有提交，但是结果已经被 A 看到了。因此，V2、V3 也都是 2。s\")]),t._v(\" \"),s(\"li\",[t._v(\"若隔离级别是“读提交”，则 V1 是 1，V2 的值是 2。事务 B 的更新在提交后才能被 A 看到。所以， V3 的值也是 2。\")]),t._v(\" \"),s(\"li\",[t._v(\"若隔离级别是“可重复读”，则 V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就是这个要求：事务在执行期间看到的数据前后必须是一致的。\")]),t._v(\" \"),s(\"li\",[t._v(\"若隔离级别是“串行化”，则在事务 B 执行“将 1 改成 2”的时候，会被锁住。直到事务 A 提交后，事务 B 才可以继续执行。所以从 A 的角度看， V1、V2 值是 1，V3 的值是 2。\")])]),t._v(\" \"),s(\"p\",[t._v(\"在实现上，\"),s(\"strong\",[t._v(\"数据库里面会创建一个视图（快照），访问的时候以视图的逻辑结果为准\")]),t._v(\"。在“可重复读”隔离级别下，这个视图（快照）是在事务启动时创建的，整个事务存在期间都用这个静态视图。在“读提交”隔离级别下，这个视图是在每个 SQL 语句开始执行的时候创建的。这里需要注意的是，“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；而“串行化”隔离级别下直接用加锁的方式来避免并行访问。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"这里所说的“视图”就是 DDIA 中所讲的“快照级别隔离”的快照。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"我们可以看到在不同的隔离级别下，数据库行为是有所不同的\")]),t._v(\"。\"),s(\"strong\",[t._v(\"Oracle 数据库的默认隔离级别其实就是“读提交”    （所以各个数据库管理系统的默认是不一样的   这个得提前了解好）\")]),t._v(\"，因此对于一些从 Oracle \"),s(\"strong\",[t._v(\"迁移到 MySQL 的应用\")]),t._v(\"，为保证数据库隔离级别的一致，你一定要记得将 MySQL 的隔离级别设置为“读提交”。\")]),t._v(\" \"),s(\"p\",[t._v(\"配置的方式是，\"),s(\"strong\",[t._v(\"将启动参数 transaction-isolation 的值设置成 READ-COMMITTED。你可以用 show variables 来查看当前的值。\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"mysql> show variables like 'transaction_isolation';\\n+-----------------------+----------------+\\n| Variable_name | Value |\\n+-----------------------+----------------+\\n| transaction_isolation | READ-COMMITTED |\\n+-----------------------+----------------+\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\")])]),s(\"p\",[t._v(\"总结来说，存在即合理，\"),s(\"strong\",[t._v(\"每种隔离级别都有自己的使用场景\")]),t._v(\"，你要根据自己的业务情况来定。\")]),t._v(\" \"),s(\"p\",[t._v(\"你可能会问那什么时候需要“可重复读”的场景呢？我们来看一个数据校对逻辑的案例。假设你在管理一个个人银行账户表。一个表存了账户余额，一个表存了账单明细。到了月底你要做数据校对，也就是判断上个月的余额和当前余额的差额，是否与本月的账单明细一致。你一定希望在校对过程中，**即使有用户发生了一笔新的交易，也不影响你的校对结果。**这时候使用“可重复读”隔离级别就很方便。事务启动时的视图可以认为是静态的，不受其他事务更新的影响。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"事务隔离的实现\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事务隔离的实现\"}},[t._v(\"#\")]),t._v(\" 事务隔离的实现\")]),t._v(\" \"),s(\"p\",[t._v(\"理解了事务的隔离级别，我们再来看看事务隔离具体是怎么实现的。这里我们展开说明“可重复读”。\")]),t._v(\" \"),s(\"p\",[t._v(\"在 MySQL 中，实际上每条记录在\"),s(\"strong\",[t._v(\"更新的时候都会同时记录一条回滚操作。记录上的最新值，通过回滚操作，都可以得到前一个状态的值。\")])]),t._v(\" \"),s(\"p\",[t._v(\"假设一个值从 1 被按顺序改成了 2、3、4，在\"),s(\"strong\",[t._v(\"回滚日志\")]),t._v(\"里面就会有类似下面的记录：\")]),t._v(\" \"),s(\"center\",[s(\"img\",{staticStyle:{zoom:\"90%\"},attrs:{src:\"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20230117235019840.png\",alt:\"image-20230117235019840\"}})]),t._v(\" \"),s(\"p\",[t._v(\"当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。如图中看到的，在视图 A、B、C 里面，这一个记录的值分别是 1、2、4，同一条记录在系统中可以存在多个版本，就是数据库的\"),s(\"mark\",[t._v(\"多版本并发控制\")]),t._v(\"（\"),s(\"strong\",[t._v(\"MVCC\")]),t._v(\"）。对于 read-view A，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。\")]),t._v(\" \"),s(\"p\",[t._v(\"同时你会发现，即使现在有另外一个事务正在将 4 改成 5，这个事务跟 read-view A、B、C 对应的事务是不会冲突的。\")]),t._v(\" \"),s(\"p\",[t._v(\"你一定会问，回滚日志总不能一直保留吧，什么时候删除呢？答案是，在不需要的时候才删除。也就是说，系统会判断，\"),s(\"strong\",[t._v(\"当没有事务再需要用到这些回滚日志时，回滚日志会被删除\")]),t._v(\"。什么时候才不需要了呢？就是当系统里没有比这个回滚日志更早的 read-view 的时候。\")]),t._v(\" \"),s(\"p\",[t._v(\"基于上面的说明，我们来讨论一下为什么建议你\"),s(\"font\",{attrs:{color:\"red\"}},[t._v(\"尽量不要使用长事务\")]),t._v(\":\")],1),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就\"),s(\"strong\",[t._v(\"会导致大量占用存储空间\")]),t._v(\"。\")]),t._v(\" \"),s(\"li\",[t._v(\"在 MySQL 5.5 及以前的版本，回滚日志是跟数据字典一起放在 ibdata 文件里的，即使长事务最终提交，回滚段被清理，文件也不会变小。我见过数据只有 20GB，而回滚段有 200GB 的库。最终只好为了清理回滚段，重建整个库。\")]),t._v(\" \"),s(\"li\",[t._v(\"除了对回滚段的影响，\"),s(\"strong\",[t._v(\"长事务还占用锁资源，也可能拖垮整个库，这个我们会在后面讲锁的时候展开。\")])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"事务的启动方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事务的启动方式\"}},[t._v(\"#\")]),t._v(\" 事务的启动方式\")]),t._v(\" \"),s(\"p\",[t._v(\"如前面所述，长事务有这些潜在风险，我当然是建议你尽量避免。\"),s(\"u\",[t._v(\"其实很多时候业务开发同学并不是有意使用长事务，通常是由于误用所致\")]),t._v(\"。MySQL 的\"),s(\"strong\",[t._v(\"事务启动方式有以下几种\")]),t._v(\"：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"strong\",[t._v(\"显式启动事务语句\")]),t._v(\"， begin 或 start transaction。配套的提交语句是 commit，回滚语句是 rollback。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"set autocommit=0\")]),t._v(\"，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"有些客户端连接框架会默认连接成功后先执行一个 set autocommit=0 的命令   （很有可能就是你之前的oom的问题）\")]),t._v(\"。这就导致接下来的查询都在事务中，如果是长连接，就导致了意外的长事务。\")]),t._v(\" \"),s(\"p\",[t._v(\"因此，我会\"),s(\"font\",{attrs:{color:\"red\"}},[t._v(\"建议你总是使用 set autocommit=1, 通过显式语句的方式来启动事务\")]),t._v(\"。\")],1),t._v(\" \"),s(\"p\",[t._v(\"但是有的开发同学会纠结“多一次交互”的问题。对于一个需要频繁使用事务的业务，第二种方式每个事务在开始时都不需要主动执行一次 “begin”，减少了语句的交互次数。如果你也有这个顾虑，我建议你使用 \"),s(\"mark\",[t._v(\"commit work and chain 语法\")]),t._v(\"：在 autocommit 为 1 的情况下，用 begin 显式启动的事务，如果执行 commit 则提交事务。如果执行 commit work and chain，则是提交事务并自动启动下一个事务，这样也省去了再次执行 begin 语句的开销。同时带来的好处是从程序开发的角度明确地知道每个语句是否处于事务中。\")]),t._v(\" \"),s(\"p\",[t._v(\"你可以在 information_schema 库的 innodb_trx 这个表中查询长事务，比如下面这个语句，用于查找持续时间超过 60s 的事务：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"select\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"from\")]),t._v(\" information_schema\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"innodb_trx \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"where\")]),t._v(\" TIME_TO_SEC\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"timediff\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"now\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"trx_started\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"60\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\")])]),s(\"h2\",{attrs:{id:\"summary\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#summary\"}},[t._v(\"#\")]),t._v(\" Summary\")]),t._v(\" \"),s(\"p\",[t._v(\"以上介绍了 MySQL 的事务隔离级别的现象和实现，根据实现原理分析了长事务存在的风险，以及如何用正确的方式避免长事务。希望我举的例子能够帮助你理解事务，并更好地使用 MySQL 的事务特性。\")])],1)}),[],!1,null,null,null);s.default=_.exports}}]);","extractedComments":[]}