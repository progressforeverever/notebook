{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{384:function(s,t,a){\"use strict\";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[t(\"h2\",{attrs:{id:\"集合概述\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集合概述\"}},[s._v(\"#\")]),s._v(\" 集合概述\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"java-集合概览\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java-集合概览\"}},[s._v(\"#\")]),s._v(\" Java 集合概览\")]),s._v(\" \"),t(\"p\",[s._v(\"Java 集合， 也叫作容器，\"),t(\"strong\",[s._v(\"主要是由两大接口派生而来：一个是 \"),t(\"code\",[s._v(\"Collection\")]),s._v(\"接口，主要用于存放单一元素\")]),s._v(\"；\"),t(\"strong\",[s._v(\"另一个是 \"),t(\"code\",[s._v(\"Map\")]),s._v(\" 接口，主要用于存放键值对。对于\"),t(\"code\",[s._v(\"Collection\")]),s._v(\" 接口，下面又有三个主要的子接口：\"),t(\"code\",[s._v(\"List\")]),s._v(\"、\"),t(\"code\",[s._v(\"Set\")]),s._v(\" 和 \"),t(\"code\",[s._v(\"Queue\")]),s._v(\"。\")])]),s._v(\" \"),t(\"p\",[s._v(\"Java 集合框架如下图所示：\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/collection/java-collection-hierarchy.png\",alt:\"Java 集合框架概览\"}})]),s._v(\" \"),t(\"p\",[s._v(\"注：图中只列举了主要的继承派生关系，并没有列举所有关系。比方省略了\"),t(\"code\",[s._v(\"AbstractList\")]),s._v(\", \"),t(\"code\",[s._v(\"NavigableSet\")]),s._v(\"等抽象类以及其他的一些辅助类，如想深入了解，可自行查看源码。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"说说-list-set-queue-map-四者的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#说说-list-set-queue-map-四者的区别\"}},[s._v(\"#\")]),s._v(\" 说说 List, Set, Queue, Map 四者的区别？\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"List\")]),s._v(\"(对付顺序的好帮手): 存储的元素是\"),t(\"strong\",[s._v(\"有序的、可重复的。\")])]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"Set\")]),s._v(\"(注重独一无二的性质): 存储的元素不可重复的。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"Queue\")]),s._v(\"(实现排队功能的叫号机): 按特定的排队规则来确定先后顺序，\"),t(\"strong\",[s._v(\"存储的元素是有序的、可重复的。\")])]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"Map\")]),s._v('(用 key 来搜索的专家): 使用键值对（key-value）存储，类似于数学上的函数 y=f(x)，\"x\" 代表 key，\"y\" 代表 value，'),t(\"strong\",[s._v(\"key 是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值。\")])])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"集合框架底层数据结构总结\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集合框架底层数据结构总结\"}},[s._v(\"#\")]),s._v(\" 集合框架底层数据结构总结\")]),s._v(\" \"),t(\"p\",[s._v(\"先来看一下 \"),t(\"code\",[s._v(\"Collection\")]),s._v(\" 接口下面的集合。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"list\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#list\"}},[s._v(\"#\")]),s._v(\" List\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"ArrayList\")]),s._v(\"：\"),t(\"code\",[s._v(\"Object[]\")]),s._v(\" 数组。详细可以查看：\"),t(\"RouterLink\",{attrs:{to:\"/java/10.javaSE/arraylist-source-code.html\"}},[s._v(\"ArrayList 源码分析\")]),s._v(\"。\")],1),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"Vector\")]),s._v(\"：\"),t(\"code\",[s._v(\"Object[]\")]),s._v(\" 数组。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"LinkedList\")]),s._v(\"：双向链表(JDK1.6 之前为循环链表，JDK1.7 取消了循环)。详细可以查看：\"),t(\"RouterLink\",{attrs:{to:\"/java/10.javaSE/linkedlist-source-code.html\"}},[s._v(\"LinkedList 源码分析\")]),s._v(\"。\")],1)]),s._v(\" \"),t(\"h4\",{attrs:{id:\"set\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#set\"}},[s._v(\"#\")]),s._v(\" Set\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"HashSet\")]),s._v(\"(无序，唯一): 基于 \"),t(\"code\",[s._v(\"HashMap\")]),s._v(\" 实现的，底层采用 \"),t(\"code\",[s._v(\"HashMap\")]),s._v(\" 来保存元素。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"LinkedHashSet\")]),s._v(\": \"),t(\"code\",[s._v(\"LinkedHashSet\")]),s._v(\" 是 \"),t(\"code\",[s._v(\"HashSet\")]),s._v(\" 的子类，并且其内部是通过 \"),t(\"code\",[s._v(\"LinkedHashMap\")]),s._v(\" 来实现的。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"TreeSet\")]),s._v(\"(有序，唯一): 红黑树(自平衡的排序二叉树)。\")])]),s._v(\" \"),t(\"h4\",{attrs:{id:\"queue\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#queue\"}},[s._v(\"#\")]),s._v(\" Queue\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"PriorityQueue\")]),s._v(\": \"),t(\"code\",[s._v(\"Object[]\")]),s._v(\" \"),t(\"strong\",[s._v(\"数组来实现小顶堆\")]),s._v(\"。详细可以查看：\"),t(\"RouterLink\",{attrs:{to:\"/java/10.javaSE/priorityqueue-source-code.html\"}},[s._v(\"PriorityQueue 源码分析\")]),s._v(\"。\")],1),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"DelayQueue\")]),s._v(\":\"),t(\"code\",[s._v(\"PriorityQueue\")]),s._v(\"。详细可以查看：\"),t(\"RouterLink\",{attrs:{to:\"/java/10.javaSE/delayqueue-source-code.html\"}},[s._v(\"DelayQueue 源码分析\")]),s._v(\"。\")],1),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"ArrayDeque\")]),s._v(\": 可扩容动态双向数组。\")])]),s._v(\" \"),t(\"p\",[s._v(\"再来看看 \"),t(\"code\",[s._v(\"Map\")]),s._v(\" 接口下面的集合。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"map\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#map\"}},[s._v(\"#\")]),s._v(\" Map\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"HashMap\")]),s._v(\"：JDK1.8 之前 \"),t(\"code\",[s._v(\"HashMap\")]),s._v(\" \"),t(\"strong\",[s._v(\"由数组+链表组成的\")]),s._v(\"，数组是 \"),t(\"code\",[s._v(\"HashMap\")]),s._v(\" 的主体，\"),t(\"strong\",[s._v(\"链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）\")]),s._v(\"。\"),t(\"strong\",[s._v(\"JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间\")]),s._v(\"。详细可以查看：\"),t(\"RouterLink\",{attrs:{to:\"/java/10.javaSE/hashmap-source-code.html\"}},[s._v(\"HashMap 源码分析\")]),s._v(\"。\")],1),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"LinkedHashMap\")]),s._v(\"：\"),t(\"code\",[s._v(\"LinkedHashMap\")]),s._v(\" 继承自 \"),t(\"code\",[s._v(\"HashMap\")]),s._v(\"，所以它的底层仍然是\"),t(\"strong\",[s._v(\"基于拉链式散列结构即由数组和链表或红黑树组成\")]),s._v(\"。另外，\"),t(\"code\",[s._v(\"LinkedHashMap\")]),s._v(\" 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。详细可以查看：\"),t(\"RouterLink\",{attrs:{to:\"/java/10.javaSE/linkedhashmap-source-code.html\"}},[s._v(\"LinkedHashMap 源码分析\")])],1),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"Hashtable\")]),s._v(\"：数组+链表组成的，数组是 \"),t(\"code\",[s._v(\"Hashtable\")]),s._v(\" 的主体，链表则是主要为了解决哈希冲突而存在的。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"TreeMap\")]),s._v(\"：红黑树（自平衡的排序二叉树）。\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"如何选用集合\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何选用集合\"}},[s._v(\"#\")]),s._v(\" 如何选用集合?\")]),s._v(\" \"),t(\"p\",[s._v(\"我们主要根据集合的特点来选择合适的集合。比如：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"我们需要根据键值获取到元素值时就选用 \"),t(\"code\",[s._v(\"Map\")]),s._v(\" 接口下的集合，\"),t(\"strong\",[s._v(\"需要排序时选择 \"),t(\"code\",[s._v(\"TreeMap\")]),s._v(\",不需要排序时就选择 \"),t(\"code\",[s._v(\"HashMap\")])]),s._v(\" ,需要保证线程安全就选用 \"),t(\"code\",[s._v(\"ConcurrentHashMap\")]),s._v(\"。 \"),t(\"strong\",[s._v(\"注意TreeMap\")])]),s._v(\" \"),t(\"li\",[s._v(\"我们只需要存放元素值时，就选择实现\"),t(\"code\",[s._v(\"Collection\")]),s._v(\" 接口的集合，需要保证元素唯一时选择实现 \"),t(\"code\",[s._v(\"Set\")]),s._v(\" 接口的集合比如 \"),t(\"code\",[s._v(\"TreeSet\")]),s._v(\" 或 \"),t(\"code\",[s._v(\"HashSet\")]),s._v(\"，不需要就选择实现 \"),t(\"code\",[s._v(\"List\")]),s._v(\" 接口的比如 \"),t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 或 \"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\"，然后再根据实现这些接口的集合的特点来选用。\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"为什么要使用集合\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要使用集合\"}},[s._v(\"#\")]),s._v(\" 为什么要使用集合？\")]),s._v(\" \"),t(\"p\",[s._v(\"当我们需要存储一组类型相同的数据时，数组是最常用且最基本的容器之一。但是，使用数组存储对象存在一些不足之处，因为在实际开发中，存储的数据类型多种多样且数量不确定。这时，Java 集合就派上用场了。与数组相比，Java 集合提供了更灵活、更有效的方法来存储多个数据对象。Java 集合框架中的各种集合类和接口可以存储不同类型和数量的对象，同时还具有多样化的操作方式。相较于数组，Java 集合的优势在于它们的大小可变、支持泛型、具有内建算法等。总的来说，Java 集合提高了数据的存储和处理灵活性，可以更好地适应现代软件开发中多样化的数据需求，并支持高质量的代码编写。\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"list-2\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#list-2\"}},[s._v(\"#\")]),s._v(\" List\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"arraylist-和-array-数组-的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#arraylist-和-array-数组-的区别\"}},[s._v(\"#\")]),s._v(\" ArrayList 和 Array（数组）的区别？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 内部基于动态数组实现，比 \"),t(\"code\",[s._v(\"Array\")]),s._v(\"（静态数组） 使用起来更加灵活：\")])]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"ArrayList\")]),s._v(\"会根据实际存储的\"),t(\"strong\",[s._v(\"元素动态地扩容或缩容，而 \"),t(\"code\",[s._v(\"Array\")]),s._v(\" 被创建之后就不能改变它的长度了。\")])]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 允许你使用泛型来确保类型安全，\"),t(\"code\",[s._v(\"Array\")]),s._v(\" 则不可以。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 中\"),t(\"strong\",[s._v(\"只能存储对象。对于基本类型数据，需要使用其对应的包装类\")]),s._v(\"（如 Integer、Double 等）。\"),t(\"strong\",[t(\"code\",[s._v(\"Array\")]),s._v(\" 可以直接存储基本类型数据，也可以存储对象。\")])]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 支持插入、删除、遍历等常见操作，并且提供了丰富的 API 操作方法，比如 \"),t(\"code\",[s._v(\"add()\")]),s._v(\"、\"),t(\"code\",[s._v(\"remove()\")]),s._v(\"等。\"),t(\"code\",[s._v(\"Array\")]),s._v(\" 只是一个固定长度的数组，只能按照下标访问其中的元素，不具备动态添加、删除元素的能力。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[t(\"code\",[s._v(\"ArrayList\")]),s._v(\"创建时不需要指定大小，而\"),t(\"code\",[s._v(\"Array\")]),s._v(\"创建时必须指定大小。\")])])]),s._v(\" \"),t(\"p\",[s._v(\"下面是二者使用的简单对比：\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"Array\")]),s._v(\"：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 初始化一个 String 类型的数组\")]),s._v(\"\\n \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" stringArr \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"hello\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"world\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"!\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 修改数组元素的值\")]),s._v(\"\\n stringArr\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"goodbye\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Arrays\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"toString\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"stringArr\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// [goodbye, world, !]\")]),s._v(\"\\n \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 删除数组中的元素，需要手动移动后面的元素\")]),s._v(\"\\n \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"for\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" i \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" i \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\" stringArr\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"length \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" i\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"++\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n     stringArr\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"i\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" stringArr\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"i \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n stringArr\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"stringArr\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"length \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"null\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Arrays\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"toString\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"stringArr\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// [world, !, null]\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\")])]),t(\"p\",[t(\"code\",[s._v(\"ArrayList\")]),s._v(\" ：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 初始化一个 String 类型的 ArrayList\")]),s._v(\"\\n \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ArrayList\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" stringList \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ArrayList\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Arrays\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"asList\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"hello\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"world\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"!\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 添加元素到 ArrayList 中\")]),s._v(\"\\n stringList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"goodbye\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"stringList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// [hello, world, !, goodbye]\")]),s._v(\"\\n \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 修改 ArrayList 中的元素\")]),s._v(\"\\n stringList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"set\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"hi\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"stringList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// [hi, world, !, goodbye]\")]),s._v(\"\\n \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 删除 ArrayList 中的元素\")]),s._v(\"\\n stringList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"remove\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"stringList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// [world, !, goodbye]\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\")])]),t(\"h3\",{attrs:{id:\"arraylist-和-vector-的区别-了解即可\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#arraylist-和-vector-的区别-了解即可\"}},[s._v(\"#\")]),s._v(\" ArrayList 和 Vector 的区别?（了解即可）\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 是 \"),t(\"code\",[s._v(\"List\")]),s._v(\" 的主要实现类，底层使用 \"),t(\"strong\",[t(\"code\",[s._v(\"Object[]\")]),s._v(\"存储，适用于频繁的查找工作，线程不安全 。\")])]),s._v(\" \"),t(\"li\",[t(\"strong\",[t(\"code\",[s._v(\"Vector\")]),s._v(\" 是 \"),t(\"code\",[s._v(\"List\")]),s._v(\" 的古老实现类，底层使用\"),t(\"code\",[s._v(\"Object[]\")]),s._v(\" 存储，线程安全。\")])])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"vector-和-stack-的区别-了解即可\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vector-和-stack-的区别-了解即可\"}},[s._v(\"#\")]),s._v(\" Vector 和 Stack 的区别?（了解即可）\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"Vector\")]),s._v(\" 和 \"),t(\"code\",[s._v(\"Stack\")]),s._v(\" 两者都是线程安全的，都是使用 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 关键字进行同步处理。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"Stack\")]),s._v(\" 继承自 \"),t(\"code\",[s._v(\"Vector\")]),s._v(\"，是一个后进先出的栈，而 \"),t(\"code\",[s._v(\"Vector\")]),s._v(\" 是一个列表。\")])]),s._v(\" \"),t(\"p\",[s._v(\"随着 Java 并发编程的发展，\"),t(\"code\",[s._v(\"Vector\")]),s._v(\" 和 \"),t(\"code\",[s._v(\"Stack\")]),s._v(\" 已经被淘汰，推荐使用并发集合类（例如 \"),t(\"code\",[s._v(\"ConcurrentHashMap\")]),s._v(\"、\"),t(\"code\",[s._v(\"CopyOnWriteArrayList\")]),s._v(\" 等）或者手动实现线程安全的方法来提供安全的多线程操作支持。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"arraylist-可以添加-null-值吗\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#arraylist-可以添加-null-值吗\"}},[s._v(\"#\")]),s._v(\" ArrayList 可以添加 null 值吗？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 中可以存储任何类型的对象，包括 \"),t(\"code\",[s._v(\"null\")]),s._v(\" 值。不过，不建议向\"),t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 中添加 \"),t(\"code\",[s._v(\"null\")]),s._v(\" 值， \"),t(\"code\",[s._v(\"null\")]),s._v(\" 值无意义，会让代码难以维护比如忘记做判空处理就会导致空指针异常。\")])]),s._v(\" \"),t(\"p\",[s._v(\"示例代码：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ArrayList\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" listOfStrings \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ArrayList\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\nlistOfStrings\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"null\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\nlistOfStrings\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"java\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"listOfStrings\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\")])]),t(\"p\",[s._v(\"输出：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-plain line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-plain\"}},[t(\"code\",[s._v(\"[null, java]\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"h3\",{attrs:{id:\"arraylist-插入和删除元素的时间复杂度\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#arraylist-插入和删除元素的时间复杂度\"}},[s._v(\"#\")]),s._v(\" ArrayList 插入和删除元素的时间复杂度？\")]),s._v(\" \"),t(\"p\",[s._v(\"对于插入：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[s._v(\"头部插入：由于需要将所有元素都依次向后移动一个位置，因此时间复杂度是 O(n)。\")])]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"尾部插入\")]),s._v(\"：当 \"),t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 的容量未达到极限时，往列表末尾插入元素的时间复杂度是 O(1)，因为它只需要在数组末尾添加一个元素即可；当容量已达到极限并且需要扩容时，则需要执行一次 O(n) 的操作将原数组复制到新的更大的数组中，然后再执行 O(1) 的操作添加元素。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"指定位置插入\")]),s._v(\"：需要将目标位置之后的所有元素都向后移动一个位置，然后再把新元素放入指定位置。这个过程需要移动平均 n/2 个元素，因此时间复杂度为 O(n)。\")])]),s._v(\" \"),t(\"p\",[s._v(\"对于删除：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[s._v(\"头部删除\")]),s._v(\"：由于需要将所有元素依次向前移动一个位置，因此时间复杂度是 O(n)。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"尾部删除\")]),s._v(\"：当删除的元素位于列表末尾时，时间复杂度为 O(1)。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"指定位置删除\")]),s._v(\"：需要将目标元素之后的所有元素向前移动一个位置以填补被删除的空白位置，因此需要移动平均 n/2 个元素，时间复杂度为 O(n)。\")])]),s._v(\" \"),t(\"p\",[s._v(\"这里简单列举一个例子：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// ArrayList的底层数组大小为10，此时存储了7个元素\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"4\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"7\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"4\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"7\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"8\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"9\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 在索引为1的位置插入一个元素8，该元素后面的所有元素都要向右移动一位\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"8\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"4\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"7\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"4\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"7\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"8\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"9\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 删除索引为1的位置的元素，该元素后面的所有元素都要向左移动一位\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"4\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"7\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"|\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"--\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"4\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"7\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"8\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"9\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),t(\"br\")])]),t(\"h3\",{attrs:{id:\"linkedlist-插入和删除元素的时间复杂度\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#linkedlist-插入和删除元素的时间复杂度\"}},[s._v(\"#\")]),s._v(\" LinkedList 插入和删除元素的时间复杂度？\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[s._v(\"头部插入/删除：只需要修改头结点的指针即可完成插入/删除操作，因此时间复杂度为 O(1)\")]),s._v(\"。\")]),s._v(\" \"),t(\"li\",[s._v(\"尾部插入/删除：只需要修改尾结点的指针即可完成插入/删除操作，因此时间复杂度为 O(1)。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"指定位置插入/删除：需要先移动到指定位置，再修改指定节点的指针完成插入/删除，因此需要移动平均 n/2 个元素，时间复杂度为 O(n)\")]),s._v(\"。\")])]),s._v(\" \"),t(\"p\",[s._v(\"这里简单列举一个例子：假如我们要删除节点 9 的话，需要先遍历链表找到该节点。然后，再执行相应节点指针指向的更改，具体的源码可以参考：\"),t(\"RouterLink\",{attrs:{to:\"/java/10.javaSE/linkedlist-source-code.html\"}},[s._v(\"LinkedList 源码分析\")]),s._v(\" 。\")],1),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/collection/linkedlist-unlink.jpg\",alt:\"unlink 方法逻辑\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"linkedlist-为什么不能实现-randomaccess-接口\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#linkedlist-为什么不能实现-randomaccess-接口\"}},[s._v(\"#\")]),s._v(\" LinkedList 为什么不能实现 RandomAccess 接口？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[t(\"code\",[s._v(\"RandomAccess\")]),s._v(\" 是一个标记接口，用来表明实现该接口的类支持随机访问（即可以通过索引快速访问元素）。\"),t(\"strong\",[s._v(\"由于 \"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 底层\")]),s._v(\"数据结构是链表，内存地址不连续，只能通过指针来定位，不支持随机快速访问，所以不能实现 \"),t(\"code\",[s._v(\"RandomAccess\")]),s._v(\" 接口。\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"arraylist-与-linkedlist-区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#arraylist-与-linkedlist-区别\"}},[s._v(\"#\")]),s._v(\" ArrayList 与 LinkedList 区别?\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[s._v(\"是否保证线程安全：\")]),s._v(\" \"),t(\"strong\",[t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 和 \"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 都是不同步的，也就是不保证线程安全；\")])]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"底层数据结构：\")]),s._v(\" \"),t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 底层使用的是 \"),t(\"strong\",[t(\"code\",[s._v(\"Object\")]),s._v(\" 数组\")]),s._v(\"；\"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 底层使用的是 \"),t(\"strong\",[s._v(\"双向链表\")]),s._v(\" 数据结构（JDK1.6 之前为循环链表，JDK1.7 取消了循环。注意双向链表和双向循环链表的区别，下面有介绍到！）\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"插入和删除是否受元素位置的影响：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。 比如：执行\"),t(\"code\",[s._v(\"add(E e)\")]),s._v(\"方法的时候， \"),t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是 O(1)。但是如果要在指定位置 i 插入和删除元素的话（\"),t(\"code\",[s._v(\"add(int index, E element)\")]),s._v(\"），时间复杂度就为 O(n)。因为在进行上述操作的时候集合中第 i 和第 i 个元素之后的(n-i)个元素都要执行向后位/向前移一位的操作。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 采用链表存储，所以在头尾插入或者删除元素不受元素位置的影响（\"),t(\"code\",[s._v(\"add(E e)\")]),s._v(\"、\"),t(\"code\",[s._v(\"addFirst(E e)\")]),s._v(\"、\"),t(\"code\",[s._v(\"addLast(E e)\")]),s._v(\"、\"),t(\"code\",[s._v(\"removeFirst()\")]),s._v(\"、 \"),t(\"code\",[s._v(\"removeLast()\")]),s._v(\"），时间复杂度为 O(1)，如果是要在指定位置 \"),t(\"code\",[s._v(\"i\")]),s._v(\" 插入和删除元素的话（\"),t(\"code\",[s._v(\"add(int index, E element)\")]),s._v(\"，\"),t(\"code\",[s._v(\"remove(Object o)\")]),s._v(\",\"),t(\"code\",[s._v(\"remove(int index)\")]),s._v(\"）， 时间复杂度为 O(n) ，因为需要先移动到指定位置再插入和删除。\")])])]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"是否支持快速随机访问：\")]),s._v(\" \"),t(\"strong\",[t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 不支持高效的随机元素访问，而 \"),t(\"code\",[s._v(\"ArrayList\")]),s._v(\"（实现了 \"),t(\"code\",[s._v(\"RandomAccess\")]),s._v(\" 接口） 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于\"),t(\"code\",[s._v(\"get(int index)\")]),s._v(\"方法)。\")])]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"内存空间占用：\")]),s._v(\" \"),t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 的空间浪费主要体现在在 l\"),t(\"strong\",[s._v(\"ist 列表的结尾会预留一定的容量空间，而 LinkedList 的空间花费则体现在它的每一个元素都需要消耗比 ArrayList 更多的空间（因为要存放直接后继和直接前驱以及数据）\")]),s._v(\"。\")])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"我们在项目中一般是不会使用到 \"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 的，需要用到 \"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 的场景几乎都可以使用 \"),t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 来代替，并且，性能通常会更好！就连 \"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 的作者约书亚 · 布洛克（Josh Bloch）自己都说从来不会使用 \"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 。\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/redisimage-20220412110853807.png\",alt:\"\"}})]),s._v(\" \"),t(\"p\",[s._v(\"另外，不要下意识地认为 \"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 作为链表就最适合元素增删的场景。我在上面也说了，\"),t(\"strong\",[t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 仅仅在头尾插入或者删除元素的时候时间复杂度近似 O(1)，其他情况增删元素的平均时间复杂度都是 O(n) 。\")])]),s._v(\" \"),t(\"h4\",{attrs:{id:\"补充内容-双向链表和双向循环链表\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#补充内容-双向链表和双向循环链表\"}},[s._v(\"#\")]),s._v(\" 补充内容: 双向链表和双向循环链表\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"双向链表：\")]),s._v(\" 包含两个指针，一个 prev 指向前一个节点，一个 next 指向后一个节点。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/bidirectional-linkedlist.png\",alt:\"双向链表\"}})]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"双向循环链表：\")]),s._v(\" \"),t(\"strong\",[s._v(\"最后一个节点的 next 指向 head，而 head 的 prev 指向最后一个节点，构成一个环。\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/bidirectional-circular-linkedlist.png\",alt:\"双向循环链表\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"补充内容-randomaccess-接口\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#补充内容-randomaccess-接口\"}},[s._v(\"#\")]),s._v(\" 补充内容:RandomAccess 接口\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"interface\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RandomAccess\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\")])]),t(\"p\",[s._v(\"查看源码我们发现实际上 \"),t(\"code\",[s._v(\"RandomAccess\")]),s._v(\" 接口中什么都没有定义。所以，在我看来 \"),t(\"code\",[s._v(\"RandomAccess\")]),s._v(\" 接口不过是一个标识罢了。标识什么？ 标识实现这个接口的类具有随机访问功能。\")]),s._v(\" \"),t(\"p\",[s._v(\"在 \"),t(\"code\",[s._v(\"binarySearch（)\")]),s._v(\" 方法中，它要判断传入的 list 是否 \"),t(\"code\",[s._v(\"RandomAccess\")]),s._v(\" 的实例，如果是，调用\"),t(\"code\",[s._v(\"indexedBinarySearch()\")]),s._v(\"方法，如果不是，那么调用\"),t(\"code\",[s._v(\"iteratorBinarySearch()\")]),s._v(\"方法\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[s._v(\"    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"T\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"binarySearch\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"List\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"?\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"extends\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Comparable\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"?\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"super\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"T\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" list\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"T\")]),s._v(\" key\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"if\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"list \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"instanceof\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RandomAccess\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"||\")]),s._v(\" list\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"size\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"BINARYSEARCH_THRESHOLD\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Collections\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"indexedBinarySearch\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"list\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" key\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"else\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Collections\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"iteratorBinarySearch\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"list\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" key\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\")])]),t(\"p\",[t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 实现了 \"),t(\"code\",[s._v(\"RandomAccess\")]),s._v(\" 接口， 而 \"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 没有实现。为什么呢？我觉得还是和底层数据结构有关！\"),t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 底层是数组，而 \"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 底层是链表。数组天然支持随机访问，时间复杂度为 O(1)，所以称为快速随机访问。链表需要遍历到特定位置才能访问特定位置的元素，时间复杂度为 O(n)，所以不支持快速随机访问。\"),t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 实现了 \"),t(\"code\",[s._v(\"RandomAccess\")]),s._v(\" 接口，就表明了他具有快速随机访问功能。 \"),t(\"code\",[s._v(\"RandomAccess\")]),s._v(\" 接口只是标识，并不是说 \"),t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 实现 \"),t(\"code\",[s._v(\"RandomAccess\")]),s._v(\" 接口才具有快速随机访问功能的！\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"说一说-arraylist-的扩容机制吧\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#说一说-arraylist-的扩容机制吧\"}},[s._v(\"#\")]),s._v(\" 说一说 ArrayList 的扩容机制吧\")]),s._v(\" \"),t(\"p\",[s._v(\"详见笔主的这篇文章: \"),t(\"a\",{attrs:{href:\"https://javaguide.cn/java/collection/arraylist-source-code.html#_3-1-%E5%85%88%E4%BB%8E-arraylist-%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%AF%B4%E8%B5%B7\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"ArrayList 扩容机制分析\"),t(\"OutboundLink\")],1),s._v(\"。\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"set-2\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#set-2\"}},[s._v(\"#\")]),s._v(\" Set\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"comparable-和-comparator-的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#comparable-和-comparator-的区别\"}},[s._v(\"#\")]),s._v(\" Comparable 和 Comparator 的区别\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"Comparable\")]),s._v(\" 接口和 \"),t(\"code\",[s._v(\"Comparator\")]),s._v(\" 接口都是 Java 中用于排序的接口，它们在实现类对象之间比较大小、排序等方面发挥了重要作用：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[t(\"code\",[s._v(\"Comparable\")]),s._v(\" 接口\")]),s._v(\"实际上是出自\"),t(\"code\",[s._v(\"java.lang\")]),s._v(\"包 它有一个 \"),t(\"strong\",[t(\"code\",[s._v(\"compareTo(Object obj)\")]),s._v(\"方法用来排序\")])]),s._v(\" \"),t(\"li\",[t(\"strong\",[t(\"code\",[s._v(\"Comparator\")]),s._v(\"接口实际上是出自 \"),t(\"code\",[s._v(\"java.util\")])]),s._v(\" 包它有一个\"),t(\"code\",[s._v(\"compare(Object obj1, Object obj2)\")]),s._v(\"方法用来排序\")])]),s._v(\" \"),t(\"p\",[s._v(\"一般我们需要对一个集合使用自定义排序时，**我们就要重写\"),t(\"code\",[s._v(\"compareTo()\")]),s._v(\"方法或\"),t(\"code\",[s._v(\"compare()\")]),s._v(\"方法，当我们需要对某一个集合实现两种排序方式，比如一个 \"),t(\"code\",[s._v(\"song\")]),s._v(\" 对象中的歌名和歌手名分别采用一种排序方法的话，我们可以重写\"),t(\"code\",[s._v(\"compareTo()\")]),s._v(\"方法和使用自制的\"),t(\"code\",[s._v(\"Comparator\")]),s._v(\"方法或者以两个 \"),t(\"code\",[s._v(\"Comparator\")]),s._v(\" 来实现歌名排序和歌星名排序，**第二种代表我们只能使用两个参数版的 \"),t(\"code\",[s._v(\"Collections.sort()\")]),s._v(\".\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"comparator-定制排序\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#comparator-定制排序\"}},[s._v(\"#\")]),s._v(\" Comparator 定制排序\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ArrayList\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Integer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" arrayList \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ArrayList\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Integer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\narrayList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\narrayList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\narrayList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\narrayList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\narrayList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"7\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\narrayList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"4\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\narrayList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"9\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\narrayList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"7\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"原始数组:\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"arrayList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// void reverse(List list)：反转\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Collections\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"reverse\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"arrayList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"Collections.reverse(arrayList):\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"arrayList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// void sort(List list),按自然排序的升序排序\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Collections\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"sort\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"arrayList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"Collections.sort(arrayList):\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"arrayList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 定制排序的用法\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Collections\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"sort\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"arrayList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Comparator\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Integer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@Override\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"compare\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Integer\")]),s._v(\" o1\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Integer\")]),s._v(\" o2\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" o2\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"compareTo\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"o1\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"定制排序后：\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"arrayList\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),t(\"br\")])]),t(\"p\",[s._v(\"Output:\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-plain line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-plain\"}},[t(\"code\",[s._v(\"原始数组:\\n[-1, 3, 3, -5, 7, 4, -9, -7]\\nCollections.reverse(arrayList):\\n[-7, -9, 4, 7, -5, 3, 3, -1]\\nCollections.sort(arrayList):\\n[-9, -7, -5, -1, 3, 3, 4, 7]\\n定制排序后：\\n[7, 4, 3, 3, -1, -5, -7, -9]\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\")])]),t(\"h4\",{attrs:{id:\"重写-compareto-方法实现按年龄来排序\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#重写-compareto-方法实现按年龄来排序\"}},[s._v(\"#\")]),s._v(\" 重写 compareTo 方法实现按年龄来排序\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// person对象没有实现Comparable接口，所以必须实现，这样才不会出错，才可以使treemap中的数据按顺序排列\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 前面一个例子的String类已经默认实现了Comparable接口，详细可以查看String类的API文档，另外其他\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 像Integer类等都已经实现了Comparable接口，所以不需要另外实现了\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\"  \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Person\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"implements\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Comparable\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Person\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),s._v(\" name\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" age\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Person\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),s._v(\" name\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" age\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"super\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"this\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"name \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" name\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"this\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"age \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" age\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getName\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" name\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"setName\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),s._v(\" name\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"this\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"name \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" name\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getAge\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" age\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"setAge\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" age\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"this\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"age \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" age\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/**\\n     * T重写compareTo方法实现按年龄来排序\\n     */\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@Override\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"compareTo\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Person\")]),s._v(\" o\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"if\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"this\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"age \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" o\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getAge\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"if\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"this\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"age \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\" o\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getAge\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"30\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"31\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"32\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"33\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"34\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"35\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"36\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"37\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"38\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"39\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"40\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"41\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"42\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"43\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"44\")]),t(\"br\")])]),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[s._v(\"    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"main\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" args\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"TreeMap\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Person\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" pdata \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"TreeMap\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Person\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        pdata\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"put\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Person\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"张三\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"30\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"zhangsan\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        pdata\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"put\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Person\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"李四\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"20\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"lisi\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        pdata\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"put\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Person\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"王五\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"wangwu\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        pdata\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"put\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Person\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"小红\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"xiaohong\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 得到key的值的同时得到key所对应的值\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Set\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Person\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" keys \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" pdata\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"keySet\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"for\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Person\")]),s._v(\" key \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\":\")]),s._v(\" keys\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"key\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getAge\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"-\"')]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" key\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getName\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\")])]),t(\"p\",[s._v(\"Output：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-plain line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-plain\"}},[t(\"code\",[s._v(\"5-小红\\n10-王五\\n20-李四\\n30-张三\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\")])]),t(\"h3\",{attrs:{id:\"无序性和不可重复性的含义是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#无序性和不可重复性的含义是什么\"}},[s._v(\"#\")]),s._v(\" 无序性和不可重复性的含义是什么\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"无序性不等于随机性 ，无序性是指存储的数据在底层数组中并非按照数组索引的顺序添加 ，而是根据数据的哈希值决定的。\")]),s._v(\" \"),t(\"li\",[s._v(\"不可重复性是指添加的元素按照 \"),t(\"code\",[s._v(\"equals()\")]),s._v(\" 判断时 ，返回 false，需要同时重写 \"),t(\"code\",[s._v(\"equals()\")]),s._v(\" 方法和 \"),t(\"code\",[s._v(\"hashCode()\")]),s._v(\" 方法。\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"比较-hashset、linkedhashset-和-treeset-三者的异同\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#比较-hashset、linkedhashset-和-treeset-三者的异同\"}},[s._v(\"#\")]),s._v(\" 比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"HashSet\")]),s._v(\"、\"),t(\"code\",[s._v(\"LinkedHashSet\")]),s._v(\" 和 \"),t(\"code\",[s._v(\"TreeSet\")]),s._v(\" \"),t(\"strong\",[s._v(\"都是 \"),t(\"code\",[s._v(\"Set\")]),s._v(\" 接口的实现类，都能保证元素唯一，并且都不是线程安全的。\")])]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"HashSet\")]),s._v(\"、\"),t(\"code\",[s._v(\"LinkedHashSet\")]),s._v(\" 和 \"),t(\"code\",[s._v(\"TreeSet\")]),s._v(\" 的主要区别在于底层数据结构不同。\"),t(\"strong\",[t(\"code\",[s._v(\"HashSet\")]),s._v(\" 的底层数据结构是哈希表（基于 \"),t(\"code\",[s._v(\"HashMap\")]),s._v(\" 实现）。\"),t(\"code\",[s._v(\"LinkedHashSet\")]),s._v(\" 的底层数据结构是链表和哈希表，元素的插入和取出顺序满足 FIFO。\"),t(\"code\",[s._v(\"TreeSet\")]),s._v(\" 底层数据结构是红黑树，元素是有序的，排序的方式有自然排序和定制排序。\")])]),s._v(\" \"),t(\"li\",[s._v(\"底层数据结构不同又导致这三者的应用场景不同。\"),t(\"code\",[s._v(\"HashSet\")]),s._v(\" 用于不需要保证元素插入和取出顺序的场景，\"),t(\"code\",[s._v(\"LinkedHashSet\")]),s._v(\" 用于保证元素的插入和取出顺序满足 FIFO 的场景，\"),t(\"code\",[s._v(\"TreeSet\")]),s._v(\" 用于支持对元素自定义排序规则的场景。\")])]),s._v(\" \"),t(\"h2\",{attrs:{id:\"queue-2\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#queue-2\"}},[s._v(\"#\")]),s._v(\" Queue\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"queue-与-deque-的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#queue-与-deque-的区别\"}},[s._v(\"#\")]),s._v(\" Queue 与 Deque 的区别\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"Queue\")]),s._v(\" 是单端队列，只能从一端插入元素，另一端删除元素，实现上一般遵循 \"),t(\"strong\",[s._v(\"先进先出（FIFO）\")]),s._v(\" 规则。\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"Queue\")]),s._v(\" 扩展了 \"),t(\"code\",[s._v(\"Collection\")]),s._v(\" 的接口，根据 \"),t(\"strong\",[s._v(\"因为容量问题而导致操作失败后处理方式的不同\")]),s._v(\" 可以分为两类方法**: 一种在操作失败后会抛出异常，另一种则会返回特殊值。**\")]),s._v(\" \"),t(\"table\",[t(\"thead\",[t(\"tr\",[t(\"th\",[t(\"code\",[s._v(\"Queue\")]),s._v(\" 接口\")]),s._v(\" \"),t(\"th\",[s._v(\"抛出异常\")]),s._v(\" \"),t(\"th\",[s._v(\"返回特殊值\")])])]),s._v(\" \"),t(\"tbody\",[t(\"tr\",[t(\"td\",[s._v(\"插入队尾\")]),s._v(\" \"),t(\"td\",[s._v(\"add(E e)\")]),s._v(\" \"),t(\"td\",[s._v(\"offer(E e)\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"删除队首\")]),s._v(\" \"),t(\"td\",[s._v(\"remove()\")]),s._v(\" \"),t(\"td\",[s._v(\"poll()\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"查询队首元素\")]),s._v(\" \"),t(\"td\",[s._v(\"element()\")]),s._v(\" \"),t(\"td\",[s._v(\"peek()\")])])])]),s._v(\" \"),t(\"p\",[t(\"strong\",[t(\"code\",[s._v(\"Deque\")]),s._v(\" 是双端队列，在队列的两端均可以插入或删除元素。\")])]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"Deque\")]),s._v(\" 扩展了 \"),t(\"code\",[s._v(\"Queue\")]),s._v(\" 的接口, 增加了在队首和队尾进行插入和删除的方法，同样根据失败后处理方式的不同分为两类：\")]),s._v(\" \"),t(\"table\",[t(\"thead\",[t(\"tr\",[t(\"th\",[t(\"code\",[s._v(\"Deque\")]),s._v(\" 接口\")]),s._v(\" \"),t(\"th\",[s._v(\"抛出异常\")]),s._v(\" \"),t(\"th\",[s._v(\"返回特殊值\")])])]),s._v(\" \"),t(\"tbody\",[t(\"tr\",[t(\"td\",[s._v(\"插入队首\")]),s._v(\" \"),t(\"td\",[s._v(\"addFirst(E e)\")]),s._v(\" \"),t(\"td\",[s._v(\"offerFirst(E e)\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"插入队尾\")]),s._v(\" \"),t(\"td\",[s._v(\"addLast(E e)\")]),s._v(\" \"),t(\"td\",[s._v(\"offerLast(E e)\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"删除队首\")]),s._v(\" \"),t(\"td\",[s._v(\"removeFirst()\")]),s._v(\" \"),t(\"td\",[s._v(\"pollFirst()\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"删除队尾\")]),s._v(\" \"),t(\"td\",[s._v(\"removeLast()\")]),s._v(\" \"),t(\"td\",[s._v(\"pollLast()\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"查询队首元素\")]),s._v(\" \"),t(\"td\",[s._v(\"getFirst()\")]),s._v(\" \"),t(\"td\",[s._v(\"peekFirst()\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"查询队尾元素\")]),s._v(\" \"),t(\"td\",[s._v(\"getLast()\")]),s._v(\" \"),t(\"td\",[s._v(\"peekLast()\")])])])]),s._v(\" \"),t(\"p\",[s._v(\"事实上，\"),t(\"code\",[s._v(\"Deque\")]),s._v(\" 还提供有 \"),t(\"code\",[s._v(\"push()\")]),s._v(\" 和 \"),t(\"code\",[s._v(\"pop()\")]),s._v(\" 等其他方法，可用于模拟栈。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"arraydeque-与-linkedlist-的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#arraydeque-与-linkedlist-的区别\"}},[s._v(\"#\")]),s._v(\" ArrayDeque 与 LinkedList 的区别\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"ArrayDeque\")]),s._v(\" 和 \"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 都实现了 \"),t(\"code\",[s._v(\"Deque\")]),s._v(\" 接口，两者都具有队列的功能，但两者有什么区别呢？\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[t(\"code\",[s._v(\"ArrayDeque\")]),s._v(\" 是基于\"),t(\"strong\",[s._v(\"可变长的数组和双指针来实现，而 \"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 则通过链表来实现。\")])])]),s._v(\" \"),t(\"li\",[t(\"p\",[t(\"code\",[s._v(\"ArrayDeque\")]),s._v(\" \"),t(\"strong\",[s._v(\"不支持存储 \"),t(\"code\",[s._v(\"NULL\")]),s._v(\" 数据，但 \"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 支持。\")])])]),s._v(\" \"),t(\"li\",[t(\"p\",[t(\"code\",[s._v(\"ArrayDeque\")]),s._v(\" 是在 JDK1.6 才被引入的，而\"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 早在 JDK1.2 时就已经存在。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[t(\"code\",[s._v(\"ArrayDeque\")]),s._v(\" 插入时可能存在扩容过程, 不过均摊后的插入操作依然为 O(1)。虽然 \"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 不需要扩容，但是每次插入数据时均需要申请新的堆空间，均摊性能相比更慢。\")])])]),s._v(\" \"),t(\"p\",[s._v(\"从性能的角度上，选用 \"),t(\"code\",[s._v(\"ArrayDeque\")]),s._v(\" 来实现队列要比 \"),t(\"code\",[s._v(\"LinkedList\")]),s._v(\" 更好。此外，\"),t(\"code\",[s._v(\"ArrayDeque\")]),s._v(\" 也可以用于实现栈。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"说一说-priorityqueue\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#说一说-priorityqueue\"}},[s._v(\"#\")]),s._v(\" 说一说 PriorityQueue\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"PriorityQueue\")]),s._v(\" 是在 JDK1.5 中被引入的, 其与 \"),t(\"code\",[s._v(\"Queue\")]),s._v(\" 的区别在于\"),t(\"strong\",[s._v(\"元素出队顺序是与优先级相关的，即总是优先级最高的元素先出队。\")])]),s._v(\" \"),t(\"p\",[s._v(\"这里列举其相关的一些要点：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"PriorityQueue\")]),s._v(\" 利用了\"),t(\"strong\",[s._v(\"二叉堆的数据结构来实现的，底层使用可变长的数组来存储数据\")])]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"PriorityQueue\")]),s._v(\" 通过堆元素的上浮和下沉，实现了在 O(logn) 的时间复杂度内插入元素和删除堆顶元素。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"PriorityQueue\")]),s._v(\" 是非线程安全的，且不支持存储 \"),t(\"code\",[s._v(\"NULL\")]),s._v(\" 和 \"),t(\"code\",[s._v(\"non-comparable\")]),s._v(\" 的对象。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"PriorityQueue\")]),s._v(\" 默认是小顶堆，但可以接收一个 \"),t(\"code\",[s._v(\"Comparator\")]),s._v(\" 作为构造参数，从而来自定义元素优先级的先后。\")])]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"PriorityQueue\")]),s._v(\" 在面试中可能更多的会出现在手撕算法的时候，典型例题包括堆排序、求第 K 大的数、带权图的遍历等，所以需要会熟练使用才行。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"什么是-blockingqueue\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是-blockingqueue\"}},[s._v(\"#\")]),s._v(\" 什么是 BlockingQueue？\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"BlockingQueue\")]),s._v(\" （阻塞队列）是一个接口，继承自 \"),t(\"code\",[s._v(\"Queue\")]),s._v(\"。\"),t(\"code\",[s._v(\"BlockingQueue\")]),s._v(\"阻塞的原因是其支持\"),t(\"strong\",[s._v(\"当队列没有元素时一直阻塞，直到有元素；还支持如果队列已满，一直等到队列可以放入新元素时再放入。\")])]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"interface\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"BlockingQueue\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"E\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"extends\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Queue\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"E\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// ...\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\")])]),t(\"p\",[t(\"strong\",[t(\"code\",[s._v(\"BlockingQueue\")]),s._v(\" 常用于生产者-消费者模型中，生产者线程会向队列中添加数据，而消费者线程会从队列中取出数据进行处理。\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/collection/blocking-queue.png\",alt:\"BlockingQueue\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"blockingqueue-的实现类有哪些\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#blockingqueue-的实现类有哪些\"}},[s._v(\"#\")]),s._v(\" BlockingQueue 的实现类有哪些？\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/collection/blocking-queue-hierarchy.png\",alt:\"BlockingQueue 的实现类\"}})]),s._v(\" \"),t(\"p\",[s._v(\"Java 中常用的阻塞队列实现类有以下几种：\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[t(\"strong\",[t(\"code\",[s._v(\"ArrayBlockingQueue\")]),s._v(\"：使用数组实现的有界阻塞队列。在创建时需要指定容量大小，并支持公平和非公平两种方式的锁访问机制。\")])]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"LinkedBlockingQueue\")]),s._v(\"：使用单向链表实现的可选有界阻塞队列。在创建时可以指定容量大小，如果不指定则默认为\"),t(\"code\",[s._v(\"Integer.MAX_VALUE\")]),s._v(\"。和\"),t(\"code\",[s._v(\"ArrayBlockingQueue\")]),s._v(\"类似， 它也支持公平和非公平的锁访问机制。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[t(\"code\",[s._v(\"PriorityBlockingQueue\")]),s._v(\"：支持优先级排序的无界阻塞队列\")]),s._v(\"。元素必须实现\"),t(\"code\",[s._v(\"Comparable\")]),s._v(\"接口或者在构造函数中传入\"),t(\"code\",[s._v(\"Comparator\")]),s._v(\"对象，并且不能插入 null 元素。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"SynchronousQueue\")]),s._v(\"：同步队列，是一种不存储元素的阻塞队列。每个插入操作都必须等待对应的删除操作，反之删除操作也必须等待插入操作。因此，\"),t(\"code\",[s._v(\"SynchronousQueue\")]),s._v(\"通常用于线程之间的直接传递数据。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"D**elayQueue\")]),s._v(\"：延迟队列，其中的元素只有到了其指定的延迟时间，才能够从队列中出队。**\")]),s._v(\" \"),t(\"li\",[s._v(\"……\")])]),s._v(\" \"),t(\"p\",[s._v(\"日常开发中，这些队列使用的其实都不多，了解即可。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"arrayblockingqueue-和-linkedblockingqueue-有什么区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#arrayblockingqueue-和-linkedblockingqueue-有什么区别\"}},[s._v(\"#\")]),s._v(\" ArrayBlockingQueue 和 LinkedBlockingQueue 有什么区别？\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"ArrayBlockingQueue\")]),s._v(\" 和 \"),t(\"code\",[s._v(\"LinkedBlockingQueue\")]),s._v(\" 是 Java 并发包中常用的两种阻塞队列实现，它们都是线程安全的。不过，不过它们之间也存在下面这些区别：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"底层实现：\"),t(\"code\",[s._v(\"ArrayBlockingQueue\")]),s._v(\" 基于数组实现，而 \"),t(\"code\",[s._v(\"LinkedBlockingQueue\")]),s._v(\" 基于链表实现。\")]),s._v(\" \"),t(\"li\",[s._v(\"是否有界：\"),t(\"code\",[s._v(\"ArrayBlockingQueue\")]),s._v(\" 是有界队列，必须在创建时指定容量大小。\"),t(\"code\",[s._v(\"LinkedBlockingQueue\")]),s._v(\" 创建时可以不指定容量大小，默认是\"),t(\"code\",[s._v(\"Integer.MAX_VALUE\")]),s._v(\"，也就是无界的。但也可以指定队列大小，从而成为有界的。\")]),s._v(\" \"),t(\"li\",[s._v(\"锁是否分离： \"),t(\"code\",[s._v(\"ArrayBlockingQueue\")]),s._v(\"中的锁是没有分离的，即生产和消费用的是同一个锁；\"),t(\"code\",[s._v(\"LinkedBlockingQueue\")]),s._v(\"中的锁是分离的，即生产用的是\"),t(\"code\",[s._v(\"putLock\")]),s._v(\"，消费是\"),t(\"code\",[s._v(\"takeLock\")]),s._v(\"，这样可以防止生产者和消费者线程之间的锁争夺。\")]),s._v(\" \"),t(\"li\",[s._v(\"内存占用：\"),t(\"code\",[s._v(\"ArrayBlockingQueue\")]),s._v(\" 需要提前分配数组内存，而 \"),t(\"code\",[s._v(\"LinkedBlockingQueue\")]),s._v(\" 则是动态分配链表节点内存。这意味着，\"),t(\"code\",[s._v(\"ArrayBlockingQueue\")]),s._v(\" 在创建时就会占用一定的内存空间，且往往申请的内存比实际所用的内存更大，而\"),t(\"code\",[s._v(\"LinkedBlockingQueue\")]),s._v(\" 则是根据元素的增加而逐渐占用内存空间。\")])])])}),[],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}