{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{389:function(t,s,a){\"use strict\";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h2\",{attrs:{id:\"什么是线程和进程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是线程和进程\"}},[t._v(\"#\")]),t._v(\" 什么是线程和进程?\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"何为进程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#何为进程\"}},[t._v(\"#\")]),t._v(\" 何为进程?\")]),t._v(\" \"),s(\"p\",[t._v(\"进程是程序的一次执行过程，是系统运行程序的基本单位，\"),s(\"strong\",[t._v(\"因此进程是动态的\")]),t._v(\"。系统运行一个程序即是一个进程从创建，运行到消亡的过程。\")]),t._v(\" \"),s(\"p\",[t._v(\"在 Java 中，\"),s(\"strong\",[t._v(\"当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。\")])]),t._v(\" \"),s(\"p\",[t._v(\"如下图所示，在 Windows 中通过查看任务管理器的方式，我们就可以清楚看到 Windows 当前运行的进程（\"),s(\"code\",[t._v(\".exe\")]),t._v(\" 文件的运行）。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20240409220721482.png\",alt:\"image-20240409220721482\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"何为线程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#何为线程\"}},[t._v(\"#\")]),t._v(\" 何为线程?\")]),t._v(\" \"),s(\"p\",[t._v(\"线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享进程的\"),s(\"strong\",[t._v(\"堆\")]),t._v(\"和\"),s(\"strong\",[t._v(\"方法区\")]),t._v(\"资源，但每个线程有自己的\"),s(\"strong\",[t._v(\"程序计数器\")]),t._v(\"、\"),s(\"strong\",[t._v(\"虚拟机栈\")]),t._v(\"和\"),s(\"strong\",[t._v(\"本地方法栈\")]),t._v(\"，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"Java 程序天生就是多线程程序\")]),t._v(\"，我们可以通过 JMX 来看看一个普通的 Java 程序有哪些线程，代码如下。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"MultiThread\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" args\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 获取 Java 线程管理 MXBean\")]),t._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadMXBean\")]),t._v(\" threadMXBean \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ManagementFactory\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getThreadMXBean\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 不需要获取同步的 monitor 和 synchronizer 信息，仅获取线程和线程堆栈信息\")]),t._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadInfo\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" threadInfos \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" threadMXBean\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"dumpAllThreads\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"false\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"false\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 遍历线程信息，仅打印线程 ID 和线程名称信息\")]),t._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadInfo\")]),t._v(\" threadInfo \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" threadInfos\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"[\"')]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" threadInfo\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getThreadId\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"] \"')]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" threadInfo\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getThreadName\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\")])]),s(\"p\",[t._v(\"上述程序输出如下（输出内容可能不同，不用太纠结下面每个线程的作用，只用知道 main 线程执行 main 方法即可）：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-plain line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-plain\"}},[s(\"code\",[t._v(\"[5] Attach Listener //添加事件\\n[4] Signal Dispatcher // 分发处理给 JVM 信号的线程\\n[3] Finalizer //调用对象 finalize 方法的线程\\n[2] Reference Handler //清除 reference 线程\\n[1] main //main 线程,程序入口\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\")])]),s(\"p\",[t._v(\"从上面的输出内容可以看出：\"),s(\"strong\",[t._v(\"一个 Java 程序的运行是 main 线程和多个其他线程同时运行\")]),t._v(\"。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"java-线程和操作系统的线程有啥区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java-线程和操作系统的线程有啥区别\"}},[t._v(\"#\")]),t._v(\" Java 线程和操作系统的线程有啥区别？\")]),t._v(\" \"),s(\"p\",[t._v(\"JDK 1.2 之前，\"),s(\"strong\",[t._v(\"Java 线程是基于绿色线程（Green Threads）实现的，这是一种用户级线程（用户线程）\")]),t._v(\"，也就是说 JVM 自己模拟了多线程的运行，而不依赖于操作系统。由于绿色线程和原生线程比起来在使用时有一些限制（比如绿色线程不能直接使用操作系统提供的功能如异步 I/O、只能在一个内核线程上运行无法利用多核），在 JDK 1.2 及以后，Java 线程改为基于原生线程（Native Threads）实现，也就是说 \"),s(\"strong\",[t._v(\"JVM 直接使用操作系统原生的内核级线程（内核线程）来实现 Java 线程，由操作系统内核进行线程的调度和管理。\")])]),t._v(\" \"),s(\"p\",[t._v(\"我们上面提到了用户线程和内核线程，考虑到很多读者不太了解二者的区别，这里简单介绍一下：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"用户线程：由用户空间程序管理和调度的线程，运行在用户空间（专门给应用程序使用）。\")]),t._v(\" \"),s(\"li\",[t._v(\"内核线程：由操作系统内核管理和调度的线程，运行在内核空间（只有内核程序可以访问）。\")])]),t._v(\" \"),s(\"p\",[t._v(\"顺便简单总结一下用户线程和内核线程的区别和特点：用户线程创建和切换成本低，但不可以利用多核。内核态线程，创建和切换成本高，可以利用多核。\")]),t._v(\" \"),s(\"p\",[t._v(\"一句话概括 Java 线程和操作系统线程的关系：\"),s(\"strong\",[t._v(\"现在的 Java 线程的本质其实就是操作系统的线程\")]),t._v(\"。\")]),t._v(\" \"),s(\"p\",[t._v(\"线程模型是用户线程和内核线程之间的关联方式，常见的线程模型有这三种：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"一对一（一个用户线程对应一个内核线程）\")]),t._v(\" \"),s(\"li\",[t._v(\"多对一（多个用户线程映射到一个内核线程）\")]),t._v(\" \"),s(\"li\",[t._v(\"多对多（多个用户线程映射到多个内核线程）\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/three-types-of-thread-models.png\",alt:\"常见的三种线程模型\"}})]),t._v(\" \"),s(\"p\",[t._v(\"在 Windows 和 Linux 等主流操作系统中，**Java 线程采用的是一对一的线程模型，也就是一个 Java 线程对应一个系统内核线程。**Solaris 系统是一个特例（Solaris 系统本身就支持多对多的线程模型），HotSpot VM 在 Solaris 上支持多对多和一对一。具体可以参考 R 大的回答: \"),s(\"a\",{attrs:{href:\"https://www.zhihu.com/question/23096638/answer/29617153\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"JVM 中的线程模型是用户级的么？\"),s(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),s(\"p\",[t._v(\"虚拟线程在 JDK 21 顺利转正，关于虚拟线程、平台线程（也就是我们上面提到的 Java 线程）和内核线程三者的关系可以阅读我写的这篇文章：\"),s(\"RouterLink\",{attrs:{to:\"/java/new-features/java20.html\"}},[t._v(\"Java 20 新特性概览\")]),t._v(\"。\")],1),t._v(\" \"),s(\"h2\",{attrs:{id:\"请简要描述线程与进程的关系-区别及优缺点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#请简要描述线程与进程的关系-区别及优缺点\"}},[t._v(\"#\")]),t._v(\" 请简要描述线程与进程的关系,区别及优缺点？\")]),t._v(\" \"),s(\"p\",[t._v(\"从 JVM 角度说进程和线程之间的关系。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"图解进程和线程的关系\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#图解进程和线程的关系\"}},[t._v(\"#\")]),t._v(\" 图解进程和线程的关系\")]),t._v(\" \"),s(\"p\",[t._v(\"下图是 Java 内存区域，通过下图我们从 JVM 的角度来说一下线程和进程之间的关系。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/java-runtime-data-areas-jdk1.8.png\",alt:\"Java 运行时数据区域（JDK1.8 之后）\"}})]),t._v(\" \"),s(\"p\",[t._v(\"从上图可以看出：一个进程中可以有多个线程，多个线程共享进程的\"),s(\"strong\",[t._v(\"堆\")]),t._v(\"和\"),s(\"strong\",[t._v(\"方法区 (JDK1.8 之后的元空间)\"),s(\"strong\",[t._v(\"资源，但是每个线程有自己的\")]),t._v(\"程序计数器\")]),t._v(\"、\"),s(\"strong\",[t._v(\"虚拟机栈\")]),t._v(\" 和 \"),s(\"strong\",[t._v(\"本地方法栈\")]),t._v(\"。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"总结：\")]),t._v(\" \"),s(\"strong\",[t._v(\"线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正相反。\")])]),t._v(\" \"),s(\"p\",[t._v(\"下面是该知识点的扩展内容！\")]),t._v(\" \"),s(\"p\",[t._v(\"下面来思考这样一个问题：为什么\"),s(\"strong\",[t._v(\"程序计数器\")]),t._v(\"、\"),s(\"strong\",[t._v(\"虚拟机栈\")]),t._v(\"和\"),s(\"strong\",[t._v(\"本地方法栈\")]),t._v(\"是线程私有的呢？为什么堆和方法区是线程共享的呢？\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"程序计数器为什么是私有的\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#程序计数器为什么是私有的\"}},[t._v(\"#\")]),t._v(\" 程序计数器为什么是私有的?\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"程序计数器主要有下面两个作用：\")])]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"strong\",[t._v(\"字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。\")])]),t._v(\" \"),s(\"li\",[t._v(\"在多线程的情况下，\"),s(\"strong\",[t._v(\"程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。\")])])]),t._v(\" \"),s(\"p\",[t._v(\"需要注意的是，如果执行的是 na\"),s(\"strong\",[t._v(\"tive 方法，那么程序计数器记录的是 undefined 地址，只有执行的是 Java 代码时程序计数器记录的才是下一条指令的地址。\")])]),t._v(\" \"),s(\"p\",[t._v(\"所以，程序计数器私有主要是为了\"),s(\"strong\",[t._v(\"线程切换后能恢复到正确的执行位置\")]),t._v(\"。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"虚拟机栈和本地方法栈为什么是私有的\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#虚拟机栈和本地方法栈为什么是私有的\"}},[t._v(\"#\")]),t._v(\" 虚拟机栈和本地方法栈为什么是私有的?\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"虚拟机栈：\")]),t._v(\" 每个 \"),s(\"strong\",[t._v(\"Java 方法在执行之前会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息\")]),t._v(\"。从方法调用直至执行完成的过程，\"),s(\"strong\",[t._v(\"就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"本地方法栈：\")]),t._v(\" 和虚拟机栈所发挥的作用非常相似，区别是：\"),s(\"strong\",[t._v(\"虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。\")]),t._v(\" 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。\")])]),t._v(\" \"),s(\"p\",[t._v(\"所以，为了\"),s(\"strong\",[t._v(\"保证线程中的局部变量不被别的线程访问到\")]),t._v(\"，虚拟机栈和本地方法栈是线程私有的。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"一句话简单了解堆和方法区\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一句话简单了解堆和方法区\"}},[t._v(\"#\")]),t._v(\" 一句话简单了解堆和方法区\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"堆和方法区是所有线程共享的资源，其中堆是进程中最大的一块内存，主要用于存放新创建的对象 (几乎所有对象都在这里分配内存)，方法区主要用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"并发与并行的区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#并发与并行的区别\"}},[t._v(\"#\")]),t._v(\" 并发与并行的区别\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"并发\")]),t._v(\"：两个及两个以上的作业在同一 \"),s(\"strong\",[t._v(\"时间段\")]),t._v(\" 内执行。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"并行\")]),t._v(\"：两个及两个以上的作业在同一 \"),s(\"strong\",[t._v(\"时刻\")]),t._v(\" 执行。\")])]),t._v(\" \"),s(\"p\",[t._v(\"最关键的点是：是否是 \"),s(\"strong\",[t._v(\"同时\")]),t._v(\" 执行。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"同步和异步的区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#同步和异步的区别\"}},[t._v(\"#\")]),t._v(\" 同步和异步的区别\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"同步\")]),t._v(\"：发出一个调用之后，在没有得到结果之前， 该调用就不可以返回，一直等待。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"异步\")]),t._v(\"：\"),s(\"strong\",[t._v(\"调用在发出之后，不用等待返回结果，该调用直接返回。\")])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"为什么要使用多线程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要使用多线程\"}},[t._v(\"#\")]),t._v(\" 为什么要使用多线程?\")]),t._v(\" \"),s(\"p\",[t._v(\"先从总体上来说：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"从计算机底层来说：\")]),t._v(\" 线程可以比作是轻量级的进程，\"),s(\"strong\",[t._v(\"是程序执行的最小单位\")]),t._v(\",线程间的切换和调度的成本远远小于进程。另外，多核 CPU 时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"从当代互联网发展趋势来说：\")]),t._v(\" 现在的系统动不动就要求百万级甚至千万级的并发量，而多线程并发编程正是开发高并发系统的基础，利用好多线程机制可以大大提高系统整体的并发能力以及性能。\")])]),t._v(\" \"),s(\"p\",[t._v(\"再深入到计算机底层来探讨：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"单核时代\")]),t._v(\"：在单核时代多线程主要是为了提高单进程利用 CPU 和 IO 系统的效率。 假设只运行了一个 Java 进程的情况，当我们请求 IO 的时候，如果 Java 进程中只有一个线程，此线程被 IO 阻塞则整个进程被阻塞。CPU 和 IO 设备只有一个在运行，那么可以简单地说系统整体效率只有 50%。当使用多线程的时候，一个线程被 IO 阻塞，其他线程还可以继续使用 CPU。从而提高了 Java 进程利用系统资源的整体效率。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"多核时代\")]),t._v(\": 多核时代多线程主要是为了提高进程利用多核 CPU 的能力。举个例子：假如我们要计算一个复杂的任务，我们只用一个线程的话，不论系统有几个 CPU 核心，都只会有一个 CPU 核心被利用到。而创建多个线程，这些线程可以被映射到底层多个 CPU 上执行，在任务中的多个线程没有资源竞争的情况下，任务执行的效率会有显著性的提高，约等于（单核时执行时间/CPU 核心数）。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"使用多线程可能带来什么问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用多线程可能带来什么问题\"}},[t._v(\"#\")]),t._v(\" 使用多线程可能带来什么问题?\")]),t._v(\" \"),s(\"p\",[t._v(\"并发编程的目的就是为了能提高程序的执行效率提高程序运行速度，但是并发编程并不总是能提高程序运行速度的，而且并发编程可能会遇到很多问题，\"),s(\"strong\",[t._v(\"比如：内存泄漏、死锁、线程不安全等等。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"如何理解线程安全和不安全\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何理解线程安全和不安全\"}},[t._v(\"#\")]),t._v(\" 如何理解线程安全和不安全？\")]),t._v(\" \"),s(\"p\",[t._v(\"线程安全和不安全是在多线程环境下\"),s(\"strong\",[t._v(\"对于同一份数据的访问是否能够保证其正确性和一致性的描述。\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"线程安全指的是在多线程环境下，对于同一份数据，不管有多少个线程同时访问，都能保证这份数据的正确性和一致性。\")]),t._v(\" \"),s(\"li\",[t._v(\"线程不安全则表示在多线程环境下，对于同一份数据，多个线程同时访问时可能会导致数据混乱、错误或者丢失。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"单核-cpu-上运行多个线程效率一定会高吗\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#单核-cpu-上运行多个线程效率一定会高吗\"}},[t._v(\"#\")]),t._v(\" 单核 CPU 上运行多个线程效率一定会高吗？\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"单核 CPU 同时运行多个线程的效率是否会高，取决于线程的类型和任务的性质。一般来说，有两种类型的线程：CPU 密集型和 IO 密集\")]),t._v(\"型。CPU 密集型的线程主要进行计算和逻辑处理，需要占用大量的 CPU 资源。IO 密集型的线程主要进行输入输出操作，如读写文件、网络通信等，需要等待 IO 设备的响应，而不占用太多的 CPU 资源。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"在单核 CPU 上，同一时刻只能有一个线程在运行\")]),t._v(\"，其他线程需要等待 CPU 的时间片分配。如果线程是 \"),s(\"strong\",[t._v(\"CPU 密集型的，那么多个线程同时运行会导致频繁的线程切换，增加了系统的开销，降低了效率。如果线程是 IO 密集型的，那么多个线程同时运行可以利用 CPU 在等待 IO 时的空闲时间，提高了效率。\")])]),t._v(\" \"),s(\"p\",[t._v(\"因此，对于单核 CPU 来说，如果任务是 CPU 密集型的，那么开很多线程会影响效率；如果任务是 IO 密集型的，那么开很多线程会提高效率。当然，这里的“很多”也要适度，不能超过系统能够承受的上限。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"说说线程的生命周期和状态\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#说说线程的生命周期和状态\"}},[t._v(\"#\")]),t._v(\" 说说线程的生命周期和状态?\")]),t._v(\" \"),s(\"p\",[t._v(\"Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"NEW: 初始状态，\"),s(\"strong\",[t._v(\"线程被创建出来但没有被调用 \"),s(\"code\",[t._v(\"start()\")]),t._v(\" 。\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"RUNNABLE: 运行状态，线程被调用了 \"),s(\"code\",[t._v(\"start()\")]),t._v(\"等待运行的状态。\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"BLOCKED：阻塞状态，需要等待锁释放。\")])]),t._v(\" \"),s(\"li\",[t._v(\"WAITING：\"),s(\"strong\",[t._v(\"等待状态，表示该线程需要等待其他线程做出一些特定动作（通知或中断）。\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"TIME_WAITING：超时等待状态\")]),t._v(\"，可以在指定的时间后自行返回而不是像 WAITING 那样一直等待。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"TERMINATED：终止状态，表示该线程已经运行完毕。\")])])]),t._v(\" \"),s(\"p\",[t._v(\"线程在生命周期中并不是固定处于某一个状态而是随着代码的执行在不同状态之间切换。\")]),t._v(\" \"),s(\"p\",[t._v(\"Java 线程状态变迁图(图源：\"),s(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s/UOrXql_LhOD8dhTq_EPI0w\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"挑错 |《Java 并发编程的艺术》中关于线程状态的三处错误\"),s(\"OutboundLink\")],1),t._v(\")：\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/640.png\",alt:\"Java 线程状态变迁图\"}})]),t._v(\" \"),s(\"p\",[t._v(\"由上图可以看出：线程创建之后它将处于 \"),s(\"strong\",[t._v(\"NEW（新建）\")]),t._v(\" 状态，调用 \"),s(\"code\",[t._v(\"start()\")]),t._v(\" 方法后开始运行，线程这时候处于 \"),s(\"strong\",[t._v(\"READY（可运行）\")]),t._v(\" 状态。**可运行状态的线程获得了 CPU 时间片（timeslice）**后就处于 \"),s(\"strong\",[t._v(\"RUNNING（运行）\")]),t._v(\" 状态。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"在操作系统层面，线程有 READY 和 RUNNING 状态；而在 JVM 层面，只能看到 RUNNABLE 状态（图源：\"),s(\"a\",{attrs:{href:\"https://howtodoinJava.com/\",title:\"HowToDoInJava\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"HowToDoInJava\"),s(\"OutboundLink\")],1),t._v(\"：\"),s(\"a\",{attrs:{href:\"https://howtodoinJava.com/Java/multi-threading/Java-thread-life-cycle-and-thread-states/\",title:\"Java Thread Life Cycle and Thread States\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Java Thread Life Cycle and Thread States\"),s(\"OutboundLink\")],1),t._v(\"），所以 Java 系统一般将这两个状态统称为 \"),s(\"strong\",[t._v(\"RUNNABLE（运行中）\")]),t._v(\" 状态 。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"为什么 JVM 没有区分这两种状态呢？\")]),t._v(\" （摘自：\"),s(\"a\",{attrs:{href:\"https://www.zhihu.com/question/56494969/answer/154053599\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Java 线程运行怎么有第六种状态？ - Dawell 的回答\"),s(\"OutboundLink\")],1),t._v(\" ） 现在的时分（time-sharing）多任务（multi-task）操作系统架构通常都是用所谓的“时间分片（time quantum or time slice）”方式进行抢占式（preemptive）轮转调度（round-robin 式）。\"),s(\"strong\",[t._v(\"这个时间分片通常是很小的\")]),t._v(\"，一个线程一次最多只能在 CPU 上运行比如 10-20ms 的时间（此时处于 running 状态），也即大概只有 0.01 秒这一量级，\"),s(\"strong\",[t._v(\"时间片用后就要被切换下来放入调度队列的末尾等待再次调度。（也即回到 ready 状态）。线程切换的如此之快，区分这两种状态就没什么意义了。\")])])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/RUNNABLE-VS-RUNNING.png\",alt:\"RUNNABLE-VS-RUNNING\"}})]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"当线程执行 \"),s(\"code\",[t._v(\"wait()\")]),t._v(\"方法之后，线程进入 \"),s(\"strong\",[t._v(\"WAITING（等待）\")]),t._v(\" 状态。进入等待状态的线程\"),s(\"strong\",[t._v(\"需要依靠其他线程的通知才能够返回到运行状态。\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"TIMED_WAITING(超时等待)\")]),t._v(\" 状态相当于在\"),s(\"strong\",[t._v(\"等待状态的基础上增加了超时限制\")]),t._v(\"，\"),s(\"strong\",[t._v(\"比如通过 \"),s(\"code\",[t._v(\"sleep（long millis）\")]),t._v(\"方法或 \"),s(\"code\",[t._v(\"wait（long millis）\")]),t._v(\"方法可以将线程置于 TIMED_WAITING 状态。当超时时间结束后，线程将会返回到 RUNNABLE 状态。\")])]),t._v(\" \"),s(\"li\",[t._v(\"**当线程进入 \"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 方法/块或者调用 \"),s(\"code\",[t._v(\"wait\")]),t._v(\" 后（被 \"),s(\"code\",[t._v(\"notify\")]),t._v(\"）重新进入 \"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 方法/块，但是锁被其它线程占有，**这个时候线程就会进入 \"),s(\"strong\",[t._v(\"BLOCKED（阻塞）\")]),t._v(\" 状态。\")]),t._v(\" \"),s(\"li\",[t._v(\"线程在执行完了 \"),s(\"code\",[t._v(\"run()\")]),t._v(\"方法之后将会进入到 \"),s(\"strong\",[t._v(\"TERMINATED（终止）\")]),t._v(\" 状态。\")])]),t._v(\" \"),s(\"p\",[t._v(\"相关阅读：\"),s(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s/R5MrTsWvk9McFSQ7bS0W2w\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"线程的几种状态你真的了解么？\"),s(\"OutboundLink\")],1),t._v(\" 。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"什么是线程上下文切换\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是线程上下文切换\"}},[t._v(\"#\")]),t._v(\" 什么是线程上下文切换?\")]),t._v(\" \"),s(\"p\",[t._v(\"线程在执行过程中会有自己的运行条件和状态（也称上下文），比如上文所说到过的程序计数器，栈信息等。当出现如下情况的时候，线程会从占用 CPU 状态中退出。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"主动让出 CPU，比如调用了 \"),s(\"code\",[t._v(\"sleep()\")]),t._v(\", \"),s(\"code\",[t._v(\"wait()\")]),t._v(\" 等。\")])]),t._v(\" \"),s(\"li\",[t._v(\"**时间片用完，**因为操作系统要防止一个线程或者进程长时间占用 CPU 导致其他线程或者进程饿死。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"调用了阻塞类型的系统中断，比如请求 IO，线程被阻塞。\")])]),t._v(\" \"),s(\"li\",[t._v(\"被终止或结束运行\")])]),t._v(\" \"),s(\"p\",[t._v(\"这其中前三种都会发生线程切换，线程切换意味着需要保存当前线程的上下文，留待线程下次占用 CPU 的时候恢复现场。并加载下一个将要占用 CPU 的线程上下文。这就是所谓的 \"),s(\"strong\",[t._v(\"上下文切换\")]),t._v(\"。\")]),t._v(\" \"),s(\"p\",[t._v(\"上下文切换是现代操作系统的基本功能，因其每次需要保存信息恢复信息，这将会占用 CPU，内存等系统资源进行处理，也就意味着效率会有一定损耗，如果频繁切换就会造成整体效率低下。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"什么是线程死锁-如何避免死锁\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是线程死锁-如何避免死锁\"}},[t._v(\"#\")]),t._v(\" 什么是线程死锁?如何避免死锁?\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"认识线程死锁\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#认识线程死锁\"}},[t._v(\"#\")]),t._v(\" 认识线程死锁\")]),t._v(\" \"),s(\"p\",[t._v(\"线程死锁描述的是这样一种情况：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。\")]),t._v(\" \"),s(\"p\",[t._v(\"如下图所示，线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以这两个线程就会互相等待而进入死锁状态。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20240409220747174.png\",alt:\"image-20240409220747174\"}})]),t._v(\" \"),s(\"p\",[t._v(\"下面通过一个例子来说明线程死锁,代码模拟了上图的死锁的情况 (代码来源于《并发编程之美》)：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"DeadLockDemo\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" resource1 \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//资源 1\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" resource2 \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//资源 2\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" args\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"resource1\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"currentThread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"get resource1\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"try\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sleep\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1000\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"catch\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                    e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printStackTrace\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"currentThread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"waiting get resource2\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"resource2\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"currentThread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"get resource2\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"线程 1\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"start\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"resource2\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"currentThread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"get resource2\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"try\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sleep\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1000\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"catch\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                    e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printStackTrace\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"currentThread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"waiting get resource1\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"resource1\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"currentThread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"get resource1\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"线程 2\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"start\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"17\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"18\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"19\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"20\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"21\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"22\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"23\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"24\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"25\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"26\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"27\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"28\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"29\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"30\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"31\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"32\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"33\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"34\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"35\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"36\")]),s(\"br\")])]),s(\"p\",[t._v(\"Output\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-plain line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-plain\"}},[s(\"code\",[t._v(\"Thread[线程 1,5,main]get resource1\\nThread[线程 2,5,main]get resource2\\nThread[线程 1,5,main]waiting get resource2\\nThread[线程 2,5,main]waiting get resource1\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\")])]),s(\"p\",[t._v(\"线程 A 通过 \"),s(\"code\",[t._v(\"synchronized (resource1)\")]),t._v(\" 获得 \"),s(\"code\",[t._v(\"resource1\")]),t._v(\" 的监视器锁，然后通过\"),s(\"code\",[t._v(\"Thread.sleep(1000);\")]),t._v(\"让线程 A 休眠 1s 为的是让线程 B 得到执行然后获取到 resource2 的监视器锁。线程 A 和线程 B 休眠结束了都开始企图请求获取对方的资源，然后这两个线程就会陷入互相等待的状态，这也就产生了死锁。\")]),t._v(\" \"),s(\"p\",[t._v(\"上面的例子符合产生死锁的四个必要条件：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"互斥条件：该资源任意一个时刻只由一个线程占用。\")]),t._v(\" \"),s(\"li\",[t._v(\"请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。\")]),t._v(\" \"),s(\"li\",[t._v(\"不剥夺条件:线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。\")]),t._v(\" \"),s(\"li\",[t._v(\"循环等待条件:若干线程之间形成一种头尾相接的循环等待资源关系。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"如何预防和避免线程死锁\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何预防和避免线程死锁\"}},[t._v(\"#\")]),t._v(\" 如何预防和避免线程死锁?\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"如何预防死锁？\")]),t._v(\" 破坏死锁的产生的必要条件即可：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"strong\",[t._v(\"破坏请求与保持条件\")]),t._v(\"：一次性申请所有的资源。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"破坏不剥夺条件\")]),t._v(\"：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"破坏循环等待条件\")]),t._v(\"：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"如何避免死锁？\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"避免死锁就是在资源分配时，借助于算法（比如银行家算法）对资源分配进行计算评估，使其进入安全状态。\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[s(\"strong\",[t._v(\"安全状态\")]),t._v(\" 指的是系统能够\"),s(\"strong\",[t._v(\"按照某种线程推进顺序（P1、P2、P3……Pn）来为每个线程分配所需资源\")]),t._v(\"，直到满足每个线程对资源的最大需求，使每个线程都可顺利完成。称 \"),s(\"code\",[t._v(\"<P1、P2、P3.....Pn>\")]),t._v(\" 序列为安全序列。\")])]),t._v(\" \"),s(\"p\",[t._v(\"我们对线程 2 的代码修改成下面这样就不会产生死锁了。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"resource1\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"currentThread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"get resource1\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"try\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sleep\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1000\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"catch\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                    e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printStackTrace\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"currentThread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"waiting get resource2\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"resource2\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"currentThread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"get resource2\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"线程 2\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"start\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\")])]),s(\"p\",[t._v(\"输出：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-plain line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-plain\"}},[s(\"code\",[t._v(\"Thread[线程 1,5,main]get resource1\\nThread[线程 1,5,main]waiting get resource2\\nThread[线程 1,5,main]get resource2\\nThread[线程 2,5,main]get resource1\\nThread[线程 2,5,main]waiting get resource2\\nThread[线程 2,5,main]get resource2\\n\\nProcess finished with exit code 0\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\")])]),s(\"p\",[t._v(\"我们分析一下上面的代码为什么避免了死锁的发生?\")]),t._v(\" \"),s(\"p\",[t._v(\"线程 1 首先获得到 resource1 的监视器锁,这时候线程 2 就获取不到了。然后线程 1 再去获取 resource2 的监视器锁，可以获取到。然后线程 1 释放了对 resource1、resource2 的监视器锁的占用，线程 2 获取到就可以执行了。这样就破坏了破坏循环等待条件，因此避免了死锁。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"sleep-方法和-wait-方法对比\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sleep-方法和-wait-方法对比\"}},[t._v(\"#\")]),t._v(\" sleep() 方法和 wait() 方法对比\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"共同点\")]),t._v(\"：两者都可以暂停线程的执行。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"区别\")]),t._v(\"：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"sleep()\")]),t._v(\" 方法没有释放锁，而 \"),s(\"code\",[t._v(\"wait()\")]),t._v(\" 方法释放了锁\")]),t._v(\" 。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"wait()\")]),t._v(\" 通常被用于线程间交互/通信，\"),s(\"code\",[t._v(\"sleep()\")]),t._v(\"通常被用于暂停执行。\")])]),t._v(\" \"),s(\"li\",[s(\"code\",[t._v(\"wait()\")]),t._v(\" 方法被调用后，\"),s(\"strong\",[t._v(\"线程不会自动苏醒，需要别的线程调用同一个对象上的 \"),s(\"code\",[t._v(\"notify()\")]),t._v(\"或者 \"),s(\"code\",[t._v(\"notifyAll()\")]),t._v(\" 方法。\"),s(\"code\",[t._v(\"sleep()\")]),t._v(\"方法执行完成后，线程会自动苏醒，或者也可以使用 \"),s(\"code\",[t._v(\"wait(long timeout)\")]),t._v(\" 超时后线程会自动苏醒。\")])]),t._v(\" \"),s(\"li\",[t._v(\"**\"),s(\"code\",[t._v(\"sleep()\")]),t._v(\" 是 \"),s(\"code\",[t._v(\"Thread\")]),t._v(\" 类的静态本地方法，\"),s(\"code\",[t._v(\"wait()\")]),t._v(\" 则是 \"),s(\"code\",[t._v(\"Object\")]),t._v(\" 类的本地方法。**为什么这样设计呢？下一个问题就会聊到。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"为什么-wait-方法不定义在-thread-中\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么-wait-方法不定义在-thread-中\"}},[t._v(\"#\")]),t._v(\" 为什么 wait() 方法不定义在 Thread 中？\")]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"wait()\")]),t._v(\" 是让获得对象锁的线程实现等待，会自动释放当前线程占有的对象锁。每个对象（\"),s(\"code\",[t._v(\"Object\")]),t._v(\"）都拥有对象锁，既然要释放当前线程占有的对象锁并让其进入 WAITING 状态，自然是要操作对应的对象（\"),s(\"code\",[t._v(\"Object\")]),t._v(\"）而非当前的线程（\"),s(\"code\",[t._v(\"Thread\")]),t._v(\"）。\")]),t._v(\" \"),s(\"p\",[t._v(\"类似的问题：\"),s(\"strong\",[t._v(\"为什么 \"),s(\"code\",[t._v(\"sleep()\")]),t._v(\" 方法定义在 \"),s(\"code\",[t._v(\"Thread\")]),t._v(\" 中？\")])]),t._v(\" \"),s(\"p\",[t._v(\"因为 \"),s(\"strong\",[s(\"code\",[t._v(\"sleep()\")]),t._v(\" 是让当前线程暂停执行，不涉及到对象类，也不需要获得对象锁。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"可以直接调用-thread-类的-run-方法吗\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#可以直接调用-thread-类的-run-方法吗\"}},[t._v(\"#\")]),t._v(\" 可以直接调用 Thread 类的 run 方法吗？\")]),t._v(\" \"),s(\"p\",[t._v(\"这是另一个非常经典的 Java 多线程面试问题，而且在面试中会经常被问到。很简单，但是很多人都会答不上来！\")]),t._v(\" \"),s(\"p\",[t._v(\"new 一个 \"),s(\"code\",[t._v(\"Thread\")]),t._v(\"，线程进入了新建状态。调用 \"),s(\"code\",[t._v(\"start()\")]),t._v(\"方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。 \"),s(\"strong\",[s(\"code\",[t._v(\"start()\")]),t._v(\" 会执行线程的相应准备工作，然后自动执行 \"),s(\"code\",[t._v(\"run()\")]),t._v(\" 方法的内容，这是真正的多线程工作。 但是，直接执行 \"),s(\"code\",[t._v(\"run()\")]),t._v(\" 方法，会把 \"),s(\"code\",[t._v(\"run()\")]),t._v(\" 方法当成一个 main 线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"总结：调用 \"),s(\"code\",[t._v(\"start()\")]),t._v(\" 方法方可启动线程并使线程进入就绪状态，直接执行 \"),s(\"code\",[t._v(\"run()\")]),t._v(\" 方法的话不会以多线程的方式执行。\")])])])}),[],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}