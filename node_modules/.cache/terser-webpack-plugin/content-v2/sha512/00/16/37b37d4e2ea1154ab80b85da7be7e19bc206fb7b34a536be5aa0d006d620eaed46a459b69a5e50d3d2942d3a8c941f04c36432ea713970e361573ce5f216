{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{450:function(s,t,a){\"use strict\";a.r(t);var e=a(4),r=Object(e.a)({},(function(){var s=this,t=s._self._c;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"mysql-14-order-by是怎么工作的\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mysql-14-order-by是怎么工作的\"}},[s._v(\"#\")]),s._v(\" MySQL 14 Order By是怎么工作的\")]),s._v(\" \"),t(\"p\",[s._v(\"在你开发应用的时候，一定会经常碰到需要根据指定的字段排序来显示结果的需求。还是以我们前面举例用过的市民表为例，假设你要查询城市是“杭州”的所有人名字，并且按照姓名排序返回前1000个人的姓名、年龄。\")]),s._v(\" \"),t(\"p\",[s._v(\"假设这个表的部分定义是这样的：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"CREATE\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"TABLE\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token identifier\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")]),s._v(\"t\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token identifier\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")]),s._v(\"id\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"11\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"NOT\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[s._v(\"NULL\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token identifier\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")]),s._v(\"city\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"varchar\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"16\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"NOT\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[s._v(\"NULL\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token identifier\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")]),s._v(\"name\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"varchar\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"16\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"NOT\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[s._v(\"NULL\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token identifier\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")]),s._v(\"age\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"11\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"NOT\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[s._v(\"NULL\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token identifier\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")]),s._v(\"addr\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"varchar\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"128\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"DEFAULT\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[s._v(\"NULL\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"PRIMARY\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"KEY\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token identifier\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")]),s._v(\"id\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"KEY\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token identifier\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")]),s._v(\"city\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token identifier\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")]),s._v(\"city\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"ENGINE\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"InnoDB\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\")])]),t(\"p\",[s._v(\"这时，你的SQL语句可以这么写：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"select\")]),s._v(\" city\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"name\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"age \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" t \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"where\")]),s._v(\" city\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'杭州'\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"order\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"by\")]),s._v(\" name \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"limit\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1000\")]),s._v(\"  \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[s._v(\"这个语句看上去逻辑很清晰，但是你了解它的执行流程吗？今天，我就和你聊聊这个语句是怎么执行的，以及有什么参数会影响执行的行为。\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"全字段排序\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#全字段排序\"}},[s._v(\"#\")]),s._v(\" 全字段排序\")]),s._v(\" \"),t(\"p\",[s._v(\"前面我们介绍过索引，所以你现在就很清楚了，\"),t(\"strong\",[s._v(\"为避免全表扫描，我们需要在city字段加上索引。\")])]),s._v(\" \"),t(\"p\",[s._v(\"在city字段上创建索引之后，我们\"),t(\"strong\",[s._v(\"用explain命令来看看这个语句的执行情况。\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://static001.geekbang.org/resource/image/82/03/826579b63225def812330ef6c344a303.png\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[s._v(\"图1 使用explain命令查看语句的执行情况\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"Extra这个字段中的“Using filesort”表示的就是需要排序，MySQL会给每个线程分配一块内存用于排序，称为sort_buffer。\")])]),s._v(\" \"),t(\"p\",[s._v(\"为了说明这个SQL查询语句的执行过程，我们先来看一下city这个索引的示意图。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://static001.geekbang.org/resource/image/53/3e/5334cca9118be14bde95ec94b02f0a3e.png\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[s._v(\"图2 city字段的索引示意图\")]),s._v(\" \"),t(\"p\",[s._v(\"从图中可以看到，满足city='杭州’条件的行，是从ID_X到ID_(X+N)的这些记录。\")]),s._v(\" \"),t(\"p\",[s._v(\"通常情况下，这个语句执行流程如下所示 ：\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"初始化sort_buffer，确定放入name、city、age这三个字段；\")]),s._v(\" \"),t(\"li\",[s._v(\"从\"),t(\"strong\",[s._v(\"索引city找到第一个满足city='杭州’条件的主键id，也就是图中的ID_X\")]),s._v(\"；\")]),s._v(\" \"),t(\"li\",[s._v(\"到主键id索引取出整行，取name、city、age三个字段的值，\"),t(\"strong\",[s._v(\"存入sort_buffer中\")]),s._v(\"；\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"从索引city取下一个记录的主键id；\")])]),s._v(\" \"),t(\"li\",[s._v(\"重复步骤3、4直到city的值不满足查询条件为止，对应的主键id也就是图中的ID_Y；\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"对sort_buffer中的数据按照字段name做快速排序\")]),s._v(\"；\")]),s._v(\" \"),t(\"li\",[s._v(\"按照排序结果\"),t(\"strong\",[s._v(\"取前1000行\")]),s._v(\"返回给客户端。\")])]),s._v(\" \"),t(\"p\",[s._v(\"我们暂且把这个排序过程，称为全字段排序，执行流程的示意图如下所示，下一篇文章中我们还会用到这个排序。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://static001.geekbang.org/resource/image/6c/72/6c821828cddf46670f9d56e126e3e772.jpg\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[s._v(\"图3 全字段排序\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"图中“按name排序”这个动作，可能在内存中完成，也可能需要使用外部排序，这取决于排序所需的内存和参数sort_buffer_size。\")])]),s._v(\" \"),t(\"p\",[s._v(\"sort_buffer_size，就是MySQL为排序开辟的内存（sort_buffer）的大小。如果要排序的数据量小于sort_buffer_size，排序就在内存中完成。但如果排序数据量太大，内存放不下，则不得不利用磁盘临时文件辅助排序。\")]),s._v(\" \"),t(\"p\",[s._v(\"你可以用下面介绍的方法，来确定一个排序语句是否使用了临时文件。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* 打开optimizer_trace，只对本线程有效 */\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"SET\")]),s._v(\" optimizer_trace\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'enabled=on'\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* @a保存Innodb_rows_read的初始值 */\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"select\")]),s._v(\" VARIABLE_VALUE \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"into\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"@a\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\"  performance_schema\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"session_status \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"where\")]),s._v(\" variable_name \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'Innodb_rows_read'\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* 执行语句 */\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"select\")]),s._v(\" city\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" name\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"age \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" t \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"where\")]),s._v(\" city\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'杭州'\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"order\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"by\")]),s._v(\" name \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"limit\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1000\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* 查看 OPTIMIZER_TRACE 输出 */\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"SELECT\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"FROM\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token identifier\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")]),s._v(\"information_schema\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token identifier\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")]),s._v(\"OPTIMIZER_TRACE\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"`\")])]),s._v(\"\\\\G\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* @b保存Innodb_rows_read的当前值 */\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"select\")]),s._v(\" VARIABLE_VALUE \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"into\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"@b\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" performance_schema\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"session_status \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"where\")]),s._v(\" variable_name \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'Innodb_rows_read'\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* 计算Innodb_rows_read差值 */\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"select\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"@b\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"@a\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),t(\"br\")])]),t(\"p\",[s._v(\"这个方法是通过查看 OPTIMIZER_TRACE 的结果来确认的，你可以从 number_of_tmp_files中看到是否使用了临时文件。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://static001.geekbang.org/resource/image/89/95/89baf99cdeefe90a22370e1d6f5e6495.png\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[s._v(\"图4 全排序的OPTIMIZER_TRACE部分结果\")]),s._v(\" \"),t(\"p\",[s._v(\"number_of_tmp_files表示的是，排序过程中使用的临时文件数。你一定奇怪，为什么需要12个文件？内存放不下时，就需要使用外部排序，外部排序一般使用归并排序算法。可以这么简单理解，\"),t(\"strong\",[s._v(\"MySQL将需要排序的数据分成12份，每一份单独排序后存在这些临时文件中。然后把这12个有序文件再合并成一个有序的大文件。\")])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"如果sort_buffer_size超过了需要排序的数据量的大小，number_of_tmp_files就是0，表示排序可以直接在内存中完成。\")])]),s._v(\" \"),t(\"p\",[s._v(\"否则就需要放在临时文件中排序。sort_buffer_size越小，需要分成的份数越多，number_of_tmp_files的值就越大。\")]),s._v(\" \"),t(\"p\",[s._v(\"接下来，我再和你解释一下图4中其他两个值的意思。\")]),s._v(\" \"),t(\"p\",[s._v(\"我们的示例表中有4000条满足city='杭州’的记录，所以你可以看到 examined_rows=4000，表示参与排序的行数是4000行。\")]),s._v(\" \"),t(\"p\",[s._v(\"sort_mode 里面的packed_additional_fields的意思是，排序过程对字符串做了“紧凑”处理。即使name字段的定义是varchar(16)，在排序过程中还是要按照实际长度来分配空间的。\")]),s._v(\" \"),t(\"p\",[s._v(\"同时，最后一个查询语句select @b-@a 的返回结果是4000，表示整个执行过程只扫描了4000行。\")]),s._v(\" \"),t(\"p\",[s._v(\"这里需要注意的是，为了避免对结论造成干扰，我把internal_tmp_disk_storage_engine设置成MyISAM。否则，select @b-@a的结果会显示为4001。\")]),s._v(\" \"),t(\"p\",[s._v(\"这是因为查询OPTIMIZER_TRACE这个表时，需要用到临时表，而internal_tmp_disk_storage_engine的默认值是InnoDB。如果使用的是InnoDB引擎的话，把数据从临时表取出来的时候，会让Innodb_rows_read的值加1。\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"rowid排序\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rowid排序\"}},[s._v(\"#\")]),s._v(\" rowid排序\")]),s._v(\" \"),t(\"p\",[s._v(\"在上面这个算法过程里面，\"),t(\"strong\",[s._v(\"只对原表的数据读了一遍，剩下的操作都是在sort_buffer和临时文件中执行的。但这个算法有一个问题，就是如果查询要返回的字段很多的话，那么sort_buffer里面要放的字段数太多，这样内存里能够同时放下的行数很少，要分成很多个临时文件，排序的性能会很差。\")])]),s._v(\" \"),t(\"p\",[s._v(\"所以如果单行很大，这个方法效率不够好。\")]),s._v(\" \"),t(\"p\",[s._v(\"那么，\"),t(\"strong\",[s._v(\"如果MySQL认为排序的单行长度太大会怎么做呢？\")])]),s._v(\" \"),t(\"p\",[s._v(\"接下来，我来修改一个参数，让MySQL采用另外一种算法。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"SET\")]),s._v(\" max_length_for_sort_data \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"16\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[s._v(\"max_length_for_sort_data，是MySQL中专门控制用于排序的行数据的长度的一个参数。它的意思是，如果单行的长度超过这个值，MySQL就认为单行太大，要换一个算法。\")]),s._v(\" \"),t(\"p\",[s._v(\"city、name、age 这三个字段的定义总长度是36，我把max_length_for_sort_data设置为16，我们再来看看计算过程有什么改变。\")]),s._v(\" \"),t(\"p\",[s._v(\"新的算法放入sort_buffer的字段，\"),t(\"strong\",[s._v(\"只有要排序的列（即name字段）和主键id。\")])]),s._v(\" \"),t(\"p\",[s._v(\"但这时，\"),t(\"strong\",[s._v(\"排序的结果就因为少了city和age字段的值，不能直接返回了\")]),s._v(\"，整个执行流程就变成如下所示的样子：\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"初始化sort_buffer，确定放入两个字段，即name和id；\")]),s._v(\" \"),t(\"li\",[s._v(\"从索引city找到第一个满足city='杭州’条件的主键id，也就是图中的ID_X；\")]),s._v(\" \"),t(\"li\",[s._v(\"到主键id索引取出整行，取name、id这两个字段，存入sort_buffer中；\")]),s._v(\" \"),t(\"li\",[s._v(\"从索引city取下一个记录的主键id；\")]),s._v(\" \"),t(\"li\",[s._v(\"重复步骤3、4直到不满足city='杭州’条件为止，也就是图中的ID_Y；\")]),s._v(\" \"),t(\"li\",[s._v(\"对sort_buffer中的数据按照字段name进行排序；\")]),s._v(\" \"),t(\"li\",[s._v(\"遍历排序结果，取前1000行，\"),t(\"strong\",[s._v(\"并按照id的值回到原表中取出city、name和age三个字段返回给客户端。\")])])]),s._v(\" \"),t(\"p\",[s._v(\"这个执行流程的示意图如下，\"),t(\"strong\",[s._v(\"我把它称为rowid排序。\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://static001.geekbang.org/resource/image/dc/6d/dc92b67721171206a302eb679c83e86d.jpg\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[s._v(\"图5 rowid排序\")]),s._v(\" \"),t(\"p\",[s._v(\"对比图3的全字段排序流程图你会发现，\"),t(\"strong\",[s._v(\"rowid排序多访问了一次表t的主键索引，就是步骤7。\")])]),s._v(\" \"),t(\"p\",[s._v(\"需要说明的是，最后的“结果集”是一个逻辑概念，实际上MySQL服务端从排序后的sort_buffer中依次取出id，然后到原表查到city、name和age这三个字段的结果，不需要在服务端再耗费内存存储结果，是直接返回给客户端的。\")]),s._v(\" \"),t(\"p\",[s._v(\"根据这个说明过程和图示，你可以想一下，这个时候执行select @b-@a，结果会是多少呢？\")]),s._v(\" \"),t(\"p\",[s._v(\"现在，我们就来看看结果有什么不同。\")]),s._v(\" \"),t(\"p\",[s._v(\"首先，图中的examined_rows的值还是4000，表示用于排序的数据是4000行。但是select @b-@a这个语句的值变成5000了。\")]),s._v(\" \"),t(\"p\",[s._v(\"因为这时候除了排序过程外，在排序完成后，还要根据id去原表取值。由于语句是limit 1000，因此会多读1000行。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://static001.geekbang.org/resource/image/27/9b/27f164804d1a4689718291be5d10f89b.png\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[s._v(\"图6 rowid排序的OPTIMIZER_TRACE部分输出\")]),s._v(\" \"),t(\"p\",[s._v(\"从OPTIMIZER_TRACE的结果中，你还能看到另外两个信息也变了。\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"sort_mode变成了<sort_key, rowid>，表示参与排序的只有name和id这两个字段。\")]),s._v(\" \"),t(\"li\",[s._v(\"number_of_tmp_files变成10了，是因为这时候参与排序的行数虽然仍然是4000行，但是每一行都变小了，因此需要排序的总数据量就变小了，需要的临时文件也相应地变少了。\")])]),s._v(\" \"),t(\"h2\",{attrs:{id:\"全字段排序-vs-rowid排序\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#全字段排序-vs-rowid排序\"}},[s._v(\"#\")]),s._v(\" 全字段排序 VS rowid排序\")]),s._v(\" \"),t(\"p\",[s._v(\"我们来分析一下，从这两个执行流程里，还能得出什么结论。\")]),s._v(\" \"),t(\"p\",[s._v(\"如果MySQL实在是担心排序内存太小，会影响排序效率，才会采用rowid排序算法，这样排序过程中一次可以排序更多行，但是需要再回到原表去取数据。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"如果MySQL认为内存足够大，会优先选择全字段排序，把需要的字段都放到sort_buffer中，这样排序后就会直接从内存里面返回查询结果了，不用再回到原表去取数据。\")])]),s._v(\" \"),t(\"p\",[s._v(\"这也就体现了MySQL的一个设计思想：\"),t(\"strong\",[s._v(\"如果内存够，就要多利用内存，尽量减少磁盘访问。\")])]),s._v(\" \"),t(\"p\",[s._v(\"对于InnoDB表来说，rowid排序会要求回表多造成磁盘读，因此不会被优先选择。\")]),s._v(\" \"),t(\"p\",[s._v(\"这个结论看上去有点废话的感觉，但是你要记住它，下一篇文章我们就会用到。\")]),s._v(\" \"),t(\"p\",[s._v(\"看到这里，你就了解了，MySQL做排序是一个成本比较高的操作。那么你会问，是不是所有的order by都需要排序操作呢？如果不排序就能得到正确的结果，那对系统的消耗会小很多，语句的执行时间也会变得更短。\")]),s._v(\" \"),t(\"p\",[s._v(\"其实，\"),t(\"strong\",[s._v(\"并不是所有的order by语句，都需要排序操作的\")]),s._v(\"。从上面分析的执行过程，我们可以看到，MySQL之所以需要生成临时表，并且在临时表上做排序操作，\"),t(\"strong\",[s._v(\"其原因是原来的数据都是无序的。\")])]),s._v(\" \"),t(\"p\",[s._v(\"你可以设想下，如果能够保证\"),t(\"strong\",[s._v(\"从city这个索引上取出来的行，天然就是按照name递增排序的话，是不是就可以不用再排序了呢？\")])]),s._v(\" \"),t(\"p\",[s._v(\"确实是这样的。\")]),s._v(\" \"),t(\"p\",[s._v(\"所以，我们可以在这个市民表上创建一个city和name的联合索引，对应的SQL语句是：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"alter\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"table\")]),s._v(\" t \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"add\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"index\")]),s._v(\" city_user\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"city\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" name\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[s._v(\"作为与city索引的对比，我们来看看这个索引的示意图。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://static001.geekbang.org/resource/image/f9/bf/f980201372b676893647fb17fac4e2bf.png\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[s._v(\"图7 city和name联合索引示意图\")]),s._v(\" \"),t(\"p\",[s._v(\"在这个索引里面，我们依然可以用树搜索的方式定位到第一个满足city='杭州’的记录，并且额外确保了，接下来按顺序取“下一条记录”的遍历过程中，只要city的值是杭州，name的值就一定是有序的。\")]),s._v(\" \"),t(\"p\",[s._v(\"这样整个查询过程的流程就变成了：\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[t(\"strong\",[s._v(\"从索引(city,name)找到第一个满足city='杭州’条件的主键id；\")])]),s._v(\" \"),t(\"li\",[s._v(\"到\"),t(\"strong\",[s._v(\"主键id索引取出整行，取name、city、age三个字段的值，作为结果集的一部分直接返回；\")])]),s._v(\" \"),t(\"li\",[s._v(\"从索引(city,name)取下一个记录主键id；\")]),s._v(\" \"),t(\"li\",[s._v(\"重复步骤2、3，直到查到第1000条记录，或者是不满足city='杭州’条件时循环结束。\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://static001.geekbang.org/resource/image/3f/92/3f590c3a14f9236f2d8e1e2cb9686692.jpg\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[s._v(\"图8 引入(city,name)联合索引后，查询语句的执行计划\")]),s._v(\" \"),t(\"p\",[s._v(\"可以看到，这个查询过程不需要临时表，也不需要排序。接下来，我们用explain的结果来印证一下。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://static001.geekbang.org/resource/image/fc/8a/fc53de303811ba3c46d344595743358a.png\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[s._v(\"图9 引入(city,name)联合索引后，查询语句的执行计划\")]),s._v(\" \"),t(\"p\",[s._v(\"从图中可以看到，Extra字段中没有Using filesort了，也就是不需要排序了。而且由于(city,name)这个联合索引本身有序，所以这个查询也不用把4000行全都读一遍，只要找到满足条件的前1000条记录就可以退出了。也就是说，在我们这个例子里，只需要扫描1000次。\")]),s._v(\" \"),t(\"p\",[s._v(\"既然说到这里了，我们再往前讨论，\"),t(\"strong\",[s._v(\"这个语句的执行流程有没有可能进一步简化呢\")]),s._v(\"?不知道你还记不记得，我在第5篇文章\"),t(\"a\",{attrs:{href:\"https://time.geekbang.org/column/article/69636\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"《 深入浅出索引（下）》\"),t(\"OutboundLink\")],1),s._v(\"中，和你介绍的覆盖索引。\")]),s._v(\" \"),t(\"p\",[s._v(\"这里我们可以再稍微复习一下。\"),t(\"strong\",[s._v(\"覆盖索引是指，索引上的信息足够满足查询请求，不需要再回到主键索引上去取数据。\")])]),s._v(\" \"),t(\"p\",[s._v(\"按照覆盖索引的概念，我们可以再优化一下这个查询语句的执行流程。\")]),s._v(\" \"),t(\"p\",[s._v(\"针对这个查询，\"),t(\"strong\",[s._v(\"我们可以创建一个city、name和age的联合索引\")]),s._v(\"，对应的SQL语句就是：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"alter\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"table\")]),s._v(\" t \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"add\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"index\")]),s._v(\" city_user_age\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"city\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" name\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" age\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[s._v(\"这时，对于city字段的值相同的行来说，还是按照name字段的值递增排序的，此时的查询语句也就不再需要排序了。这样整个查询语句的执行流程就变成了：\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"从索引(city,name,age)找到第一个满足city='杭州’条件的记录，取出其中的city、name和age这三个字段的值，作为结果集的一部分直接返回；\")]),s._v(\" \"),t(\"li\",[s._v(\"从索引(city,name,age)取下一个记录，同样取出这三个字段的值，作为结果集的一部分直接返回；\")]),s._v(\" \"),t(\"li\",[s._v(\"重复执行步骤2，直到查到第1000条记录，或者是不满足city='杭州’条件时循环结束。\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://static001.geekbang.org/resource/image/df/d6/df4b8e445a59c53df1f2e0f115f02cd6.jpg\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[s._v(\"图10 引入(city,name,age)联合索引后，查询语句的执行流程\")]),s._v(\" \"),t(\"p\",[s._v(\"然后，我们再来看看explain的结果。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://static001.geekbang.org/resource/image/9e/23/9e40b7b8f0e3f81126a9171cc22e3423.png\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[s._v(\"图11 引入(city,name,age)联合索引后，查询语句的执行计划\")]),s._v(\" \"),t(\"p\",[s._v(\"可以看到，\"),t(\"strong\",[s._v(\"Extra字段里面多了“Using index”，表示的就是使用了覆盖索引，性能上会快很多。\")])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"当然，这里并不是说要为了每个查询能用上覆盖索引，就要把语句中涉及的字段都建上联合索引，毕竟索引还是有维护代价的。这是一个需要权衡的决定。\")])]),s._v(\" \"),t(\"h2\",{attrs:{id:\"小结\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结\"}},[s._v(\"#\")]),s._v(\" 小结\")]),s._v(\" \"),t(\"p\",[s._v(\"今天这篇文章，我和你介绍了MySQL里面order by语句的几种算法流程。\")]),s._v(\" \"),t(\"p\",[s._v(\"在开发系统的时候，你总是不可避免地会使用到order by语句。你心里要清楚每个语句的排序逻辑是怎么实现的，还要能够分析出在最坏情况下，每个语句的执行对系统资源的消耗，这样才能做到下笔如有神，不犯低级错误。\")]),s._v(\" \"),t(\"p\",[s._v(\"最后，我给你留下一个思考题吧。\")]),s._v(\" \"),t(\"p\",[s._v(\"假设你的表里面已经有了city_name(city, name)这个联合索引，然后你要查杭州和苏州两个城市中所有的市民的姓名，并且按名字排序，显示前100条记录。如果SQL查询语句是这么写的 ：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[t(\"code\",[s._v(\"mysql\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"select\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" t \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"where\")]),s._v(\" city \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"in\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'杭州'\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"苏州\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"order\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"by\")]),s._v(\" name \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"limit\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"100\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[s._v(\"那么，这个语句执行的时候会有排序过程吗，为什么？\")]),s._v(\" \"),t(\"p\",[s._v(\"虽然有(city,name)联合索引，\"),t(\"strong\",[s._v(\"对于单个city内部，name是递增的\")]),s._v(\"。但是\"),t(\"strong\",[s._v('由于这条SQL语句不是要单独地查一个city的值，而是同时查了\"杭州\"和\" 苏州 \"两个城市，因此所有满足条件的name就不是递增的了。也就是说，这条SQL语句需要排序。')])]),s._v(\" \"),t(\"p\",[s._v(\"那怎么避免排序呢？\")]),s._v(\" \"),t(\"p\",[s._v(\"这里，我们要用到(city,name)联合索引的特性，把这一条语句拆成两条语句，执行流程如下：\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"执行select * from t where city=“杭州” order by name limit 100; 这个语句是不需要排序的，客户端用一个长度为100的内存数组A保存结果。\")]),s._v(\" \"),t(\"li\",[s._v(\"执行select * from t where city=“苏州” order by name limit 100; 用相同的方法，假设结果被存进了内存数组B。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"现在A和B是两个有序数组，然后你可以用归并排序的思想，得到name最小的前100值，就是我们需要的结果了。\")])])]),s._v(\" \"),t(\"p\",[s._v(\"如果把这条SQL语句里“limit 100”改成“limit 10000,100”的话，处理方式其实也差不多，即：要把上面的两条语句改成写：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"select\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" t \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"where\")]),s._v(\" city\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"杭州\"')]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"order\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"by\")]),s._v(\" name \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"limit\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10100\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[s._v(\"和\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[t(\"code\",[s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"select\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" t \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"where\")]),s._v(\" city\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"苏州\"')]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"order\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"by\")]),s._v(\" name \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"limit\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10100\")]),s._v(\"。\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[s._v(\"这时候数据量较大，可以同时起两个连接一行行读结果，用归并排序算法拿到这两个结果集里，按顺序取第10001~10100的name值，就是需要的结果了。\")]),s._v(\" \"),t(\"p\",[s._v(\"当然这个方案有一个明显的损失，就是从数据库返回给客户端的数据量变大了。\")]),s._v(\" \"),t(\"p\",[s._v(\"所以，如果数据的单行比较大的话，可以考虑把这两条SQL语句改成下面这种写法：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"select\")]),s._v(\" id\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"name \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" t \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"where\")]),s._v(\" city\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"杭州\"')]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"order\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"by\")]),s._v(\" name \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"limit\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10100\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[s._v(\"和\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"select\")]),s._v(\" id\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"name \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" t \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"where\")]),s._v(\" city\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"苏州\"')]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"order\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"by\")]),s._v(\" name \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"limit\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10100\")]),s._v(\"。\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[s._v(\"然后，再用归并排序的方法取得按name顺序第10001~10100的name、id的值，然后拿着这100个id到数据库中去查出所有记录。\")]),s._v(\" \"),t(\"p\",[s._v(\"上面这些方法，需要你根据性能需求和开发的复杂度做出权衡。\")])])}),[],!1,null,null,null);t.default=r.exports}}]);","extractedComments":[]}