{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{400:function(a,s,t){\"use strict\";t.r(s);var e=t(4),r=Object(e.a)({},(function(){var a=this,s=a._self._c;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"spring-factories\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#spring-factories\"}},[a._v(\"#\")]),a._v(\" Spring.factories\")]),a._v(\" \"),s(\"p\",[a._v(\"在微服务项目中，存在这多个不同的子模块，这些子模块可能是一个独立的\"),s(\"code\",[a._v(\"SpringBoot\")]),a._v(\" 项目，也可能是普通的\"),s(\"code\",[a._v(\"maven\")]),a._v(\"项目。\")]),a._v(\" \"),s(\"p\",[a._v(\"问题提出：\")]),a._v(\" \"),s(\"p\",[a._v(\"我们通常有这么一种需求，\"),s(\"strong\",[a._v(\"将多个子模块都可能用到的组件从单个子模块中抽离出来组成一个公共模块\")]),a._v(\".比如将所有子模块的接口抽离，抽离出来的公共部分也可能存在着需要注入 spring 容器中的组件。\")]),a._v(\" \"),s(\"p\",[a._v(\"那么这样就引出了一个新的问题。我们都知道 Spring Boot的\"),s(\"strong\",[a._v(\"自动扫描包的扫描范围是SpringBootApplication启动类所在的包以及子包目录下(扫描范围这个很重要)\")]),a._v(\",那么我们抽离出来的公共部分在 SpringBoot 项目启动时就不可能会被自动扫包。\")]),a._v(\" \"),s(\"p\",[a._v(\"问题解决：\")]),a._v(\" \"),s(\"p\",[a._v(\"在 SpringBootApplication\"),s(\"strong\",[a._v(\"启动类中添加 @import 注解\")]),a._v(\"。\\n\"),s(\"strong\",[a._v(\"使用 spring.factories 。\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"import注解\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#import注解\"}},[a._v(\"#\")]),a._v(\" @import注解\")]),a._v(\" \"),s(\"p\",[a._v(\"结构\")]),a._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231010221101864.png\",alt:\"image-20231010221101864\"}})]),a._v(\" \"),s(\"ul\",[s(\"li\",[a._v(\"SwaggerConfig 类和 SpringBoot 的启动类ConfigApplication.java 不在同一级目录下，所以当Spring Boot 自动扫描包的时候，是扫描不到我的SwaggerConfig 的配置的，也就在控制台没有Swagger的打印的信息：\")])]),a._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231010221222735.png\",alt:\"image-20231010221222735\"}})]),a._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231010221202919.png\",alt:\"image-20231010221202919\"}})]),a._v(\" \"),s(\"h2\",{attrs:{id:\"spring-factories-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#spring-factories-2\"}},[a._v(\"#\")]),a._v(\" Spring.factories\")]),a._v(\" \"),s(\"p\",[a._v(\"主要介绍 spring.factories：\")]),a._v(\" \"),s(\"p\",[a._v(\"spring.factories文件需要创建在 resources/META-INF路径下。\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"main\\n|-- resources\\n|     └- META-INF\\n|         └-- spring.factories\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\")])]),s(\"p\",[a._v(\"spring.factories文件是通过 Properties 解析得到的，所以文件内容格式通常是安装以下方式：\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"com.xxx.interface=com.xxx.classname\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\")])]),s(\"p\",[a._v('如果一个接口希望配置多个实现类，可以使用 \", \"进行分割。')]),a._v(\" \"),s(\"p\",[a._v('如果一个接口希望配置多个实现类，可以使用 \", \"进行分割。')]),a._v(\" \"),s(\"p\",[a._v(\"在若依-微服务版中同样是通过 spring.factories解决：\")]),a._v(\" \"),s(\"div\",{staticClass:\"language-properties line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-properties\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token key attr-name\"}},[a._v(\"org.springframework.boot.autoconfigure.EnableAutoConfiguration\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token value attr-value\"}},[a._v(\"\\\\\\n  com.ruoyi.system.api.factory.RemoteUserFallbackFactory,\\\\\\n  com.ruoyi.system.api.factory.RemoteLogFallbackFactory, \\\\\\n  com.ruoyi.system.api.factory.RemoteFileFallbackFactory\")]),a._v(\"\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\")])]),s(\"div\",{staticClass:\"language-properties line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-properties\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token key attr-name\"}},[a._v(\"org.springframework.boot.autoconfigure.EnableAutoConfiguration\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token value attr-value\"}},[a._v(\"\\\\\\n  com.heima.common.exception.ExceptionCatch,\\\\\\n  com.heima.common.swagger.SwaggerConfiguration,\\\\\\n  com.heima.common.redis.CacheService\")]),a._v(\"\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\")])]),s(\"p\",[a._v(\"通过 \"),s(\"code\",[a._v(\"spring.factories\")]),a._v(\"文件的方式，在启动服务时（启动\"),s(\"code\",[a._v(\"SpringBoot\")]),a._v(\"项目）只要引入的包即可实现第三方组件自动扫包。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"SPI机制\")])]),a._v(\" \"),s(\"p\",[a._v(\"SPI的全名为\"),s(\"strong\",[a._v(\"Service Provider Interface\")]),a._v(\".大多数开发人员可能不熟悉，因为这个是针对厂商或者插件的。在java.util.ServiceLoader的文档里有比较详细的介绍。\\n简单的总结下java SPI机制的思想。我们\"),s(\"strong\",[a._v(\"系统里抽象的各个模块，往往有很多不同的实现方案\")]),a._v(\"，比如日志模块的方案，xml解析模块、jdbc模块的方案等。面向的对象的设计里，我们一般推荐模块之间\"),s(\"strong\",[a._v(\"基于接口编程，模块之间不对实现类进行硬编码\")]),a._v(\"。一旦代码里涉及具体的实现类，就违反了\"),s(\"strong\",[a._v(\"可拔插的原则\")]),a._v(\"，如果需要替换一种实现，就需要修改代码。为了实现在模块装配的时候能不在程序里动态指明，这就需要一种服务发现机制。\\njava SPI就是提供这样的一个机制：为某个接口寻找服务实现的机制。有点类似IOC的思想，就是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要。\")])])}),[],!1,null,null,null);s.default=r.exports}}]);","extractedComments":[]}