{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{396:function(t,s,a){\"use strict\";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"java多线程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java多线程\"}},[t._v(\"#\")]),t._v(\" Java多线程\")]),t._v(\" \"),s(\"p\",[t._v(\"线程是一个动态执行的过程，它也有一个从产生到死亡的过程。\")]),t._v(\" \"),s(\"p\",[t._v(\"下图显示了一个线程完整的生命周期。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://www.runoob.com/wp-content/uploads/2014/01/java-thread.jpg\",alt:\"img\"}})]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"新建状态:\")]),t._v(\" \"),s(\"p\",[t._v(\"使用 \"),s(\"strong\",[t._v(\"new\")]),t._v(\" 关键字和 \"),s(\"strong\",[t._v(\"Thread\")]),t._v(\" 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 \"),s(\"strong\",[t._v(\"start()\")]),t._v(\" 这个线程。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"就绪状态:\")]),t._v(\" \"),s(\"p\",[t._v(\"当线程对象\"),s(\"strong\",[t._v(\"调用了start()方法之后，该线程就进入就绪状态\")]),t._v(\"。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"运行状态:\")]),t._v(\" \"),s(\"p\",[t._v(\"如果就绪状态的线程\"),s(\"strong\",[t._v(\"获取 CPU 资源\")]),t._v(\"，就可以执行 \"),s(\"strong\",[t._v(\"run()\")]),t._v(\"，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"阻塞状态:\")]),t._v(\" \"),s(\"p\",[t._v(\"如果一个线程执行了\"),s(\"strong\",[t._v(\"sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。\")]),t._v(\" \"),s(\"li\",[t._v(\"同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。\")]),t._v(\" \"),s(\"li\",[t._v(\"其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"死亡状态:\")]),t._v(\" \"),s(\"p\",[t._v(\"一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。\")])])]),t._v(\" \"),s(\"p\",[t._v(\"然后每个线程有自己的优先级\")]),t._v(\" \"),s(\"p\",[t._v(\"Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。\")])]),t._v(\" \"),s(\"p\",[t._v(\"具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。\"),s(\"strong\",[t._v(\"但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。\")])]),t._v(\" \"),s(\"p\",[t._v(\"创建线程的方法\")]),t._v(\" \"),s(\"p\",[t._v(\"Java 提供了三种创建线程的方法：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"通过实现 Runnable 接口；\")]),t._v(\" \"),s(\"li\",[t._v(\"通过继承 Thread 类本身；    （上面两个都要重写run方法）\")]),t._v(\" \"),s(\"li\",[t._v(\"通过 Callable 和 Future 创建线程。\")])]),t._v(\" \"),s(\"p\",[t._v(\"下表列出了Thread类的一些重要方法：\")]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",{staticStyle:{\"text-align\":\"left\"}},[s(\"strong\",[t._v(\"序号\")])]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[s(\"strong\",[t._v(\"方法描述\")])])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"1\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[s(\"strong\",[t._v(\"public void start()\")]),t._v(\" 使该线程开始执行；\"),s(\"strong\",[t._v(\"Java\")]),t._v(\" 虚拟机调用该线程的 run 方法。\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"2\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[s(\"strong\",[t._v(\"public void run()\")]),t._v(\" 如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"3\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[s(\"strong\",[t._v(\"public final void setName(String name)\")]),t._v(\" 改变线程名称，使之与参数 name 相同。\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"4\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[s(\"strong\",[t._v(\"public final void setPriority(int priority)\")]),t._v(\"  更改线程的优先级。\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"5\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[s(\"strong\",[t._v(\"public final void setDaemon(boolean on)\")]),t._v(\" 将该线程标记为\"),s(\"strong\",[t._v(\"守护线程或用户线程。\")])])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"6\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[s(\"strong\",[t._v(\"public final void join(long millisec)\")]),t._v(\" 等待该线程终止的时间最长为 millis 毫秒。\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"7\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[s(\"strong\",[t._v(\"public void interrupt()\")]),t._v(\" 中断线程。\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"8\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[s(\"strong\",[t._v(\"public final boolean isAlive()\")]),t._v(\" 测试线程是否处于活动状态。\")])])])]),t._v(\" \"),s(\"p\",[t._v(\"上述方法是被 Thread 对象调用的，下面表格的方法是 Thread 类的静态方法。\")]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",{staticStyle:{\"text-align\":\"left\"}},[s(\"strong\",[t._v(\"序号\")])]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[s(\"strong\",[t._v(\"方法描述\")])])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"1\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[s(\"strong\",[t._v(\"public static void yield()\")]),t._v(\" 暂停当前正在执行的线程对象，并执行其他线程。\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"2\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[s(\"strong\",[t._v(\"public static void sleep(long millisec)\")]),t._v(\" 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"3\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[s(\"strong\",[t._v(\"public static boolean holdsLock(Object x)\")]),t._v(\" 当且仅当当前线程在指定的对象上保持监视器锁时，才返回 true。\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"4\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[s(\"strong\",[t._v(\"public static Thread currentThread()\")]),t._v(\" 返回对当前正在执行的线程对象的引用。\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"5\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[s(\"strong\",[t._v(\"public static void dumpStack()\")]),t._v(\" 将当前线程的堆栈跟踪打印至标准错误流。\")])])])]),t._v(\" \"),s(\"p\",[t._v(\"一些基础的API啊概念的理解\")]),t._v(\" \"),s(\"p\",[t._v(\"先知道一点：\"),s(\"strong\",[t._v(\"synchronized   是加锁的\")]),t._v(\"，说明什么，是互斥访问的，\"),s(\"strong\",[t._v(\"作用的对象是什么，就是一些变量啊操作啊之类的，得互斥访问\")])]),t._v(\" \"),s(\"p\",[t._v(\"在 Java 中，线程的通知等待相关的 API 主要是指 \"),s(\"code\",[t._v(\"wait()\")]),t._v(\"、\"),s(\"code\",[t._v(\"notify()\")]),t._v(\" 和 \"),s(\"code\",[t._v(\"notifyAll()\")]),t._v(\" 这三个方法，它们通常用于实现线程间的协作和同步。\"),s(\"strong\",[t._v(\"这些方法通常与 \"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 关键字一起使用，以确保多个线程之间能够正确地等待和唤醒。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"wait-notify-notifyall-方法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#wait-notify-notifyall-方法\"}},[t._v(\"#\")]),t._v(\" \"),s(\"code\",[t._v(\"wait()\")]),t._v(\", \"),s(\"code\",[t._v(\"notify()\")]),t._v(\", \"),s(\"code\",[t._v(\"notifyAll()\")]),t._v(\" 方法\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[s(\"strong\",[s(\"code\",[t._v(\"wait()\")]),t._v(\" 方法\")]),t._v(\"：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"code\",[t._v(\"wait()\")]),t._v(\" 方法用于让当前线程进入等待状态，\"),s(\"strong\",[t._v(\"同时释放对象的锁\")]),t._v(\"，\"),s(\"strong\",[t._v(\"直到其他线程调用该对象的 \"),s(\"code\",[t._v(\"notify()\")]),t._v(\" 或 \"),s(\"code\",[t._v(\"notifyAll()\")]),t._v(\" 方法唤醒它，或者等待指定的时间超时。\")])]),t._v(\" \"),s(\"li\",[s(\"code\",[t._v(\"wait()\")]),t._v(\" 方法必须在同步块中调用，并且通常与循环结构一起使用以防止虚假唤醒。\"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"lock\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"condition\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        lock\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"wait\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 线程等待，同时释放锁\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 线程被唤醒后执行的代码\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\")])])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[s(\"code\",[t._v(\"notify()\")]),t._v(\" 方法\")]),t._v(\"：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"notify()\")]),t._v(\" 方法用于唤醒一个正在等待（通过 \"),s(\"code\",[t._v(\"wait()\")]),t._v(\" 方法进入等待状态）同一个对象锁的线程。\")])]),t._v(\" \"),s(\"li\",[t._v(\"调用 \"),s(\"code\",[t._v(\"notify()\")]),t._v(\" 方法后，\"),s(\"strong\",[t._v(\"并不会立即释放锁，而是等待同步块执行完毕才释放锁。\")]),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"lock\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    condition \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 设置条件为 true\")]),t._v(\"\\n    lock\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"notify\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 唤醒一个等待的线程\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\")])])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[s(\"code\",[t._v(\"notifyAll()\")]),t._v(\" 方法\")]),t._v(\"：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"code\",[t._v(\"notifyAll()\")]),t._v(\" 方法用于唤醒所有正在等待同一个对象锁的线程。\")]),t._v(\" \"),s(\"li\",[t._v(\"调用 \"),s(\"code\",[t._v(\"notifyAll()\")]),t._v(\" 方法后，\"),s(\"strong\",[t._v(\"等待线程会竞争对象锁，根据竞争结果决定哪些线程可以继续执行。\")]),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"lock\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    condition \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 设置条件为 true\")]),t._v(\"\\n    lock\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"notifyAll\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 唤醒所有等待的线程\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\")])])])])])]),t._v(\" \"),s(\"p\",[t._v(\"下面是一个使用 \"),s(\"code\",[t._v(\"wait()\")]),t._v(\" 和 \"),s(\"code\",[t._v(\"notify()\")]),t._v(\" 实现的简单生产者消费者模式的示例：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"import\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token import\"}},[s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"java\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"util\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")])]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"LinkedList\")])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"import\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token import\"}},[s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"java\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"util\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")])]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Queue\")])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ProducerConsumerExample\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"MAX_CAPACITY\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"10\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Queue\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Integer\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" queue \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"LinkedList\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" args\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),t._v(\" producerThread \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"produce\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),t._v(\" consumerThread \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"consume\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        producerThread\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"start\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        consumerThread\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"start\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"produce\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"queue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\t\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 在队列上加锁，所以只能互斥的访问队列\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"queue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"size\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"MAX_CAPACITY\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"try\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Queue is full, producer is waiting...\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                        queue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"wait\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 队列满，生产者等待\")]),t._v(\"\\n                    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"catch\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                        e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printStackTrace\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 生产物品并添加到队列\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" item \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Math\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"random\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"100\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                queue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"offer\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"item\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Produced: \"')]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" item\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 唤醒消费者线程\")]),t._v(\"\\n                queue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"notifyAll\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 模拟生产间隔\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"try\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sleep\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1000\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"catch\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printStackTrace\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"consume\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"queue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"while\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"queue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"isEmpty\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"try\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Queue is empty, consumer is waiting...\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                        queue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"wait\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 队列空，消费者等待\")]),t._v(\"\\n                    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"catch\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                        e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printStackTrace\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 从队列中取出物品并消费\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" item \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" queue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"poll\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Consumed: \"')]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" item\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 唤醒生产者线程\")]),t._v(\"\\n                queue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"notifyAll\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 模拟消费间隔\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"try\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sleep\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1000\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"catch\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printStackTrace\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"17\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"18\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"19\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"20\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"21\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"22\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"23\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"24\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"25\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"26\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"27\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"28\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"29\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"30\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"31\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"32\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"33\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"34\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"35\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"36\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"37\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"38\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"39\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"40\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"41\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"42\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"43\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"44\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"45\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"46\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"47\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"48\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"49\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"50\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"51\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"52\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"53\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"54\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"55\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"56\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"57\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"58\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"59\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"60\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"61\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"62\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"63\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"64\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"65\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"66\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"67\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"68\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"69\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"70\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"71\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"72\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"73\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"74\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"75\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"76\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"77\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"78\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"79\")]),s(\"br\")])]),s(\"p\",[t._v(\"在这个示例中，\"),s(\"strong\",[t._v(\"生产者线程不断产生物品并放入队列，当队列满时调用 \"),s(\"code\",[t._v(\"wait()\")]),t._v(\" 方法进入等待状态\")]),t._v(\"；消费者线程不断从队列中取出物品消费，\"),s(\"strong\",[t._v(\"当队列为空时调用 \"),s(\"code\",[t._v(\"wait()\")]),t._v(\" 方法进入等待状态。当生产者生产完物品或消费者消费完物品后，调用 \"),s(\"code\",[t._v(\"notifyAll()\")]),t._v(\" 方法唤醒等待的线程。\")])]),t._v(\" \"),s(\"p\",[t._v(\"以上是使用 \"),s(\"code\",[t._v(\"wait()\")]),t._v(\"、\"),s(\"code\",[t._v(\"notify()\")]),t._v(\" 和 \"),s(\"code\",[t._v(\"notifyAll()\")]),t._v(\" 方法实现线程通信的基本方法。这种方式可以有效地\"),s(\"strong\",[t._v(\"实现线程间的协作和同步，确保线程安全地访问共享资源。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"join\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#join\"}},[t._v(\"#\")]),t._v(\" join\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"join方法  相当于插队\")])]),t._v(\" \"),s(\"p\",[t._v(\"在 Java 中，\"),s(\"code\",[t._v(\"join()\")]),t._v(\" 方法是 \"),s(\"code\",[t._v(\"Thread\")]),t._v(\" 类提供的一个重要方法，\"),s(\"strong\",[t._v(\"用于等待调用 \"),s(\"code\",[t._v(\"join()\")]),t._v(\" 方法的线程执行完毕\")]),t._v(\"。具体来说，\"),s(\"code\",[t._v(\"join()\")]),t._v(\" 方法的作用是让当前线程等待被调用线程执行完毕后再继续执行。\")]),t._v(\" \"),s(\"p\",[t._v(\"调用 \"),s(\"code\",[t._v(\"join()\")]),t._v(\" 方法的线程会等待被调用 \"),s(\"code\",[t._v(\"join()\")]),t._v(\" 方法的线程执行完毕，然后再继续执行。这通常用于线程之间的协调和顺序控制。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),t._v(\" thread \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 线程执行的代码\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 启动线程\")]),t._v(\"\\nthread\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"start\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 等待线程执行完毕\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"try\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    thread\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"join\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 当前线程等待 thread 执行完毕\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"catch\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printStackTrace\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 在 thread 执行完毕后继续执行当前线程的代码\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Thread has finished executing.\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),s(\"br\")])]),s(\"p\",[t._v(\"在上面的例子中，主线程启动了一个新线程 \"),s(\"code\",[t._v(\"thread\")]),t._v(\"，然后调用了 \"),s(\"code\",[t._v(\"thread.join()\")]),t._v(\" 方法。这会让主线程等待 \"),s(\"code\",[t._v(\"thread\")]),t._v(\" 线程执行完毕后再继续执行主线程的代码。\"),s(\"strong\",[t._v(\"如果 \"),s(\"code\",[t._v(\"thread\")]),t._v(\" 线程已经执行完毕，则 \"),s(\"code\",[t._v(\"join()\")]),t._v(\" 方法会立即返回，否则主线程会阻塞在 \"),s(\"code\",[t._v(\"join()\")]),t._v(\" 方法处，直到 \"),s(\"code\",[t._v(\"thread\")]),t._v(\" 线程执行完毕或者等待超时。\")])]),t._v(\" \"),s(\"p\",[t._v(\"除了无参的 \"),s(\"code\",[t._v(\"join()\")]),t._v(\" 方法外，\"),s(\"code\",[t._v(\"Thread\")]),t._v(\" 类还提供了一个重载的 \"),s(\"code\",[t._v(\"join(long millis)\")]),t._v(\" 方法，允许指定等待的时间（以毫秒为单位）。如果被调用线程在指定的时间内没有执行完毕，则当前线程会继续执行。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),t._v(\" thread \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"try\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sleep\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3000\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 模拟耗时操作\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"catch\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printStackTrace\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Thread has finished.\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 启动线程\")]),t._v(\"\\nthread\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"start\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 等待线程执行最多 2 秒钟\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"try\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    thread\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"join\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2000\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 当前线程最多等待 2 秒\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"catch\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printStackTrace\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 在 thread 执行完毕或等待超时后继续执行当前线程的代码\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Main thread continues.\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"17\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"18\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"19\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"20\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"21\")]),s(\"br\")])]),s(\"p\",[t._v(\"在上面的例子中，主线程调用了 \"),s(\"code\",[t._v(\"thread.join(2000)\")]),t._v(\" 方法，表示最多等待 \"),s(\"code\",[t._v(\"thread\")]),t._v(\" 线程执行 2 秒钟。如果 \"),s(\"code\",[t._v(\"thread\")]),t._v(\" 线程在 2 秒内执行完毕，则主线程会继续执行。如果超过 2 秒 \"),s(\"code\",[t._v(\"thread\")]),t._v(\" 线程仍未执行完毕，则主线程会继续执行。\")]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"join()\")]),t._v(\" 方法通常用于主线程等待其他线程的完成。常见的应用场景包括：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"等待子线程完成后再继续执行主线程的后续逻辑。\")])]),t._v(\" \"),s(\"li\",[t._v(\"多个线程协作完成任务，某个线程需要等待其他线程的结果或执行完毕后再进行下一步操作。\")])]),t._v(\" \"),s(\"p\",[t._v(\"通过合理使用 \"),s(\"code\",[t._v(\"join()\")]),t._v(\" 方法，\"),s(\"strong\",[t._v(\"可以实现线程之间的协调与控制，确保多线程程序的正确执行顺序和数据完整性。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"yield\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#yield\"}},[t._v(\"#\")]),t._v(\" yield\")]),t._v(\" \"),s(\"p\",[t._v(\"在 Java 中，\"),s(\"code\",[t._v(\"yield()\")]),t._v(\" 方法是 \"),s(\"code\",[t._v(\"Thread\")]),t._v(\" 类提供的一个静态方法，\"),s(\"strong\",[t._v(\"用于提示调度器当前线程愿意放弃当前对处理器的使用\")]),t._v(\"。调用 \"),s(\"code\",[t._v(\"yield()\")]),t._v(\" 方法会使当前线程从\"),s(\"strong\",[t._v(\"运行状态转为就绪状态\")]),t._v(\"，然后调度器可以选择其他就绪状态的线程执行。\"),s(\"strong\",[t._v(\"注意，\"),s(\"code\",[t._v(\"yield()\")]),t._v(\" 方法只是一种提示，调度器可以选择忽略这个提示而继续运行当前线程。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"使用方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用方式\"}},[t._v(\"#\")]),t._v(\" 使用方式\")]),t._v(\" \"),s(\"p\",[t._v(\"调用 \"),s(\"code\",[t._v(\"yield()\")]),t._v(\" 方法会使当前线程\"),s(\"strong\",[t._v(\"放弃 CPU 的使用权，但是它并不会导致线程阻塞，而是将线程从运行状态转换为就绪状态，让其他就绪状态的线程有机会执行。调度器可能会忽略 \"),s(\"code\",[t._v(\"yield()\")]),t._v(\" 方法的请求，因此它不能保证将 CPU 时间准确地让给其他线程。\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),t._v(\" thread1 \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" i \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Thread 1 is running...\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"yield\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 提示调度器当前线程愿意放弃 CPU 使用权\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),t._v(\" thread2 \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" i \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Thread 2 is running...\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"yield\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 提示调度器当前线程愿意放弃 CPU 使用权\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\nthread1\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"start\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nthread2\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"start\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),s(\"br\")])]),s(\"p\",[t._v(\"在上面的例子中，我们创建了两个线程 \"),s(\"code\",[t._v(\"thread1\")]),t._v(\" 和 \"),s(\"code\",[t._v(\"thread2\")]),t._v(\"，它们分别循环输出信息并在每次循环后调用 \"),s(\"code\",[t._v(\"Thread.yield()\")]),t._v(\" 方法。这个调用会提示调度器当前线程愿意放弃 CPU 使用权，从而让其他线程有机会执行。但是，实际上调度器可以忽略这个提示，因此输出结果可能会交错执行。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"注意事项\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#注意事项\"}},[t._v(\"#\")]),t._v(\" 注意事项\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"不要滥用 \"),s(\"code\",[t._v(\"yield()\")]),t._v(\" 方法\")]),t._v(\"：\\n\"),s(\"code\",[t._v(\"yield()\")]),t._v(\" 方法是一种协作式的线程调度方法，应该谨慎使用。\"),s(\"strong\",[t._v(\"过度使用 \"),s(\"code\",[t._v(\"yield()\")]),t._v(\" 可能会导致线程之间频繁切换，影响性能。\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"不能保证线程切换\")]),t._v(\"：\\n调用 \"),s(\"code\",[t._v(\"yield()\")]),t._v(\" 方法只是一种提示，调度器可以选择忽略这个提示而继续运行当前线程，因此不能保证线程切换。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"适用场景\")]),t._v(\"：\\n\"),s(\"code\",[t._v(\"yield()\")]),t._v(\" 方法通常用于某些特定的调度场景，如需要让其他优先级相同的线程有机会执行，或者在某个循环体内放弃一部分 CPU 时间。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"与\"),s(\"code\",[t._v(\"sleep()\")]),t._v(\"的区别\")]),t._v(\"：\\n\"),s(\"code\",[t._v(\"yield()\")]),t._v(\" 方法与 \"),s(\"code\",[t._v(\"sleep()\")]),t._v(\" 方法不同，\"),s(\"strong\",[s(\"code\",[t._v(\"sleep()\")]),t._v(\" 方法会使当前线程暂时休眠一段时间，而 \"),s(\"code\",[t._v(\"yield()\")]),t._v(\" 方法只是一种提示，不会导致线程阻塞。\")])])])]),t._v(\" \"),s(\"p\",[t._v(\"总之，\"),s(\"code\",[t._v(\"yield()\")]),t._v(\" 方法是一种协作式的线程调度方式，它可以在特定情况下用于优化线程的执行顺序和 CPU 的利用率，但应该避免滥用，并且不应该依赖于它来控制线程的执行顺序或互斥操作。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"sleep-方法和-wait-方法对比\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sleep-方法和-wait-方法对比\"}},[t._v(\"#\")]),t._v(\" sleep() 方法和 wait() 方法对比\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"共同点\")]),t._v(\"：两者都可以暂停线程的执行。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"区别\")]),t._v(\"：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"sleep()\")]),t._v(\" 方法没有释放锁，而 \"),s(\"code\",[t._v(\"wait()\")]),t._v(\" 方法释放了锁\")]),t._v(\" 。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"wait()\")]),t._v(\" 通常被用于线程间交互/通信，\"),s(\"code\",[t._v(\"sleep()\")]),t._v(\"通常被用于暂停执行。\")])]),t._v(\" \"),s(\"li\",[s(\"code\",[t._v(\"wait()\")]),t._v(\" 方法被调用后，\"),s(\"strong\",[t._v(\"线程不会自动苏醒，需要别的线程调用同一个对象上的 \"),s(\"code\",[t._v(\"notify()\")]),t._v(\"或者 \"),s(\"code\",[t._v(\"notifyAll()\")]),t._v(\" 方法。\"),s(\"code\",[t._v(\"sleep()\")]),t._v(\"方法执行完成后，线程会自动苏醒，或者也可以使用 \"),s(\"code\",[t._v(\"wait(long timeout)\")]),t._v(\" 超时后线程会自动苏醒。\")])]),t._v(\" \"),s(\"li\",[t._v(\"**\"),s(\"code\",[t._v(\"sleep()\")]),t._v(\" 是 \"),s(\"code\",[t._v(\"Thread\")]),t._v(\" 类的静态本地方法，\"),s(\"code\",[t._v(\"wait()\")]),t._v(\" 则是 \"),s(\"code\",[t._v(\"Object\")]),t._v(\" 类的本地方法。**为什么这样设计呢？下一个问题就会聊到。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"可以直接调用-thread-类的-run-方法吗\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#可以直接调用-thread-类的-run-方法吗\"}},[t._v(\"#\")]),t._v(\" 可以直接调用 Thread 类的 run 方法吗？\")]),t._v(\" \"),s(\"p\",[t._v(\"这是另一个非常经典的 Java 多线程面试问题，而且在面试中会经常被问到。很简单，但是很多人都会答不上来！\")]),t._v(\" \"),s(\"p\",[t._v(\"new 一个 \"),s(\"code\",[t._v(\"Thread\")]),t._v(\"，线程进入了新建状态。调用 \"),s(\"code\",[t._v(\"start()\")]),t._v(\"方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。 \"),s(\"strong\",[s(\"code\",[t._v(\"start()\")]),t._v(\" 会执行线程的相应准备工作，然后自动执行 \"),s(\"code\",[t._v(\"run()\")]),t._v(\" 方法的内容，这是真正的多线程工作。 但是，直接执行 \"),s(\"code\",[t._v(\"run()\")]),t._v(\" 方法，会把 \"),s(\"code\",[t._v(\"run()\")]),t._v(\" 方法当成一个 main 线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"总结：调用 \"),s(\"code\",[t._v(\"start()\")]),t._v(\" 方法方可启动线程并使线程进入就绪状态，直接执行 \"),s(\"code\",[t._v(\"run()\")]),t._v(\" 方法的话不会以多线程的方式执行。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"什么是线程上下文切换\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是线程上下文切换\"}},[t._v(\"#\")]),t._v(\" 什么是线程上下文切换?\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"线程在执行过程中会有自己的运行条件和状态（也称上下文）\")]),t._v(\"，比如上文所说到过的程序计数器，栈信息等。当出现如下情况的时候，线程会从占用 CPU 状态中退出。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"主动让出 CPU，比如调用了 \"),s(\"code\",[t._v(\"sleep()\")]),t._v(\", \"),s(\"code\",[t._v(\"wait()\")]),t._v(\" 等。\")])]),t._v(\" \"),s(\"li\",[t._v(\"**时间片用完，**因为操作系统要防止一个线程或者进程长时间占用 CPU 导致其他线程或者进程饿死。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"调用了阻塞类型的系统中断，比如请求 IO，线程被阻塞。\")])]),t._v(\" \"),s(\"li\",[t._v(\"被终止或结束运行\")])]),t._v(\" \"),s(\"p\",[t._v(\"这其中前三种都会发生线程切换，线程切换意味着需要保存当前线程的上下文，留待线程下次占用 CPU 的时候恢复现场。并加载下一个将要占用 CPU 的线程上下文。这就是所谓的 \"),s(\"strong\",[t._v(\"上下文切换\")]),t._v(\"。\")]),t._v(\" \"),s(\"p\",[t._v(\"上下文切换是现代操作系统的基本功能，\"),s(\"strong\",[t._v(\"因其每次需要保存信息恢复信息\")]),t._v(\"，这将会占用 CPU，内存等系统资源进行处理，也就意味着效率会有一定损耗，如果频繁切换就会造成整体效率低下。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"乐观锁存在哪些问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#乐观锁存在哪些问题\"}},[t._v(\"#\")]),t._v(\" 乐观锁存在哪些问题？\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"ABA 问题是乐观锁最常见的问题。\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"aba-问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#aba-问题\"}},[t._v(\"#\")]),t._v(\" ABA 问题\")]),t._v(\" \"),s(\"p\",[t._v(\"如果一个变量 V 初次读取的时候是 A 值，并且在准备赋值的时候检查到它仍然是 A 值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，**因为在这段时间它的值可能被改为其他值，然后又改回 A，那 CAS 操作就会误认为它从来没有被修改过。**这个问题被称为 CAS 操作的 \"),s(\"strong\",[t._v('\"ABA\"问题。')])]),t._v(\" \"),s(\"p\",[t._v(\"ABA 问题的解决思路是在变量前面追加上\"),s(\"strong\",[t._v(\"版本号或者时间戳\")]),t._v(\"。JDK 1.5 以后的 \"),s(\"code\",[t._v(\"AtomicStampedReference\")]),t._v(\" 类就是用来解决 ABA 问题的，其中的 \"),s(\"code\",[t._v(\"compareAndSet()\")]),t._v(\" 方法就是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"boolean\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"compareAndSet\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"V\")]),t._v(\"   expectedReference\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n                             \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"V\")]),t._v(\"   newReference\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n                             \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" expectedStamp\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n                             \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" newStamp\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Pair\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"V\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" current \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" pair\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\"\\n        expectedReference \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" current\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"reference \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\"\\n        expectedStamp \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" current\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"stamp \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"newReference \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" current\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"reference \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\"\\n          newStamp \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" current\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"stamp\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"||\")]),t._v(\"\\n         \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"casPair\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"current\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Pair\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"of\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"newReference\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" newStamp\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\")])]),s(\"h4\",{attrs:{id:\"循环时间长开销大\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#循环时间长开销大\"}},[t._v(\"#\")]),t._v(\" 循环时间长开销大\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"CAS 经常会用到自旋操作来进行重试，也就是不成功就一直循环执行直到成功。如果长时间不成功，会给 CPU 带来非常大的执行开销。\")])]),t._v(\" \"),s(\"p\",[t._v(\"如果 JVM 能支持处理器提供的 pause 指令那么效率会有一定的提升，pause 指令有两个作用：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"可以延迟流水线执行指令，使 CPU 不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。\")]),t._v(\" \"),s(\"li\",[t._v(\"可以避免在退出循环的时候因内存顺序冲而引起 CPU 流水线被清空，从而提高 CPU 的执行效率。\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"只能保证一个共享变量的原子操作\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#只能保证一个共享变量的原子操作\"}},[t._v(\"#\")]),t._v(\" 只能保证一个共享变量的原子操作\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"CAS 只对单个共享变量有效，当操作涉及跨多个共享变量时 CAS 无效\")]),t._v(\"。但是从 JDK 1.5 开始，提\"),s(\"strong\",[t._v(\"供了\"),s(\"code\",[t._v(\"AtomicReference\")]),t._v(\"类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行 CAS 操作.所以我们可以使用锁或者利用\"),s(\"code\",[t._v(\"AtomicReference\")]),t._v(\"类把多个共享变量合并成一个共享变量来操作。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"synchronized-关键字\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#synchronized-关键字\"}},[t._v(\"#\")]),t._v(\" synchronized 关键字\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"synchronized-是什么-有什么用\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#synchronized-是什么-有什么用\"}},[t._v(\"#\")]),t._v(\" synchronized 是什么？有什么用？\")]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"synchronized\")]),t._v(\" 是 Java 中的一个关键字，翻译成中文是\"),s(\"strong\",[t._v(\"同步\")]),t._v(\"的意思，\"),s(\"strong\",[t._v(\"主要解决的是多个线程之间访问资源的同步性，可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。\")])]),t._v(\" \"),s(\"p\",[t._v(\"在 Java 早期版本中，\"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 属于 \"),s(\"strong\",[t._v(\"重量级锁\")]),t._v(\"，效率低下。这是因为监视器锁（monitor）是依赖于底层的操作系统的 \"),s(\"code\",[t._v(\"Mutex Lock\")]),t._v(\" 来实现的，Java 的线程是映射到操作系统的原生线程之上的。\"),s(\"strong\",[t._v(\"如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换时需要从用户态转换到内核态\")]),t._v(\"，这个状态之间的转换需要相对比较长的时间，时间成本相对较高。\")]),t._v(\" \"),s(\"p\",[t._v(\"不过，在 Java 6 之后， \"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 引入了\"),s(\"strong\",[t._v(\"大量的优化\")]),t._v(\"如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销，这些优化让 \"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 锁的效率提升了很多。因此， \"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 还是可以在实际项目中使用的，像 JDK 源码、很多开源框架都大量使用了 \"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 。\")]),t._v(\" \"),s(\"p\",[t._v(\"关于\"),s(\"strong\",[t._v(\"偏向锁\")]),t._v(\"多补充一点：由于偏向锁增加了 JVM 的复杂性，同时也并没有为所有应用都带来性能提升。因此，在 JDK15 中，偏向锁被默认关闭（仍然可以使用 \"),s(\"code\",[t._v(\"-XX:+UseBiasedLocking\")]),t._v(\" 启用偏向锁），在 JDK18 中，偏向锁已经被彻底废弃（无法通过命令行打开）。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"如何使用-synchronized\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何使用-synchronized\"}},[t._v(\"#\")]),t._v(\" 如何使用 synchronized？\")]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"synchronized\")]),t._v(\" 关键字的使用方式主要有下面 3 种：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"strong\",[t._v(\"修饰实例方法\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"修饰静态方法\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"修饰代码块\")])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"1、修饰实例方法\")]),t._v(\" \"),s(\"strong\",[t._v(\"（锁当前对象实例）\")])]),t._v(\" \"),s(\"p\",[t._v(\"给当前对象实例加锁，进入同步代码前要获得 \"),s(\"strong\",[t._v(\"当前对象实例的锁\")]),t._v(\" 。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"method\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//业务代码\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\")])]),s(\"p\",[s(\"strong\",[t._v(\"2、修饰静态方法\")]),t._v(\" （锁当前类）\")]),t._v(\" \"),s(\"p\",[t._v(\"给当前类加锁，会作用于类的所有对象实例 ，进入同步代码前要获得 \"),s(\"strong\",[t._v(\"当前 class 的锁\")]),t._v(\"。\")]),t._v(\" \"),s(\"p\",[t._v(\"这是因为静态成员不属于任何一个实例对象，归整个类所有，不依赖于类的特定实例，被类的所有实例共享。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"method\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//业务代码\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\")])]),s(\"p\",[t._v(\"**静态 \"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 方法和非静态 \"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 方法之间的调用互斥么？不互斥！**如果一个线程 A 调用一个实例对象的非静态 \"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 方法，而线程 B 需要调用这个实例对象所属类的静态 \"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 方法，是允许的，不会发生互斥现象，\"),s(\"strong\",[t._v(\"因为访问静态 \"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 方法占用的锁是当前类（.class）的锁，而访问非静态 \"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 方法占用的锁是当前实例对象锁。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"3、修饰代码块\")]),t._v(\" （锁指定对象/类）\")]),t._v(\" \"),s(\"p\",[t._v(\"对括号里指定的对象/类加锁：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"code\",[t._v(\"synchronized(object)\")]),t._v(\" 表示进入同步代码库前要获得 \"),s(\"strong\",[t._v(\"给定对象的锁\")]),t._v(\"。\")]),t._v(\" \"),s(\"li\",[s(\"code\",[t._v(\"synchronized(类.class)\")]),t._v(\" 表示进入同步代码前要获得 \"),s(\"strong\",[t._v(\"给定 Class 的锁\")])])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//业务代码\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\")])]),s(\"p\",[s(\"strong\",[t._v(\"总结：\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"synchronized\")]),t._v(\" 关键字加到 \"),s(\"code\",[t._v(\"static\")]),t._v(\" 静态方法和 \"),s(\"code\",[t._v(\"synchronized(class)\")]),t._v(\" 代码块上都是是给 Class 类上锁；\")])]),t._v(\" \"),s(\"li\",[s(\"code\",[t._v(\"synchronized\")]),t._v(\" 关键字加到实例方法上是给对象实例上锁；\")]),t._v(\" \"),s(\"li\",[t._v(\"尽量不要使用 \"),s(\"code\",[t._v(\"synchronized(String a)\")]),t._v(\" 因为 JVM 中，字符串常量池具有缓存功能。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"构造方法可以用-synchronized-修饰么\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#构造方法可以用-synchronized-修饰么\"}},[t._v(\"#\")]),t._v(\" 构造方法可以用 synchronized 修饰么？\")]),t._v(\" \"),s(\"p\",[t._v(\"先说结论：\"),s(\"strong\",[t._v(\"构造方法不能使用 synchronized 关键字修饰。\")])]),t._v(\" \"),s(\"p\",[t._v(\"构造方法本身就属于线程安全的，不存在同步的构造方法一说。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"synchronized-底层原理了解吗\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#synchronized-底层原理了解吗\"}},[t._v(\"#\")]),t._v(\" synchronized 底层原理了解吗？\")]),t._v(\" \"),s(\"p\",[t._v(\"synchronized 关键字底层原理属于 JVM 层面的东西。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"synchronized-同步语句块的情况\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#synchronized-同步语句块的情况\"}},[t._v(\"#\")]),t._v(\" synchronized 同步语句块的情况\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SynchronizedDemo\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"method\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"synchronized 代码块\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\")])]),s(\"p\",[t._v(\"通过 JDK 自带的 \"),s(\"code\",[t._v(\"javap\")]),t._v(\" 命令查看 \"),s(\"code\",[t._v(\"SynchronizedDemo\")]),t._v(\" 类的相关字节码信息：首先切换到类的对应目录执行 \"),s(\"code\",[t._v(\"javac SynchronizedDemo.java\")]),t._v(\" 命令生成编译后的 .class 文件，然后执行\"),s(\"code\",[t._v(\"javap -c -s -v -l SynchronizedDemo.class\")]),t._v(\"。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/concurrent/synchronized-principle.png\",alt:\"synchronized关键字原理\"}})]),t._v(\" \"),s(\"p\",[t._v(\"从上面我们可以看出：\"),s(\"strong\",[s(\"code\",[t._v(\"synchronized\")]),t._v(\" 同步语句块的实现使用的是 \"),s(\"code\",[t._v(\"monitorenter\")]),t._v(\" 和 \"),s(\"code\",[t._v(\"monitorexit\")]),t._v(\" 指令，其中 \"),s(\"code\",[t._v(\"monitorenter\")]),t._v(\" 指令指向同步代码块的开始位置，\"),s(\"code\",[t._v(\"monitorexit\")]),t._v(\" 指令则指明同步代码块的结束位置。\")])]),t._v(\" \"),s(\"p\",[t._v(\"上面的字节码中包含一个 \"),s(\"code\",[t._v(\"monitorenter\")]),t._v(\" 指令以及两个 \"),s(\"code\",[t._v(\"monitorexit\")]),t._v(\" 指令，这是为了保证锁在同步代码块代码正常执行以及出现异常的这两种情况下都能被正确释放。\")]),t._v(\" \"),s(\"p\",[t._v(\"当执行 \"),s(\"code\",[t._v(\"monitorenter\")]),t._v(\" 指令时，线程试图获取锁也就是获取 \"),s(\"strong\",[t._v(\"对象监视器 \"),s(\"code\",[t._v(\"monitor\")])]),t._v(\" 的持有权。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"在 Java 虚拟机(HotSpot)中，\"),s(\"strong\",[t._v(\"Monitor 是基于 C++实现的，由\"),s(\"a\",{attrs:{href:\"https://github.com/openjdk-mirror/jdk7u-hotspot/blob/50bdefc3afe944ca74c3093e7448d6b889cd20d1/src/share/vm/runtime/objectMonitor.cpp\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"ObjectMonitor\"),s(\"OutboundLink\")],1),t._v(\"实现的。每个对象中都内置了一个 \"),s(\"code\",[t._v(\"ObjectMonitor\")]),t._v(\"对象。\")])]),t._v(\" \"),s(\"p\",[t._v(\"另外，\"),s(\"code\",[t._v(\"wait/notify\")]),t._v(\"等方法也依赖于\"),s(\"code\",[t._v(\"monitor\")]),t._v(\"对象，这就是为什么只有在同步的块或者方法中才能调用\"),s(\"code\",[t._v(\"wait/notify\")]),t._v(\"等方法，否则会抛出\"),s(\"code\",[t._v(\"java.lang.IllegalMonitorStateException\")]),t._v(\"的异常的原因。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"在执行\"),s(\"code\",[t._v(\"monitorenter\")]),t._v(\"时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/concurrent/synchronized-get-lock-code-block.png\",alt:\"执行 monitorenter 获取锁\"}})]),t._v(\" \"),s(\"p\",[t._v(\"对象锁的的拥有者线程才可以执行 \"),s(\"strong\",[s(\"code\",[t._v(\"monitorexit\")]),t._v(\" 指令来释放锁。在执行 \"),s(\"code\",[t._v(\"monitorexit\")]),t._v(\" 指令后，将锁计数器设为 0，表明锁被释放，其他线程可以尝试获取锁。\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/concurrent/synchronized-release-lock-block.png\",alt:\"执行 monitorexit 释放锁\"}})]),t._v(\" \"),s(\"p\",[t._v(\"如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"synchronized-修饰方法的的情况\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#synchronized-修饰方法的的情况\"}},[t._v(\"#\")]),t._v(\" synchronized 修饰方法的的情况\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SynchronizedDemo2\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"method\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"synchronized 方法\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\")])]),s(\"p\",[s(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E5%8E%9F%E7%90%862.png\",alt:\"synchronized关键字原理\"}})]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"synchronized\")]),t._v(\" 修饰的方法并没有 \"),s(\"code\",[t._v(\"monitorenter\")]),t._v(\" 指令和 \"),s(\"code\",[t._v(\"monitorexit\")]),t._v(\" 指令，取得代之的确实是 \"),s(\"code\",[t._v(\"ACC_SYNCHRONIZED\")]),t._v(\" 标识，该标识指明了该方法是一个同步方法。JVM 通过该 \"),s(\"code\",[t._v(\"ACC_SYNCHRONIZED\")]),t._v(\" 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。\")]),t._v(\" \"),s(\"p\",[t._v(\"如果是实例方法，JVM 会尝试获取实例对象的锁。如果是静态方法，JVM 会尝试获取当前 class 的锁。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"总结\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结\"}},[t._v(\"#\")]),t._v(\" 总结\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[s(\"code\",[t._v(\"synchronized\")]),t._v(\" 同步语句块的实现使用的是 \"),s(\"code\",[t._v(\"monitorenter\")]),t._v(\" 和 \"),s(\"code\",[t._v(\"monitorexit\")]),t._v(\" 指令，其中 \"),s(\"code\",[t._v(\"monitorenter\")]),t._v(\" 指令指向同步代码块的开始位置，\"),s(\"code\",[t._v(\"monitorexit\")]),t._v(\" 指令则指明同步代码块的结束位置。\")])]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"synchronized\")]),t._v(\" 修饰的方法并没有 \"),s(\"code\",[t._v(\"monitorenter\")]),t._v(\" 指令和 \"),s(\"code\",[t._v(\"monitorexit\")]),t._v(\" 指令，取得代之的确实是 \"),s(\"code\",[t._v(\"ACC_SYNCHRONIZED\")]),t._v(\" 标识，该标识指明了该方法是一个同步方法。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"不过两者的本质都是对对象监视器 monitor 的获取。\")])]),t._v(\" \"),s(\"p\",[t._v(\"相关推荐：\"),s(\"a\",{attrs:{href:\"https://tech.youzan.com/javasuo-yu-xian-cheng-de-na-xie-shi/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Java 锁与线程的那些事 - 有赞技术团队\"),s(\"OutboundLink\")],1),t._v(\" 。\")]),t._v(\" \"),s(\"p\",[t._v(\"🧗🏻 进阶一下：学有余力的小伙伴可以抽时间详细研究一下对象监视器 \"),s(\"code\",[t._v(\"monitor\")]),t._v(\"。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"jdk1-6-之后的-synchronized-底层做了哪些优化\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jdk1-6-之后的-synchronized-底层做了哪些优化\"}},[t._v(\"#\")]),t._v(\" JDK1.6 之后的 synchronized 底层做了哪些优化？\")]),t._v(\" \"),s(\"p\",[t._v(\"JDK1.6 对锁的实现引入了大量的优化，如偏向锁、轻量级锁、自旋锁、适应性自旋锁、锁消除、锁粗化等技术来减少锁操作的开销。\")]),t._v(\" \"),s(\"p\",[t._v(\"锁主要存在四种状态，依次是：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，他们会随着竞争的激烈而逐渐升级。注意锁可以升级不可降级，这种策略是为了提高获得锁和释放锁的效率。\")]),t._v(\" \"),s(\"p\",[t._v(\"关于这几种优化的详细信息可以查看下面这篇文章：\"),s(\"a\",{attrs:{href:\"https://www.cnblogs.com/wuqinglong/p/9945618.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Java6 及以上版本对 synchronized 的优化\"),s(\"OutboundLink\")],1),t._v(\" 。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"synchronized-和-volatile-有什么区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#synchronized-和-volatile-有什么区别\"}},[t._v(\"#\")]),t._v(\" synchronized 和 volatile 有什么区别？\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[s(\"code\",[t._v(\"synchronized\")]),t._v(\" 关键字和 \"),s(\"code\",[t._v(\"volatile\")]),t._v(\" 关键字是两个互补的存在，而不是对立的存在！\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"code\",[t._v(\"volatile\")]),t._v(\" 关键字是线程同步的轻量级实现，\"),s(\"strong\",[t._v(\"所以 \"),s(\"code\",[t._v(\"volatile\")]),t._v(\"性能肯定比\"),s(\"code\",[t._v(\"synchronized\")]),t._v(\"关键字要好 。但是 \"),s(\"code\",[t._v(\"volatile\")]),t._v(\" 关键字只能用于变量而 \"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 关键字可以修饰方法以及代码块 。\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"volatile\")]),t._v(\" 关键字能保证数据的可见性，但不能保证数据的原子性。\"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 关键字两者都能保证。\")])]),t._v(\" \"),s(\"li\",[s(\"code\",[t._v(\"volatile\")]),t._v(\"关键字主要用于解决变量在多个线程之间的可见性，而 \"),s(\"code\",[t._v(\"synchronized\")]),t._v(\" 关键字解决的是多个线程之间访问资源的同步性。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"threadlocal\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#threadlocal\"}},[t._v(\"#\")]),t._v(\" ThreadLocal\")]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 是 Java 中的一个类，它提供了线程局部变量的功能。\"),s(\"strong\",[t._v(\"使用 \"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 可以实现将变量在每个线程中单独存储，每个线程都拥有该变量的独立副本，互不影响。这在多线程环境下非常有用，可以避免线程间共享变量导致的并发问题。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"使用方式-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用方式-2\"}},[t._v(\"#\")]),t._v(\" 使用方式\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"创建 \"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 对象\")]),t._v(\"：\\n首先，需要创建一个 \"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 对象，通常通过匿名子类或者直接使用 \"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 的实现类。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadLocal\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" threadLocal \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadLocal\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"设置和获取线程局部变量\")]),t._v(\"：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"使用 \"),s(\"code\",[t._v(\"set()\")]),t._v(\" 方法设置当前线程的局部变量值。\")]),t._v(\" \"),s(\"li\",[t._v(\"使用 \"),s(\"code\",[t._v(\"get()\")]),t._v(\" 方法获取当前线程的局部变量值。\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 在当前线程设置局部变量值\")]),t._v(\"\\nthreadLocal\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"set\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"value\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 在当前线程获取局部变量值\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" value \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" threadLocal\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"注意事项\")]),t._v(\"：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"每个线程通过 \"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 对象操作的是自己的局部变量，不会影响其他线程的局部变量。\")])]),t._v(\" \"),s(\"li\",[t._v(\"每个线程首次访问 \"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 变量时，会在当前线程的 \"),s(\"code\",[t._v(\"ThreadLocalMap\")]),t._v(\" 中创建一个 Entry 对象来存储该变量。\")])])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"示例\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#示例\"}},[t._v(\"#\")]),t._v(\" 示例\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadLocalExample\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 定义一个 ThreadLocal 变量\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadLocal\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Integer\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" threadLocal \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadLocal\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" args\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 创建两个线程，分别操作 ThreadLocal 变量\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),t._v(\" thread1 \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            threadLocal\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"set\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 在 thread1 线程中设置值为 1\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Thread 1 - Value: \"')]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" threadLocal\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 获取 thread1 线程的值\")]),t._v(\"\\n            threadLocal\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"remove\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 清除 thread1 线程的值\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),t._v(\" thread2 \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            threadLocal\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"set\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 在 thread2 线程中设置值为 2\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Thread 2 - Value: \"')]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" threadLocal\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 获取 thread2 线程的值\")]),t._v(\"\\n            threadLocal\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"remove\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 清除 thread2 线程的值\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 启动线程\")]),t._v(\"\\n        thread1\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"start\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        thread2\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"start\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"17\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"18\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"19\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"20\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"21\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"22\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"23\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"24\")]),s(\"br\")])]),s(\"p\",[t._v(\"在上面的示例中，我们创建了两个线程 \"),s(\"code\",[t._v(\"thread1\")]),t._v(\" 和 \"),s(\"code\",[t._v(\"thread2\")]),t._v(\"，它们分别通过 \"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 设置和获取局部变量 \"),s(\"code\",[t._v(\"threadLocal\")]),t._v(\" 的值。由于每个线程操作的是自己的局部变量，因此 \"),s(\"code\",[t._v(\"thread1\")]),t._v(\" 和 \"),s(\"code\",[t._v(\"thread2\")]),t._v(\" 互不影响，可以独立存储和访问各自的值。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"适用场景\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#适用场景\"}},[t._v(\"#\")]),t._v(\" 适用场景\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"线程上下文传递\")]),t._v(\"：\\n可以在多线程环境中方便地传递数据，而不需要通过参数传递或者全局变量。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"避免共享变量带来的并发问题\")]),t._v(\"：\\n在并发编程中，使用 \"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 可以避免共享变量导致的线程安全问题，每个线程都操作自己的局部变量。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"简化代码逻辑\")]),t._v(\"：\\n对于一些需要线程隔离的数据，使用 \"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 可以简化代码逻辑，提高代码的可维护性和可读性。\")])])]),t._v(\" \"),s(\"p\",[t._v(\"总之，\"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 是实现线程局部变量的一种有效方式，能够很好地解决多线程并发访问共享变量带来的问题，但在使用时需要注意及时清理，避免内存泄漏问题。\")]),t._v(\" \"),s(\"p\",[t._v(\"底层的原理\")]),t._v(\" \"),s(\"p\",[t._v(\"我们知道\"),s(\"strong\",[t._v(\"每个线程都有一个 ThreadLocalMap 结构\")]),t._v(\"，其中就保存着当前线程\"),s(\"strong\",[t._v(\"所持有的所有 ThreadLocal  （注意看上面的ThreadLocal是指定了类型的，所以一个线程可以有很多个ThreadLocal ,\"),s(\"code\",[t._v(\"private static ThreadLocal<Integer> threadLocal = new ThreadLocal<>();\")]),t._v(\"）\")]),t._v(\"。ThreadLocal 本身只是一个引用，没有直接保存值，**值是保存在 ThreadLocalMap 中，ThreadLocal 作为 key，值作为 value。**可以用下面的图来概括：\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"最终的变量是放在了当前线程的 \"),s(\"code\",[t._v(\"ThreadLocalMap\")]),t._v(\" 中，并不是存在 \"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 上，\"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 可以理解为只是\"),s(\"code\",[t._v(\"ThreadLocalMap\")]),t._v(\"的封装，传递了变量值。\")]),t._v(\" \"),s(\"code\",[t._v(\"ThrealLocal\")]),t._v(\" 类中可以通过\"),s(\"code\",[t._v(\"Thread.currentThread()\")]),t._v(\"获取到当前线程对象后，直接通过\"),s(\"code\",[t._v(\"getMap(Thread t)\")]),t._v(\"可以访问到该线程的\"),s(\"code\",[t._v(\"ThreadLocalMap\")]),t._v(\"对象。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"每个\"),s(\"code\",[t._v(\"Thread\")]),t._v(\"中都具备一个\"),s(\"code\",[t._v(\"ThreadLocalMap\")]),t._v(\"，而\"),s(\"code\",[t._v(\"ThreadLocalMap\")]),t._v(\"可以存储以\"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\"为 key ，Object 对象为 value 的键值对。\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadLocalMap\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadLocal\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" firstKey\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" firstValue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//......\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\")])]),s(\"p\",[s(\"strong\",[t._v(\"比如我们在同一个线程中声明了两个 \"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 对象的话\")]),t._v(\"， \"),s(\"strong\",[s(\"code\",[t._v(\"Thread\")]),t._v(\"内部都是使用仅有的那个\"),s(\"code\",[t._v(\"ThreadLocalMap\")]),t._v(\" 存放数据的，\")]),s(\"code\",[t._v(\"ThreadLocalMap\")]),t._v(\"的 \"),s(\"strong\",[t._v(\"key 就是 \"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\"对象\")]),t._v(\"，\"),s(\"strong\",[t._v(\"value 就是 \"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 对象调用\"),s(\"code\",[t._v(\"set\")]),t._v(\"方法设置的值。\")])]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 数据结构如下图所示：\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/concurrent/threadlocal-data-structure.png\",alt:\"ThreadLocal 数据结构\"}})]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"ThreadLocalMap\")]),t._v(\"是\"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\"的静态内部类。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/concurrent/thread-local-inner-class.png\",alt:\"ThreadLocal内部类\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"threadlocal-内存泄露问题是怎么导致的\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#threadlocal-内存泄露问题是怎么导致的\"}},[t._v(\"#\")]),t._v(\" ThreadLocal 内存泄露问题是怎么导致的？\")]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"ThreadLocalMap\")]),t._v(\" 中使用的 **key 为 \"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 的弱引用，而 value 是强引用。**所以，如果 \"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\" 没有被外部强引用的情况下，在垃圾回收的时候，\"),s(\"strong\",[t._v(\"key 会被清理掉，而 value 不会被清理掉。\")])]),t._v(\" \"),s(\"p\",[t._v(\"这样一来，\"),s(\"strong\",[s(\"code\",[t._v(\"ThreadLocalMap\")]),t._v(\" 中就会出现 key 为 null 的 Entry。假如我们不做任何措施的话，value 永远无法被 GC 回收，这个时候就可能会产生内存泄露。\"),s(\"code\",[t._v(\"ThreadLocalMap\")]),t._v(\" 实现中已经考虑了这种情况，在调用 \"),s(\"code\",[t._v(\"set()\")]),t._v(\"、\"),s(\"code\",[t._v(\"get()\")]),t._v(\"、\"),s(\"code\",[t._v(\"remove()\")]),t._v(\" 方法的时候，会清理掉 key 为 null 的记录。使用完 \"),s(\"code\",[t._v(\"ThreadLocal\")]),t._v(\"方法后最好手动调用\"),s(\"code\",[t._v(\"remove()\")]),t._v(\"方法\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Entry\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"extends\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"WeakReference\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadLocal\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/** The value associated with this ThreadLocal. */\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" value\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Entry\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadLocal\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" k\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" v\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"super\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"k\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        value \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" v\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\")])]),s(\"p\",[s(\"strong\",[t._v(\"弱引用介绍：\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"如果一个对象只具有弱引用，那就类似于\"),s(\"strong\",[t._v(\"可有可无的生活用品\")]),t._v(\"。弱引用与软引用的区别在于：**只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。**不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java 虚拟机就会把这个弱引用加入到与之关联的引用队列中。\")])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"线程池\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程池\"}},[t._v(\"#\")]),t._v(\" 线程池\")]),t._v(\" \"),s(\"p\",[t._v(\"线程池（Thread Pool）是一**种管理和复用线程的机制，它能够提高多线程应用程序的性能和稳定性，避免不必要的线程创建和销毁开销。**在 Java 中，线程池是通过 \"),s(\"strong\",[s(\"code\",[t._v(\"java.util.concurrent\")]),t._v(\" 包中的 \"),s(\"code\",[t._v(\"ExecutorService\")]),t._v(\" 接口及其实现类来实现的。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"为什么使用线程池\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么使用线程池\"}},[t._v(\"#\")]),t._v(\" 为什么使用线程池？\")]),t._v(\" \"),s(\"p\",[t._v(\"在多线程编程中，频繁地创建和销毁线程会带来一定的开销，包括线程的创建、上下文切换等。而线程池的主要作用是维护一定数量的线程，\"),s(\"strong\",[t._v(\"根据需要复用这些线程来执行任务，从而减少了线程创建和销毁的开销，提高了线程的利用率和应用程序的性能。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"java-线程池的核心接口和实现类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java-线程池的核心接口和实现类\"}},[t._v(\"#\")]),t._v(\" Java 线程池的核心接口和实现类\")]),t._v(\" \"),s(\"p\",[t._v(\"在 Java 中，线程池的核心接口是 \"),s(\"code\",[t._v(\"ExecutorService\")]),t._v(\"，常用的线程池实现类包括：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[s(\"strong\",[s(\"code\",[t._v(\"ThreadPoolExecutor\")])]),t._v(\"：\\n\"),s(\"strong\",[s(\"code\",[t._v(\"ThreadPoolExecutor\")]),t._v(\" 是 \"),s(\"code\",[t._v(\"ExecutorService\")]),t._v(\" 接口的默认实现类\")]),t._v(\"，它提供了灵活的线程池配置和管理。可以通过构造函数或者 \"),s(\"code\",[t._v(\"Executors.newThreadPoolExecutor()\")]),t._v(\" 方法创建一个 \"),s(\"code\",[t._v(\"ThreadPoolExecutor\")]),t._v(\" 实例。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[s(\"code\",[t._v(\"Executors\")]),t._v(\" 工厂类\")]),t._v(\"：\\n\"),s(\"code\",[t._v(\"Executors\")]),t._v(\" 类提供了一些静态工厂方法来创建不同类型的线程池，如：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"newFixedThreadPool(int nThreads)\")])]),t._v(\"：\"),s(\"strong\",[t._v(\"固定大小的线程池\")]),t._v(\"。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"newCachedThreadPool()\")])]),t._v(\"：\"),s(\"strong\",[t._v(\"根据需求自动调整大小的线程池\")]),t._v(\"。\")]),t._v(\" \"),s(\"li\",[s(\"code\",[t._v(\"**newSingleThreadExecutor()**\")]),t._v(\"：\"),s(\"strong\",[t._v(\"单线程的线程池\")]),t._v(\"。\")]),t._v(\" \"),s(\"li\",[s(\"code\",[t._v(\"newScheduledThreadPool(int corePoolSize)\")]),t._v(\"：\"),s(\"strong\",[t._v(\"支持定时和周期性任务执行的线程池\")]),t._v(\"。\")])])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"基本概念和参数\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基本概念和参数\"}},[t._v(\"#\")]),t._v(\" 基本概念和参数\")]),t._v(\" \"),s(\"p\",[t._v(\"在使用线程池时，需要了解以下基本概念和参数：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"核心线程数（Core Pool Size）\")]),t._v(\"：\\n线程池中\"),s(\"strong\",[t._v(\"保持存活的最小线程数量，即使线程处于空闲状态，也不会被销毁。新任务会优先分配给核心线程处理。\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"最大线程数（Maximum Pool Size）\")]),t._v(\"：\\n线程池中允许的最大线程数量。\"),s(\"strong\",[t._v(\"当任务队列已满且仍有新任务提交时，线程池会创建新的线程，直到达到最大线程数。\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"任务队列（Blocking Queue）\")]),t._v(\"：\\n用于\"),s(\"strong\",[t._v(\"存储等待执行的任务的队列\")]),t._v(\"。线程池会从队列中取出任务分配给线程执行。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"任务拒绝策略（Rejected Execution Handler）\")]),t._v(\"：\\n当任务无法被线程池执行时的处理策略。\"),s(\"strong\",[t._v(\"常见的策略包括抛出异常、丢弃任务、丢弃最旧的任务等。\")])])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"使用示例\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用示例\"}},[t._v(\"#\")]),t._v(\" 使用示例\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"import\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token import\"}},[s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"java\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"util\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"concurrent\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")])]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ExecutorService\")])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"import\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token import\"}},[s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"java\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"util\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"concurrent\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")])]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Executors\")])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadPoolExample\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" args\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 创建固定大小的线程池，包含5个线程\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ExecutorService\")]),t._v(\" executor \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Executors\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"newFixedThreadPool\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 提交任务给线程池执行\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" i \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"10\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            executor\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"submit\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Executing task in thread: \"')]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"currentThread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getName\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 关闭线程池\")]),t._v(\"\\n        executor\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"shutdown\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"17\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"18\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"19\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"20\")]),s(\"br\")])]),s(\"p\",[t._v(\"在上面的示例中，我们使用 \"),s(\"code\",[t._v(\"Executors.newFixedThreadPool(5)\")]),t._v(\" **创建了一个固定大小为 5 的线程池。然后通过 \"),s(\"code\",[t._v(\"executor.submit()\")]),t._v(\" 方法提交了 10 个任务给线程池执行。**线程池会自动管理和调度这些任务的执行，任务执行完成后线程会被复用。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"线程池的优点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程池的优点\"}},[t._v(\"#\")]),t._v(\" 线程池的优点\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"降低资源消耗\")]),t._v(\"：通过复用线程减少了线程创建和销毁的开销。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"提高响应速度\")]),t._v(\"：任务可以立即执行，无需等待线程创建。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"提高系统稳定性\")]),t._v(\"：可以限制并发线程\")])]),t._v(\" \"),s(\"p\",[t._v(\"数量，避免资源耗尽。\")]),t._v(\" \"),s(\"p\",[t._v(\"总之，线程池是多线程编程中非常重要的一种机制，能够有效管理和复用线程，提高程序的性能和稳定性。合理选择和配置线程池可以避免常见的多线程并发问题，提高系统的并发处理能力。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"如何创建线程池\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何创建线程池\"}},[t._v(\"#\")]),t._v(\" 如何创建线程池？\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"方式一：通过\"),s(\"code\",[t._v(\"ThreadPoolExecutor\")]),t._v(\"构造函数来创建（推荐）。\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"D:%5Ccoding%5CPDF%E8%AE%B2%E4%B9%89%5CJavaGuide%5Cdocs%5Cjava%5Cconcurrent%5Cimages%5Cjava-thread-pool-summary%5Cthreadpoolexecutor%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.png\",alt:\"通过构造方法实现\"}})]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"方式二：通过 \"),s(\"code\",[t._v(\"Executor\")]),t._v(\" 框架的工具类 \"),s(\"code\",[t._v(\"Executors\")]),t._v(\" 来创建。\")])]),t._v(\" \"),s(\"p\",[t._v(\"我们可以创建多种类型的 \"),s(\"code\",[t._v(\"ThreadPoolExecutor\")]),t._v(\"：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"FixedThreadPool\")])]),t._v(\"：该方法返回\"),s(\"strong\",[t._v(\"一个固定线程数量的线程池。该线程池中的线程数量始终不变\")]),t._v(\"。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务\"),s(\"strong\",[t._v(\"会被暂存在一个任务队列中\")]),t._v(\"，待有线程空闲时，便处理在任务队列中的任务。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"SingleThreadExecutor\")]),t._v(\"：\")]),t._v(\" 该方法\"),s(\"strong\",[t._v(\"返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池\")]),t._v(\"，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"CachedThreadPool\")]),t._v(\"：\")]),t._v(\" 该方法返回一个可根据实际情况调整线程数量的线程池。\"),s(\"strong\",[t._v(\"初始大小为 0。当有新任务提交时，如果当前线程池中没有线程可用，它会创建一个新的线程来处理该任务。如果在一段时间内（默认为 60 秒）没有新任务提交，核心线程会超时并被销毁，从而缩小线程池的大小。\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"ScheduledThreadPool\")])]),t._v(\"：该方法返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池。\")])]),t._v(\" \"),s(\"p\",[t._v(\"对应 \"),s(\"code\",[t._v(\"Executors\")]),t._v(\" 工具类中的方法如图所示：\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/concurrent/executors-inner-threadpool.png\",alt:\"\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"为什么不推荐使用内置线程池\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么不推荐使用内置线程池\"}},[t._v(\"#\")]),t._v(\" 为什么不推荐使用内置线程池？\")]),t._v(\" \"),s(\"p\",[t._v(\"在《阿里巴巴 Java 开发手册》“并发处理”这一章节，\"),s(\"strong\",[t._v(\"明确指出线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"为什么呢？\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。\"),s(\"strong\",[t._v(\"如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\")])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"另外，《阿里巴巴 Java 开发手册》中强制线程池不允许使用 \"),s(\"code\",[t._v(\"Executors\")]),t._v(\" 去创建，而是通过 \"),s(\"code\",[t._v(\"ThreadPoolExecutor\")]),t._v(\" 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险\")])]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"Executors\")]),t._v(\" 返回线程池对象的弊端如下(后文会详细介绍到)：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"FixedThreadPool\")]),t._v(\" 和 \"),s(\"code\",[t._v(\"SingleThreadExecutor\")])]),t._v(\"：使用的是\"),s(\"strong\",[t._v(\"无界的 \"),s(\"code\",[t._v(\"LinkedBlockingQueue\")]),t._v(\"，任务队列最大长度为 \"),s(\"code\",[t._v(\"Integer.MAX_VALUE\")]),t._v(\",可能堆积大量的请求，从而导致 OOM。\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"CachedThreadPool\")])]),t._v(\"：使用的是\"),s(\"strong\",[t._v(\"同步队列 \"),s(\"code\",[t._v(\"SynchronousQueue\")]),t._v(\",\")]),t._v(\" 允许创建的线程数量为 \"),s(\"code\",[t._v(\"Integer.MAX_VALUE\")]),t._v(\" ，\"),s(\"strong\",[t._v(\"如果任务数量过多且执行速度较慢，可能会创建大量的线程，从而导致 OOM。\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"ScheduledThreadPool\")]),t._v(\" 和 \"),s(\"code\",[t._v(\"SingleThreadScheduledExecutor\")])]),t._v(\" : 使用的\"),s(\"strong\",[t._v(\"无界的延迟阻塞队列\"),s(\"code\",[t._v(\"DelayedWorkQueue\")]),t._v(\"，任务队列最大长度为 \"),s(\"code\",[t._v(\"Integer.MAX_VALUE\")]),t._v(\",可能堆积大量的请求，从而导致 OOM。\")])])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 无界队列 LinkedBlockingQueue\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ExecutorService\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"newFixedThreadPool\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" nThreads\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadPoolExecutor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"nThreads\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" nThreads\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0L\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"TimeUnit\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"MILLISECONDS\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"LinkedBlockingQueue\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Runnable\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 无界队列 LinkedBlockingQueue\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ExecutorService\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"newSingleThreadExecutor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FinalizableDelegatedExecutorService\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadPoolExecutor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0L\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"TimeUnit\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"MILLISECONDS\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"LinkedBlockingQueue\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Runnable\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 同步队列 SynchronousQueue，没有容量，最大线程数是 Integer.MAX_VALUE`\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ExecutorService\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"newCachedThreadPool\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadPoolExecutor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Integer\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"MAX_VALUE\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"60L\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"TimeUnit\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"SECONDS\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SynchronousQueue\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Runnable\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// DelayedWorkQueue（延迟阻塞队列）\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ScheduledExecutorService\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"newScheduledThreadPool\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" corePoolSize\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ScheduledThreadPoolExecutor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"corePoolSize\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ScheduledThreadPoolExecutor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" corePoolSize\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"super\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"corePoolSize\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Integer\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"MAX_VALUE\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NANOSECONDS\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n          \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"DelayedWorkQueue\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"17\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"18\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"19\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"20\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"21\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"22\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"23\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"24\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"25\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"26\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"27\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"28\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"29\")]),s(\"br\")])]),s(\"h3\",{attrs:{id:\"线程池常见参数有哪些-如何解释\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程池常见参数有哪些-如何解释\"}},[t._v(\"#\")]),t._v(\" 线程池常见参数有哪些？如何解释？\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[t._v(\"    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n     * 用给定的初始参数创建一个新的ThreadPoolExecutor。\\n     */\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadPoolExecutor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" corePoolSize\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//线程池的核心线程数量\")]),t._v(\"\\n                              \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" maximumPoolSize\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//线程池的最大线程数\")]),t._v(\"\\n                              \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" keepAliveTime\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//当线程数大于核心线程数时，多余的空闲线程存活的最长时间\")]),t._v(\"\\n                              \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"TimeUnit\")]),t._v(\" unit\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//时间单位\")]),t._v(\"\\n                              \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"BlockingQueue\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Runnable\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" workQueue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//任务队列，用来储存等待执行任务的队列\")]),t._v(\"\\n                              \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadFactory\")]),t._v(\" threadFactory\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//线程工厂，用来创建线程，一般默认即可\")]),t._v(\"\\n                              \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"RejectedExecutionHandler\")]),t._v(\" handler\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务\")]),t._v(\"\\n                               \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"corePoolSize \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"||\")]),t._v(\"\\n            maximumPoolSize \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"||\")]),t._v(\"\\n            maximumPoolSize \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" corePoolSize \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"||\")]),t._v(\"\\n            keepAliveTime \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throw\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"IllegalArgumentException\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"workQueue \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"||\")]),t._v(\" threadFactory \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"||\")]),t._v(\" handler \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throw\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"NullPointerException\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"corePoolSize \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" corePoolSize\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"maximumPoolSize \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" maximumPoolSize\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"workQueue \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" workQueue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"keepAliveTime \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" unit\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"toNanos\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"keepAliveTime\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"threadFactory \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" threadFactory\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"handler \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" handler\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"17\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"18\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"19\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"20\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"21\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"22\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"23\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"24\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"25\")]),s(\"br\")])]),s(\"p\",[s(\"strong\",[s(\"code\",[t._v(\"ThreadPoolExecutor\")]),t._v(\" 3 个最重要的参数：\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"corePoolSize\")]),t._v(\" :\")]),t._v(\" 任务队列未达到队列容量时，\"),s(\"strong\",[t._v(\"最大可以同时运行的线程数量。\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"maximumPoolSize\")]),t._v(\" :\")]),t._v(\" 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"workQueue\")]),t._v(\":\")]),t._v(\" 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，\"),s(\"strong\",[t._v(\"新任务就会被存放在队列中。\")])])]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"ThreadPoolExecutor\")]),t._v(\"其他常见参数 :\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"keepAliveTime\")])]),t._v(\":线程池中的**线程数量大于 \"),s(\"code\",[t._v(\"corePoolSize\")]),t._v(\" 的时候，如果这时没有新的任务提交，多余的空闲线程不会立即销毁，而是会等待，直到等待的时间超过了 \"),s(\"code\",[t._v(\"keepAliveTime\")]),t._v(\"才会被回收销毁，**线程池回收线程时，\"),s(\"strong\",[t._v(\"会对核心线程和非核心线程一视同仁，直到线程池中线程的数量等于 \"),s(\"code\",[t._v(\"corePoolSize\")]),t._v(\" ，回收过程才会停止。\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"unit\")])]),t._v(\" : \"),s(\"code\",[t._v(\"keepAliveTime\")]),t._v(\" 参数的时间单位。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"threadFactory\")])]),t._v(\" :executor 创建新线程的时候会用到。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"handler\")])]),t._v(\" :饱和策略。关于饱和策略下面单独介绍一下。\")])]),t._v(\" \"),s(\"p\",[t._v(\"下面这张图可以加深你对线程池中各个参数的相互关系的理解（图片来源：《Java 性能调优实战》）：\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"D:%5Ccoding%5CPDF%E8%AE%B2%E4%B9%89%5CJavaGuide%5Cdocs%5Cjava%5Cconcurrent%5Cimages%5Cjava-thread-pool-summary%5C%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%90%84%E4%B8%AA%E5%8F%82%E6%95%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png\",alt:\"线程池各个参数的关系\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"线程池的饱和策略有哪些\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程池的饱和策略有哪些\"}},[t._v(\"#\")]),t._v(\" 线程池的饱和策略有哪些？\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时\")]),t._v(\"，\"),s(\"code\",[t._v(\"ThreadPoolTaskExecutor\")]),t._v(\" 定义一些策略:\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"ThreadPoolExecutor.AbortPolicy\")]),t._v(\"：\")]),t._v(\" 抛出 \"),s(\"code\",[t._v(\"RejectedExecutionException\")]),s(\"strong\",[t._v(\"来拒绝新任务的处理。\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"ThreadPoolExecutor.CallerRunsPolicy\")]),t._v(\"：\")]),t._v(\" 调用执行自己的线程运行任务，也就是直接在调用\"),s(\"code\",[t._v(\"execute\")]),t._v(\"方法的线程中运行(\"),s(\"code\",[t._v(\"run\")]),t._v(\")被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"ThreadPoolExecutor.DiscardPolicy\")]),t._v(\"：\")]),t._v(\" \"),s(\"strong\",[t._v(\"不处理新任务，直接丢弃掉。\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"ThreadPoolExecutor.DiscardOldestPolicy\")]),t._v(\"：\")]),t._v(\" 此策略将\"),s(\"strong\",[t._v(\"丢弃最早的未处理的任务请求。\")])])]),t._v(\" \"),s(\"p\",[t._v(\"举个例子：Spring 通过 \"),s(\"code\",[t._v(\"ThreadPoolTaskExecutor\")]),t._v(\" 或者我们直接通过 \"),s(\"code\",[t._v(\"ThreadPoolExecutor\")]),t._v(\" 的构造函数创建线程池的时候，当我们不指定 \"),s(\"code\",[t._v(\"RejectedExecutionHandler\")]),t._v(\" 饱和策略来配置线程池的时候，\"),s(\"strong\",[t._v(\"默认使用的是 \"),s(\"code\",[t._v(\"AbortPolicy\")]),t._v(\"。在这种饱和策略下，如果队列满了，\"),s(\"code\",[t._v(\"ThreadPoolExecutor\")]),t._v(\" 将抛出 \"),s(\"code\",[t._v(\"RejectedExecutionException\")]),t._v(\" 异常来拒绝新来的任务\")]),t._v(\" ，这代表你将丢失对这个任务的处理。如果不想丢弃任务的话，可以使用\"),s(\"code\",[t._v(\"CallerRunsPolicy\")]),t._v(\"。\"),s(\"code\",[t._v(\"CallerRunsPolicy\")]),t._v(\" 和其他的几个策略不同，它既不会抛弃任务，也不会抛出异常，而是将\"),s(\"strong\",[t._v(\"任务回退给调用者，使用调用者的线程来执行任务\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"CallerRunsPolicy\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"implements\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"RejectedExecutionHandler\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"CallerRunsPolicy\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"rejectedExecution\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Runnable\")]),t._v(\" r\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadPoolExecutor\")]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"isShutdown\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 直接主线程执行，而不是线程池中的线程执行\")]),t._v(\"\\n                r\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"run\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\")])]),s(\"h3\",{attrs:{id:\"线程池常用的阻塞队列有哪些\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程池常用的阻塞队列有哪些\"}},[t._v(\"#\")]),t._v(\" 线程池常用的阻塞队列有哪些？\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"不同的线程池会选用不同的阻塞队列，我们可以结合内置线程池来分析。\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"容量为 \"),s(\"code\",[t._v(\"Integer.MAX_VALUE\")]),t._v(\" 的 \"),s(\"code\",[t._v(\"LinkedBlockingQueue\")]),t._v(\"（无界队列）\")]),t._v(\"：\"),s(\"strong\",[s(\"code\",[t._v(\"FixedThreadPool\")]),t._v(\" 和 \"),s(\"code\",[t._v(\"SingleThreadExector\")]),t._v(\" 。\")]),s(\"code\",[t._v(\"FixedThreadPool\")]),t._v(\"最多只能创建核心线程数的线程（核心线程数和最大线程数相等），\"),s(\"code\",[t._v(\"SingleThreadExector\")]),t._v(\"只能创建一个线程（核心线程数和最大线程数都是 1），二者的任务队列永远不会被放满。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"SynchronousQueue\")]),t._v(\"（同步队列）：\"),s(\"code\",[t._v(\"CachedThreadPool\")])]),t._v(\" 。\"),s(\"code\",[t._v(\"SynchronousQueue\")]),t._v(\" \"),s(\"strong\",[t._v(\"没有容量，不存储元素，目的是保证对于提交的任务，如果有空闲线程，则使用空闲线程来处理；否则新建一个线程来处理任务。也就是说，\"),s(\"code\",[t._v(\"CachedThreadPool\")]),t._v(\" 的最大线程数是 \"),s(\"code\",[t._v(\"Integer.MAX_VALUE\")]),t._v(\" ，可以理解为线程数是可以无限扩展的，可能会创建大量线程，从而导致 OOM。\")])]),t._v(\" \"),s(\"li\",[s(\"code\",[t._v(\"DelayedWorkQueue\")]),t._v(\"（延迟阻塞队列）：\"),s(\"code\",[t._v(\"ScheduledThreadPool\")]),t._v(\" 和 \"),s(\"code\",[t._v(\"SingleThreadScheduledExecutor\")]),t._v(\" \"),s(\"strong\",[t._v(\"。\"),s(\"code\",[t._v(\"DelayedWorkQueue\")]),t._v(\" 的内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。\"),s(\"code\",[t._v(\"DelayedWorkQueue\")]),t._v(\" 添加元素满了之后会自动扩容原来容量的 1/2，即永远不会阻塞，最大扩容可达 \"),s(\"code\",[t._v(\"Integer.MAX_VALUE\")]),t._v(\"，所以最多只能创建核心线程数的线程。\")])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"线程池处理任务的流程了解吗\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程池处理任务的流程了解吗\"}},[t._v(\"#\")]),t._v(\" 线程池处理任务的流程了解吗？\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://oss.javaguide.cn/javaguide/%E5%9B%BE%E8%A7%A3%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.png\",alt:\"图解线程池实现原理\"}})]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"strong\",[t._v(\"如果当前运行的线程数小于核心线程数，那么就会新建一个线程来执行任务。\")])]),t._v(\" \"),s(\"li\",[t._v(\"如果当前运行的线程数等于或大于核心线程数，但是小于最大线程数，那么就把该任务放入到任务队列里等待执行。\")]),t._v(\" \"),s(\"li\",[t._v(\"如果向任务队列投放任务失败（任务队列已经满了），但是当前运行的线程数是小于最大线程数的，就新建一个线程来执行任务。\")]),t._v(\" \"),s(\"li\",[t._v(\"如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前任务会被拒绝，饱和策略会调用\"),s(\"code\",[t._v(\"RejectedExecutionHandler.rejectedExecution()\")]),t._v(\"方法。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"如何给线程池命名\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何给线程池命名\"}},[t._v(\"#\")]),t._v(\" 如何给线程池命名？\")]),t._v(\" \"),s(\"p\",[t._v(\"初始化线程池的时候需要显示命名（设置线程池名称前缀），有利于定位问题。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"默认情况下创建的线程名字类似 \"),s(\"code\",[t._v(\"pool-1-thread-n\")]),t._v(\" 这样的，没有业务含义，不利于我们定位问题。\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"C:%5CUsers%5C%E9%99%88%E6%B3%BD%E5%AE%87%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240418221312599.png\",alt:\"image-20240418221312599\"}})]),t._v(\" \"),s(\"p\",[t._v(\"给线程池里的线程命名通常有下面两种方式：\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"1、利用 guava 的 \"),s(\"code\",[t._v(\"ThreadFactoryBuilder\")])])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadFactory\")]),t._v(\" threadFactory \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadFactoryBuilder\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n                        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setNameFormat\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"threadNamePrefix \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"-%d\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n                        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setDaemon\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"build\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ExecutorService\")]),t._v(\" threadPool \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadPoolExecutor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"corePoolSize\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" maximumPoolSize\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" keepAliveTime\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"TimeUnit\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"MINUTES\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" workQueue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" threadFactory\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\")])]),s(\"p\",[s(\"strong\",[t._v(\"2、自己实现 \"),s(\"code\",[t._v(\"ThreadFactory\")]),t._v(\"。\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"import\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token import\"}},[s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"java\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"util\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"concurrent\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")])]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Executors\")])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"import\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token import\"}},[s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"java\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"util\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"concurrent\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")])]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadFactory\")])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"import\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token import\"}},[s(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"java\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"util\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"concurrent\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"atomic\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")])]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"AtomicInteger\")])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n * 线程工厂，它设置线程名称，有利于我们定位问题。\\n */\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"NamingThreadFactory\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"implements\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadFactory\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"AtomicInteger\")]),t._v(\" threadNum \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"AtomicInteger\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadFactory\")]),t._v(\" delegate\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" name\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n     * 创建一个带名字的线程池生产工厂\\n     */\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"NamingThreadFactory\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadFactory\")]),t._v(\" delegate\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" name\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"delegate \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" delegate\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"name \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" name\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// TODO consider uniquifying this\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"newThread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Runnable\")]),t._v(\" r\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Thread\")]),t._v(\" t \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" delegate\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"newThread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"r\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        t\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setName\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"name \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\" [#\"')]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" threadNum\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"incrementAndGet\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"]\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" t\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"17\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"18\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"19\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"20\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"21\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"22\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"23\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"24\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"25\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"26\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"27\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"28\")]),s(\"br\")])]),s(\"h3\",{attrs:{id:\"如何设定线程池的大小\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何设定线程池的大小\"}},[t._v(\"#\")]),t._v(\" 如何设定线程池的大小？\")]),t._v(\" \"),s(\"p\",[t._v(\"很多人甚至可能都会觉得把线程池配置过大一点比较好！我觉得这明显是有问题的。就拿我们生活中非常常见的一例子来说：\"),s(\"strong\",[t._v(\"并不是人多就能把事情做好，增加了沟通交流成本。你本来一件事情只需要 3 个人做，你硬是拉来了 6 个人，会提升做事效率嘛？我想并不会。\")]),t._v(\" 线程数量过多的影响也是和我们分配多少人做事情一样，对于多线程这个场景来说主要是增加了\"),s(\"strong\",[t._v(\"上下文切换\")]),t._v(\"成本。不清楚什么是上下文切换的话，可以看我下面的介绍。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上下文切换：\")]),t._v(\" \"),s(\"p\",[t._v(\"多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换回这个任务时，可以再加载这个任务的状态。\"),s(\"strong\",[t._v(\"任务从保存到再加载的过程就是一次上下文切换\")]),t._v(\"。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"上下文切换通常是计算密集型的\")]),t._v(\"。也就是说，它需要相当可观的处理器时间，在每秒几十上百次的切换中，每次切换都需要纳秒量级的时间。所以，上下文切换对系统来说意味着消耗大量的 CPU 时间，事实上，可能是操作系统中时间消耗最大的操作。\")]),t._v(\" \"),s(\"p\",[t._v(\"Linux 相比与其他操作系统（包括其他类 Unix 系统）有很多的优点，其中有一项就是，其上下文切换和模式切换的时间消耗非常少。\")])]),t._v(\" \"),s(\"p\",[t._v(\"类比于实现世界中的人类通过合作做某件事情，我们可以肯定的一点是线程池大小设置过大或者过小都会有问题，合适的才是最好。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"如果我们**设置的线程池数量太小的话，如果同一时间有大量任务/请求需要处理，可能会导致大量的请求/任务在任务队列中排队等待执行，甚至会出现任务队列满了之后任务/请求无法处理的情况，或者大量任务堆积在任务队列导致 OOM。**这样很明显是有问题的，CPU 根本没有得到充分利用。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"如果我们设置线程数量太大，大量线程可能会同时在争取 CPU 资源，这样会导致大量的上下文切换，从而增加线程的执行时间，影响了整体执行效率。\")])])]),t._v(\" \"),s(\"p\",[t._v(\"有一个简单并且适用面比较广的公式：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"CPU 密集型任务(N+1)：\")]),t._v(\" 这种任务消耗的主要是 CPU 资源，\"),s(\"strong\",[t._v(\"可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"I/O 密集型任务(2N)：\")]),t._v(\" 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。\"),s(\"strong\",[t._v(\"因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。\")])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"如何判断是 CPU 密集任务还是 IO 密集任务？\")])]),t._v(\" \"),s(\"p\",[t._v(\"CPU 密集型简单理解就是利用 CPU 计算能力的任务比如你在内存中对大量数据进行排序。但凡涉及到网络读取，文件读取这类都是 IO 密集型，这类任务的特点是 CPU 计算耗费时间相比于等待 IO 操作完成的时间来说很少，大部分时间都花在了等待 IO 操作完成上。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"🌈 拓展一下（参见：\"),s(\"a\",{attrs:{href:\"https://github.com/Snailclimb/JavaGuide/issues/1737\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"issue#1737\"),s(\"OutboundLink\")],1),t._v(\"）：\")]),t._v(\" \"),s(\"p\",[t._v(\"线程数更严谨的计算的方法应该是：\"),s(\"code\",[t._v(\"最佳线程数 = N（CPU 核心数）∗（1+WT（线程等待时间）/ST（线程计算时间））\")]),t._v(\"，其中 \"),s(\"code\",[t._v(\"WT（线程等待时间）=线程运行总时间 - ST（线程计算时间）\")]),t._v(\"。\")]),t._v(\" \"),s(\"p\",[t._v(\"线程等待时间所占比例越高，需要越多线程。线程计算时间所占比例越高，需要越少线程。\")]),t._v(\" \"),s(\"p\",[t._v(\"我们可以通过 JDK 自带的工具 VisualVM 来查看 \"),s(\"code\",[t._v(\"WT/ST\")]),t._v(\" 比例。\")]),t._v(\" \"),s(\"p\",[t._v(\"CPU 密集型任务的 \"),s(\"code\",[t._v(\"WT/ST\")]),t._v(\" 接近或者等于 0，因此， 线程数可以设置为 N（CPU 核心数）∗（1+0）= N，和我们上面说的 N（CPU 核心数）+1 差不多。\")]),t._v(\" \"),s(\"p\",[t._v(\"IO 密集型任务下，几乎全是线程等待时间，从理论上来说，你就可以将线程数设置为 2N（按道理来说，WT/ST 的结果应该比较大，这里选择 2N 的原因应该是为了避免创建过多线程吧）。\")])]),t._v(\" \"),s(\"p\",[t._v(\"公示也只是参考，具体还是要根据项目实际线上运行情况来动态调整。我在后面介绍的美团的线程池参数动态配置这种方案就非常不错，很实用！\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"如何动态修改线程池的参数\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何动态修改线程池的参数\"}},[t._v(\"#\")]),t._v(\" 如何动态修改线程池的参数？\")]),t._v(\" \"),s(\"p\",[t._v(\"美团技术团队在\"),s(\"a\",{attrs:{href:\"https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"《Java 线程池实现原理及其在美团业务中的实践》\"),s(\"OutboundLink\")],1),t._v(\"这篇文章中介绍到对线程池参数实现可自定义配置的思路和方法。\")]),t._v(\" \"),s(\"p\",[t._v(\"美团技术团队的思路是主要对线程池的核心参数实现自定义可配置。这三个核心参数是：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"corePoolSize\")]),t._v(\" :\")]),t._v(\" 核心线程数线程数定义了最小可以同时运行的线程数量。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"maximumPoolSize\")]),t._v(\" :\")]),t._v(\" 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"code\",[t._v(\"workQueue\")]),t._v(\":\")]),t._v(\" 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"为什么是这三个参数？\")])]),t._v(\" \"),s(\"p\",[t._v(\"我在\"),s(\"a\",{attrs:{href:\"https://javaguide.cn/java/concurrent/java-thread-pool-summary.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Java 线程池详解\"),s(\"OutboundLink\")],1),t._v(\" 这篇文章中就说过这三个参数是 \"),s(\"code\",[t._v(\"ThreadPoolExecutor\")]),t._v(\" 最重要的参数，它们基本决定了线程池对于任务的处理策略。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"如何支持参数动态配置？\")]),t._v(\" 且看 \"),s(\"code\",[t._v(\"ThreadPoolExecutor\")]),t._v(\" 提供的下面这些方法。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/concurrent/threadpoolexecutor-methods.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"格外需要注意的是\"),s(\"code\",[t._v(\"corePoolSize\")]),t._v(\"， 程序运行期间的时候，我们调用 \"),s(\"code\",[t._v(\"setCorePoolSize（）\")]),t._v(\"这个方法的话，线程池会首先判断当前工作线程数是否大于\"),s(\"code\",[t._v(\"corePoolSize\")]),t._v(\"，如果大于的话就会回收工作线程。\")]),t._v(\" \"),s(\"p\",[t._v(\"另外，你也看到了上面并没有动态指定队列长度的方法，美团的方式是自定义了一个叫做 \"),s(\"code\",[t._v(\"ResizableCapacityLinkedBlockIngQueue\")]),t._v(\" 的队列（主要就是把\"),s(\"code\",[t._v(\"LinkedBlockingQueue\")]),t._v(\"的 capacity 字段的 final 关键字修饰给去掉了，让它变为可变的）。\")]),t._v(\" \"),s(\"p\",[t._v(\"最终实现的可动态修改线程池参数效果如下。👏👏👏\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/concurrent/meituan-dynamically-configuring-thread-pool-parameters.png\",alt:\"动态配置线程池参数最终效果\"}})]),t._v(\" \"),s(\"p\",[t._v(\"还没看够？推荐 why 神的\"),s(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s/9HLuPcoWmTqAeFKa1kj-_A\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"如何设置线程池参数？美团给出了一个让面试官虎躯一震的回答。\"),s(\"OutboundLink\")],1),t._v(\"这篇文章，深度剖析，很不错哦！\")]),t._v(\" \"),s(\"p\",[t._v(\"如果我们的项目也想要实现这种效果的话，可以借助现成的开源项目：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[s(\"a\",{attrs:{href:\"https://github.com/opengoofy/hippo4j\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Hippo4j\"),s(\"OutboundLink\")],1)]),t._v(\"：异步线程池框架，支持线程池动态变更&监控&报警，无需修改代码轻松引入。支持多种使用模式，轻松引入，致力于提高系统运行保障能力。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[s(\"a\",{attrs:{href:\"https://github.com/dromara/dynamic-tp\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Dynamic TP\"),s(\"OutboundLink\")],1)]),t._v(\"：轻量级动态线程池，内置监控告警功能，集成三方中间件线程池管理，基于主流配置中心（已支持 Nacos、Apollo，Zookeeper、Consul、Etcd，可通过 SPI 自定义实现）。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"如何设计一个能够根据任务的优先级来执行的线程池\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何设计一个能够根据任务的优先级来执行的线程池\"}},[t._v(\"#\")]),t._v(\" 如何设计一个能够根据任务的优先级来执行的线程池？\")]),t._v(\" \"),s(\"p\",[t._v(\"这是一个常见的面试问题，本质其实还是在考察求职者对于线程池以及阻塞队列的掌握。\")]),t._v(\" \"),s(\"p\",[t._v(\"我们上面也提到了，不同的线程池会选用不同的阻塞队列作为任务队列，比如\"),s(\"code\",[t._v(\"FixedThreadPool\")]),t._v(\" 使用的是\"),s(\"code\",[t._v(\"LinkedBlockingQueue\")]),t._v(\"（无界队列），由于队列永远不会被放满，因此\"),s(\"code\",[t._v(\"FixedThreadPool\")]),t._v(\"最多只能创建核心线程数的线程。\")]),t._v(\" \"),s(\"p\",[t._v(\"假如我们需要实现一个优先级任务线程池的话，那可以考虑使用 \"),s(\"code\",[t._v(\"PriorityBlockingQueue\")]),t._v(\" （优先级阻塞队列）作为任务队列（\"),s(\"code\",[t._v(\"ThreadPoolExecutor\")]),t._v(\" 的构造函数有一个 \"),s(\"code\",[t._v(\"workQueue\")]),t._v(\" 参数可以传入任务队列）。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/concurrent/common-parameters-of-threadpool-workqueue.jpg\",alt:\"ThreadPoolExecutor构造函数\"}})]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"PriorityBlockingQueue\")]),t._v(\" 是一个支持优先级的无界阻塞队列，可以看作是线程安全的 \"),s(\"code\",[t._v(\"PriorityQueue\")]),t._v(\"，两者底层都是使用小顶堆形式的二叉堆，即值最小的元素优先出队。不过，\"),s(\"code\",[t._v(\"PriorityQueue\")]),t._v(\" 不支持阻塞操作。\")]),t._v(\" \"),s(\"p\",[t._v(\"要想让 \"),s(\"code\",[t._v(\"PriorityBlockingQueue\")]),t._v(\" 实现对任务的排序，传入其中的任务必须是具备排序能力的，方式有两种：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"提交到线程池的任务实现 \"),s(\"code\",[t._v(\"Comparable\")]),t._v(\" 接口，并重写 \"),s(\"code\",[t._v(\"compareTo\")]),t._v(\" 方法来指定任务之间的优先级比较规则。\")]),t._v(\" \"),s(\"li\",[t._v(\"创建 \"),s(\"code\",[t._v(\"PriorityBlockingQueue\")]),t._v(\" 时传入一个 \"),s(\"code\",[t._v(\"Comparator\")]),t._v(\" 对象来指定任务之间的排序规则(推荐)。\")])]),t._v(\" \"),s(\"p\",[t._v(\"不过，这存在一些风险和问题，比如：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"code\",[t._v(\"PriorityBlockingQueue\")]),t._v(\" 是无界的，可能堆积大量的请求，从而导致 OOM。\")]),t._v(\" \"),s(\"li\",[t._v(\"可能会导致饥饿问题，即低优先级的任务长时间得不到执行。\")]),t._v(\" \"),s(\"li\",[t._v(\"由于需要对队列中的元素进行排序操作以及保证线程安全（并发控制采用的是可重入锁 \"),s(\"code\",[t._v(\"ReentrantLock\")]),t._v(\"），因此会降低性能。\")])]),t._v(\" \"),s(\"p\",[t._v(\"对于 OOM 这个问题的解决比较简单粗暴，就是继承\"),s(\"code\",[t._v(\"PriorityBlockingQueue\")]),t._v(\" 并重写一下 \"),s(\"code\",[t._v(\"offer\")]),t._v(\" 方法(入队)的逻辑，当插入的元素数量超过指定值就返回 false 。\")]),t._v(\" \"),s(\"p\",[t._v(\"饥饿问题这个可以通过优化设计来解决（比较麻烦），比如等待时间过长的任务会被移除并重新添加到队列中，但是优先级会被提升。\")]),t._v(\" \"),s(\"p\",[t._v(\"对于性能方面的影响，是没办法避免的，毕竟需要对任务进行排序操作。并且，对于大部分业务场景来说，这点性能影响是可以接受的。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"future对象\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#future对象\"}},[t._v(\"#\")]),t._v(\" Future对象\")]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"Future\")]),t._v(\" 类是异步思想的典型运用，\"),s(\"strong\",[t._v(\"主要用在一些需要执行耗时任务的场景，避免程序一直原地等待耗时任务执行完成，执行效率太低。具体来说是这样的：当我们执行某一耗时的任务时，可以将这个耗时任务交给一个子线程去异步执行，同时我们可以干点其他事情，不用傻傻等待耗时任务执行完成。等我们的事情干完后，我们再通过 \"),s(\"code\",[t._v(\"Future\")]),t._v(\" 类获取到耗时任务的执行结果。这样一来，程序的执行效率就明显提高了。\")])]),t._v(\" \"),s(\"p\",[t._v(\"这其实就是多线程中经典的 \"),s(\"strong\",[t._v(\"Future 模式\")]),t._v(\"，你可以将其看作是一种设计模式，核心思想是异步调用，主要用在多线程领域，并非 Java 语言独有。\")]),t._v(\" \"),s(\"p\",[t._v(\"在 Java 中，\"),s(\"strong\",[s(\"code\",[t._v(\"Future\")]),t._v(\" 类只是一个泛型接口\")]),t._v(\"，位于 \"),s(\"code\",[t._v(\"java.util.concurrent\")]),t._v(\" 包下，其中定义了 5 个方法，主要包括下面这 4 个功能：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"取消任务；\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"判断任务是否被取消;\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"判断任务是否已经执行完成;\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"获取任务执行结果。\")])])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// V 代表了Future执行的任务返回值的类型\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Future\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"V\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 取消任务执行\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 成功取消返回 true，否则返回 false\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"boolean\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"cancel\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"boolean\")]),t._v(\" mayInterruptIfRunning\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 判断任务是否被取消\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"boolean\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"isCancelled\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 判断任务是否已经执行完成\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"boolean\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"isDone\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 获取任务执行结果\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"V\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ExecutionException\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 指定时间内没有返回计算结果就抛出 TimeOutException 异常\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"V\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" timeout\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"TimeUnit\")]),t._v(\" unit\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ExecutionException\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"TimeoutExceptio\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"17\")]),s(\"br\")])]),s(\"p\",[t._v(\"简单理解就是：我有一个任务，提交给了 \"),s(\"code\",[t._v(\"Future\")]),t._v(\" 来处理。任务执行期间我自己可以去做任何想做的事情。并且，在这期间我还可以取消任务以及获取任务的执行状态。一段时间之后，\"),s(\"strong\",[t._v(\"我就可以 \"),s(\"code\",[t._v(\"Future\")]),t._v(\" 那里直接取出任务执行结果。\")])]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"Future\")]),t._v(\" 类是 Java 并发编程中用于表示异步计算结果的接口。它允许我们提交一个任务给线程池执行，并在将来的某个时候获取任务的执行结果。通过 \"),s(\"code\",[t._v(\"Future\")]),t._v(\"，我们可以在任务执行的过程中继续进行其他操作，而不需要阻塞等待任务完成。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"主要特点和用法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#主要特点和用法\"}},[t._v(\"#\")]),t._v(\" 主要特点和用法\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"提交任务并获取结果\")]),t._v(\"：\\n\"),s(\"strong\",[t._v(\"使用 \"),s(\"code\",[t._v(\"ExecutorService\")]),t._v(\" 的 \"),s(\"code\",[t._v(\"submit()\")]),t._v(\" 方法可以提交一个任务，并返回一个 \"),s(\"code\",[t._v(\"Future\")]),t._v(\" 对象，通过这个 \"),s(\"code\",[t._v(\"Future\")]),t._v(\" 对象可以获取任务执行的结果。\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ExecutorService\")]),t._v(\" executor \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Executors\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"newFixedThreadPool\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Future\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Integer\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" futureResult \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" executor\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"submit\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"->\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 执行耗时任务，返回结果\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"42\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 在需要时获取任务结果\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"try\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Integer\")]),t._v(\" result \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" futureResult\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 阻塞等待任务完成，并获取结果\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Task result: \"')]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" result\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"catch\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"|\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ExecutionException\")]),t._v(\" e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    e\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"printStackTrace\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 关闭线程池\")]),t._v(\"\\nexecutor\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"shutdown\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),s(\"br\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"异步获取任务结果\")]),t._v(\"：\\n\"),s(\"code\",[t._v(\"Future\")]),t._v(\" 提供了 \"),s(\"strong\",[s(\"code\",[t._v(\"get()\")]),t._v(\" 方法用于获取任务的执行结果，如果任务尚未完成，则 \"),s(\"code\",[t._v(\"get()\")]),t._v(\" 方法会阻塞当前线程，直到任务完成并返回结果或抛出异常。\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"取消任务\")]),t._v(\"：\\n\"),s(\"strong\",[s(\"code\",[t._v(\"Future\")]),t._v(\" 提供了 \"),s(\"code\",[t._v(\"cancel()\")]),t._v(\" 方法用于取消任务的执行。可以传入一个 \"),s(\"code\",[t._v(\"mayInterruptIfRunning\")]),t._v(\" 参数，表示如果任务正在运行，是否中断任务。取消成功返回 \"),s(\"code\",[t._v(\"true\")]),t._v(\"，否则返回 \"),s(\"code\",[t._v(\"false\")]),t._v(\"。\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[t._v(\"futureResult\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"cancel\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[t._v(\"true\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 取消任务的执行\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"检查任务状态\")]),t._v(\"：\\n\"),s(\"code\",[t._v(\"Future\")]),t._v(\" 提供了 \"),s(\"code\",[t._v(\"isDone()\")]),t._v(\" 和 \"),s(\"code\",[t._v(\"isCancelled()\")]),t._v(\" 方法用于检查任务是否完成或已取消。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"futureResult\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"isDone\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 任务已完成\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\")])])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"实现类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现类\"}},[t._v(\"#\")]),t._v(\" 实现类\")]),t._v(\" \"),s(\"p\",[s(\"code\",[t._v(\"Future\")]),t._v(\" 接口的常见实现类包括：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[s(\"strong\",[s(\"code\",[t._v(\"FutureTask<V>\")])]),t._v(\"：\\n\"),s(\"code\",[t._v(\"FutureTask\")]),t._v(\" 实现了 \"),s(\"code\",[t._v(\"RunnableFuture\")]),t._v(\" 接口，既可以作为 \"),s(\"code\",[t._v(\"Runnable\")]),t._v(\" 执行，也可以作为 \"),s(\"code\",[t._v(\"Future\")]),t._v(\" 获取结果。它可以包装一个 \"),s(\"code\",[t._v(\"Callable\")]),t._v(\" 或者 \"),s(\"code\",[t._v(\"Runnable\")]),t._v(\" 对象，并在完成时获取结果。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[s(\"code\",[t._v(\"CompletableFuture<T>\")])]),t._v(\"：\\n\"),s(\"code\",[t._v(\"CompletableFuture\")]),t._v(\" 是 Java 8 引入的一个非常强大的异步编程工具，它实现了 \"),s(\"code\",[t._v(\"Future\")]),t._v(\" 和 \"),s(\"code\",[t._v(\"CompletionStage\")]),t._v(\" 接口，提供了丰富的操作方法，支持链式调用和组合多个异步任务。\")])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"使用场景\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用场景\"}},[t._v(\"#\")]),t._v(\" 使用场景\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"异步任务执行\")]),t._v(\"：\\n将耗时的任务提交给线程池异步执行，并在需要时获取执行结果，避免阻塞主线程。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"任务取消和超时处理\")]),t._v(\"：\\n可以使用 \"),s(\"code\",[t._v(\"Future\")]),t._v(\" 的 \"),s(\"code\",[t._v(\"cancel()\")]),t._v(\" 方法取消任务的执行，或者通过 \"),s(\"code\",[t._v(\"get(long timeout, TimeUnit unit)\")]),t._v(\" 方法设置任务超时时间。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"并发任务控制\")]),t._v(\"：\\n可以通过 \"),s(\"code\",[t._v(\"Future\")]),t._v(\" 实现并发任务的协调和控制，如等待多个任务完成后再执行后续操作。\")])])]),t._v(\" \"),s(\"p\",[t._v(\"总之，\"),s(\"code\",[t._v(\"Future\")]),t._v(\" 类是 Java 并发编程中用于表示异步计算结果的重要接口，通过它可以实现异步任务的提交、结果获取、取消和状态检查等操作，提高了多线程编程的灵活性和效率。在 Java 8 中引入的 \"),s(\"code\",[t._v(\"CompletableFuture\")]),t._v(\" 进一步丰富了异步编程的功能，推荐在新的项目中使用 \"),s(\"code\",[t._v(\"CompletableFuture\")]),t._v(\" 来处理异步任务。\")])])}),[],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}