{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{492:function(t,v,_){\"use strict\";_.r(v);var r=_(4),o=Object(r.a)({},(function(){var t=this,v=t._self._c;return v(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[v(\"h1\",{attrs:{id:\"计网面试题\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#计网面试题\"}},[t._v(\"#\")]),t._v(\" 计网面试题\")]),t._v(\" \"),v(\"h2\",{attrs:{id:\"http-有哪些常⻅的状态码\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-有哪些常⻅的状态码\"}},[t._v(\"#\")]),t._v(\" HTTP 有哪些常⻅的状态码？\")]),t._v(\" \"),v(\"p\",[t._v(\"HTTP（超⽂本传输协议）常⻅的状态码有以下⼏种：\")]),t._v(\" \"),v(\"p\",[v(\"strong\",[t._v(\"1xx（信息类状态码）：指示已经接收到请求，正在继续处理。\")])]),t._v(\" \"),v(\"p\",[t._v(\"2xx（成功状态码）：指示请求已经被接收、理解和接受。 200 OK：请求已成功处理。 201 Created：请求已经被实现，⽽且有⼀个新的资源已经依据请求的需要⽽建⽴。 204 No Content：服务器已经成功处理了请求，但是没有返回任何实体内容。\")]),t._v(\" \"),v(\"p\",[v(\"strong\",[t._v(\"3xx（重定向状态码）：需要进⾏附加操作以完成请求。\")]),t._v(\" 301 Moved Permanently：请求的⽹⻚已永久移动到新位置。 302 Found：请求的⽹⻚已经临时移动到新位置。 304 Not Modified：客户端发送了⼀个带条件的请求，服务器端允许请求访问资源，但是 请求未满⾜条件。\")]),t._v(\" \"),v(\"p\",[v(\"strong\",[t._v(\"4xx（客户端错误状态码）\")]),t._v(\"：请求包含错误语法或不能被执⾏。 400 Bad Request：请求报⽂存在语法错误。 401 Unauthorized：表示发送的请求需要有通过 HTTP 认证的认证信息。 403 Forbidden：表示对请求资源的访问被服务器拒绝。 404 Not Found：请求的资源不存在。\")]),t._v(\" \"),v(\"p\",[v(\"strong\",[t._v(\"5xx（服务器错误状态码\")]),t._v(\"）：服务器在处理请求的过程中发⽣了错误。 500 Internal Server Error：服务器遇到了⼀个未曾预料的状况，导致⽆法完成对请求的处 理。 \"),v(\"strong\",[t._v(\"502 Bad Gateway：充当⽹关或代理的服务器，从远端服务器接收到了⼀个⽆效的请求。 503 Service Unavailable：服务器暂时处于超负载或正在停机维护，⽆法处理请求。\")])]),t._v(\" \"),v(\"h2\",{attrs:{id:\"tcp-和-udp-协议有什么区别-分别适用于什么场景\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-和-udp-协议有什么区别-分别适用于什么场景\"}},[t._v(\"#\")]),t._v(\" TCP 和 UDP 协议有什么区别，分别适⽤于什么场景？\")]),t._v(\" \"),v(\"p\",[t._v(\"TCP（Transmission Control Protocol）和 UDP（User Datagram Protocol）是两种常⽤的传输层协议，\")]),t._v(\" \"),v(\"p\",[t._v(\"它们有以下的区别：\")]),t._v(\" \"),v(\"p\",[t._v(\"1、\"),v(\"strong\",[t._v(\"连接⽅⾯\")]),t._v(\" TCP 是⾯向连接的协议，⽽ UDP 是⽆连接的协议。在 TCP 中，发送⽅和接收⽅必须先建⽴ 连接，然后才能传输数据。UDP 则不需要建⽴连接，直接发送数据即可。\")]),t._v(\" \"),v(\"p\",[t._v(\"2、\"),v(\"strong\",[t._v(\"可靠性\")]),t._v(\" TCP 保证数据传输的可靠性，通过序列号、确认应答和重传机制等⽅式来保证数据的完整性 和正确性。UDP 则不保证数据传输的可靠性，因为它不提供确认和重传机制。\")]),t._v(\" \"),v(\"p\",[t._v(\"3、\"),v(\"strong\",[t._v(\"传输速度\")]),t._v(\" 因为 TCP 要保证数据传输的可靠性，所以在传输速度⽅⾯相对较慢。⽽ UDP 则不需要进⾏复杂的传输控制，因此传输速度更快。\")]),t._v(\" \"),v(\"p\",[t._v(\"4、\"),v(\"strong\",[t._v(\"传输内容\")]),t._v(\" TCP 是⼀种⾯向字节流的协议，将数据看作是⼀连串的字节流，没有明确的消息边界。UDP 则是⾯向报⽂的协议，将数据看作是⼀系列的报⽂，每个报⽂是⼀个独⽴的单元，具有明确的 消息边界。\")]),t._v(\" \"),v(\"p\",[t._v(\"基于以上的特点，TCP 和 UDP 适⽤于不同的场景。\"),v(\"strong\",[t._v(\"TCP 适⽤于对传输可靠性要求⽐较⾼的 场景，例如⽹⻚浏览、⽂件传输、邮件等。⽽ UDP 则适⽤于对传输可靠性要求较低、传输速 度要求较⾼的场景，例如在线游戏、视频直播等。\")])]),t._v(\" \"),v(\"h2\",{attrs:{id:\"http-协议中-get-和-post-有什么区别-分别适用于什么场景\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-协议中-get-和-post-有什么区别-分别适用于什么场景\"}},[t._v(\"#\")]),t._v(\" HTTP 协议中 GET 和 POST 有什么区别？分别适⽤于什么场景？\")]),t._v(\" \"),v(\"p\",[t._v(\"HTTP 协议中 GET 和 POST 是两种常⽤的请求⽅法，它们的区别如下：\")]),t._v(\" \"),v(\"ol\",[v(\"li\",[v(\"strong\",[t._v(\"参数传递⽅式不同： GET 请求参数是在 URL 中以键值对的形式传递\")]),t._v(\"的，例如：http://www.example.com /?key1=value1&key2=value2。 ⽽ \"),v(\"strong\",[t._v(\"POST 请求参数是在请求体中以键值对的形式传递的。\")])]),t._v(\" \"),v(\"li\",[v(\"strong\",[t._v(\"参数传递⼤⼩不同\")]),t._v(\"： GET 请求参数有⼤⼩限制，因为 URL ⻓度有限制，不同的浏览器和服 务器对 URL ⻓度的限制不同，⼀般为 2048 个字符。⽽ POST 请求参数没有⼤⼩限制， 因为它们是以请求体的形式传递的。\")]),t._v(\" \"),v(\"li\",[v(\"strong\",[t._v(\"安全性不同\")]),t._v(\"： GET 请求的参数是明⽂传输的，因为参数在 URL 中，如果涉及敏感信息（如密 码），容易被窃取或暴露在浏览器历史记录、代理服务器⽇志等地⽅。 ⽽ POST 请求的参数在请求体中传输，相对安全⼀些，但是也需要注意参数加密和防 ⽌ CSRF 攻击等问题。\")]),t._v(\" \"),v(\"li\",[t._v(\"GET 和 POST 适⽤的场景不同： \"),v(\"strong\",[t._v(\"GET 请求适⽤于获取数据，如浏览⽹⻚、搜索等。因为 GET 请求参数以明⽂形式传 输，容易被拦截和篡改，所以不适⽤于提交敏感信息的操作。\")]),t._v(\" POST 请求适⽤于提交数据，如登录、注册、发布内容等。因为 POST 请求参数在请 求体中传输，相对安全⼀些，可以提交敏感信息，但是需要注意参数加密和防⽌ CSRF 攻击等问题\")])])])}),[],!1,null,null,null);v.default=o.exports}}]);","extractedComments":[]}