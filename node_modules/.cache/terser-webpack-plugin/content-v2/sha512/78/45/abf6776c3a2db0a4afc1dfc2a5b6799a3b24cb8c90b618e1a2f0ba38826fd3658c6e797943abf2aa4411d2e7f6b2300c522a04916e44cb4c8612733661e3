{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{378:function(s,a,t){\"use strict\";t.r(a);var n=t(4),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"java面试题\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java面试题\"}},[s._v(\"#\")]),s._v(\" Java面试题\")]),s._v(\" \"),a(\"p\",[s._v(\"主要以问答的形式来记一些知识点，然后有些是散装的各种东东。\")]),s._v(\" \"),a(\"h2\",{attrs:{id:\"_1、jdk-和-jre-和-jvm-分别是什么-有什么区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、jdk-和-jre-和-jvm-分别是什么-有什么区别\"}},[s._v(\"#\")]),s._v(\" 1、JDK 和 JRE 和 JVM 分别是什么，有什么区别？\")]),s._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[s._v(\"JDK（Java Development Kit）：JDK 是 Java 开发⼯具包，包含了编写、编译、调试和 运⾏ Java 程序所需的所有⼯具和组件，⽐如编译器（javac）、Java API、调试⼯具等。 JDK 是针对 Java 开发⼈员的，它包含了 JRE，还有编译器和其他⼯具，可以⽤来编写和 调试 Java 程序。\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"JRE（Java Runtime Environment）：JRE 是 Java 运⾏时环境，包括了 Java 虚拟机 （JVM）和 Java 标准类库（Java API）。JRE 是针对 Java 应⽤程序的，它提供了在计 算机上运⾏ Java 应⽤程序所需的最⼩环境。\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"JVM（Java Virtual Machine）：JVM 是 Java 虚拟机，是 Java 程序运⾏的环境。JVM 负责将 Java 代码解释或编译为本地机器代码，并在运⾏时提供必要的环境⽀持，⽐如内 存管理、垃圾回收、安全性等。JVM 的主要作⽤是将 Java 代码转换为可以在计算机上运 ⾏的机器码，并负责程序的执⾏。\")])])]),s._v(\" \"),a(\"p\",[s._v(\"综上所述，JDK、JRE 和 JVM 之间的区别可以总结如下：\")]),s._v(\" \"),a(\"p\",[s._v(\"**JDK 是 Java 开发⼯具包，**包括了编译器、Java API、调试⼯具等，⽤于开发 Java 应⽤程序。\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"JRE 是 Java 运⾏时环境，包括了 Java 虚拟机和 Java 标准类库，⽤于在计算机上运⾏ Java 应⽤程序。\")])]),s._v(\" \"),a(\"p\",[s._v(\"JVM 是 Java 虚拟机，是 Java 程序运⾏的环境，负责将 Java 代码转换为可以在计算机 上运⾏的机器码，并提供必要的环境⽀持\")]),s._v(\" \"),a(\"p\",[s._v(\"搞清楚这个问题，我觉得⾸先你要清楚 Java 程序是如何在计算机上运⾏的。\")]),s._v(\" \"),a(\"p\",[s._v(\"1.编写Java源代码；--------需要⽤到JDK,Java Development KitJava (Java开发⼯具包)\")]),s._v(\" \"),a(\"p\",[s._v(\"2.将J\"),a(\"strong\",[s._v(\"ava源代码编译成字节码；---------需要⽤到JAVA开发⼯具包中的编译器（javac.exe）， ⽣产.class⽂件\")])]),s._v(\" \"),a(\"p\",[s._v(\"3.\"),a(\"strong\",[s._v(\"Java虚拟机（JVM）将字节码转换成机器码\")]),s._v(\"；-------需要⽤到 Java Virtual Machine (Java 虚拟机)\")]),s._v(\" \"),a(\"p\",[s._v(\"4.操作系统执⾏机器码，\"),a(\"strong\",[s._v(\"完成程序的运⾏。---------需要⽤到Java Runtime Environment (Java 运⾏环境)\")])]),s._v(\" \"),a(\"p\",[s._v(\"JDK 全称 Java Development KitJava (Java开发⼯具包)，就是包含了开发Java 程序时所需 的⽂件包。\")]),s._v(\" \"),a(\"p\",[s._v(\"JRE 全称 Java Runtime Environment (Java 运⾏环境)，就是运⾏Java 程序时所需的⽂件 包。\")]),s._v(\" \"),a(\"p\",[s._v(\"JVM 全称 Java Virtual Machine (Java虚拟机)，是可运⾏Java代码的假想计算机。在Java虚拟机上⽣成可运⾏的字节码，移植到在其他平台上时可不加修改地运⾏。\")]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20240325185932024.png\",alt:\"image-20240325185932024\"}})]),s._v(\" \"),a(\"p\",[s._v(\"JVM 可以理解的代码就叫做字节码（即扩展名为 \"),a(\"code\",[s._v(\".class\")]),s._v(\" 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。\")]),s._v(\" \"),a(\"h2\",{attrs:{id:\"编译型与解释型\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#编译型与解释型\"}},[s._v(\"#\")]),s._v(\" 编译型与解释型\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[s._v(\"编译型\")]),s._v(\"：\"),a(\"a\",{attrs:{href:\"https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E8%AA%9E%E8%A8%80\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"编译型语言open in new window\"),a(\"OutboundLink\")],1),s._v(\" 会通过\"),a(\"a\",{attrs:{href:\"https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E5%99%A8\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"编译器open in new window\"),a(\"OutboundLink\")],1),s._v(\"将源代码一次性翻译成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。\")]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"解释型\")]),s._v(\"：\"),a(\"a\",{attrs:{href:\"https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"解释型语言open in new window\"),a(\"OutboundLink\")],1),s._v(\"会通过\"),a(\"a\",{attrs:{href:\"https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E5%99%A8\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"解释器open in new window\"),a(\"OutboundLink\")],1),s._v(\"一句一句的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。\")])]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/basis/compiled-and-interpreted-languages.png\",alt:\"编译型语言和解释型语言\"}}),s._v(\"编译型语言和解释型语言\")]),s._v(\" \"),a(\"h2\",{attrs:{id:\"自增自减\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#自增自减\"}},[s._v(\"#\")]),s._v(\" 自增自减\")]),s._v(\" \"),a(\"p\",[s._v(\"++ 和 -- 运算符可以放在变量之前，也可以放在变量之后，当运算符放在变量之前时(前缀)，先自增/减，再赋值；当运算符放在变量之后时(后缀)，先赋值，再自增/减。\")]),s._v(\" \"),a(\"p\",[s._v(\"例如，\"),a(\"strong\",[s._v(\"当 \"),a(\"code\",[s._v(\"b = ++a\")]),s._v(\" 时，先自增（自己增加 1），再赋值（赋值给 b）\")]),s._v(\"；当 \"),a(\"code\",[s._v(\"b = a++\")]),s._v(\" 时，先赋值(赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++输出的是 a 值。用一句口诀就是：“符号在前就先加/减，符号在后就后加/减”。\")]),s._v(\" \"),a(\"h2\",{attrs:{id:\"移位运算符\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#移位运算符\"}},[s._v(\"#\")]),s._v(\" 移位运算符\")]),s._v(\" \"),a(\"p\",[s._v(\"移位运算符是最基本的运算符之一，几乎每种编程语言都包含这一运算符。移位操作中，被操作的数据被视为二进制数，移位就是将其向左或向右移动若干位的运算。\")]),s._v(\" \"),a(\"p\",[s._v(\"在 Java 代码里使用 \"),a(\"code\",[s._v(\"<<\")]),s._v(\"、 \"),a(\"code\",[s._v(\">>\")]),s._v(\" 和\"),a(\"code\",[s._v(\">>>\")]),s._v(\"转换成的指令码运行起来会更高效些。\")]),s._v(\" \"),a(\"p\",[s._v(\"掌握最基本的移位运算符知识还是很有必要的，这不光可以帮助我们在代码中使用，还可以帮助我们理解源码中涉及到移位运算符的代码。\")]),s._v(\" \"),a(\"p\",[s._v(\"Java 中有三种移位运算符：\")]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/basis/shift-operator.png\",alt:\"Java 移位运算符总结\"}}),s._v(\"Java 移位运算符总结\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[s._v(\"<<\")]),s._v(\" :左移运算符，向左移若干位，\"),a(\"strong\",[s._v(\"高位丢弃，低位补零。\"),a(\"code\",[s._v(\"x << 1\")]),s._v(\",相当于 x 乘以 2(不溢出的情况下)。\")])]),s._v(\" \"),a(\"li\",[a(\"code\",[s._v(\">>\")]),s._v(\" :\"),a(\"strong\",[s._v(\"带符号右移\")]),s._v(\"，向右移若干位，\"),a(\"strong\",[s._v(\"高位补符号位，低位丢弃\")]),s._v(\"。正数高位补 0,负数高位补 1。\"),a(\"strong\",[a(\"code\",[s._v(\"x >> 1\")]),s._v(\",相当于 x 除以 2。\")])]),s._v(\" \"),a(\"li\",[a(\"code\",[s._v(\">>>\")]),s._v(\" :无符号右移，忽略符号位，空位都以 0 补齐。\")])]),s._v(\" \"),a(\"p\",[s._v(\"由于 \"),a(\"code\",[s._v(\"double\")]),s._v(\"，\"),a(\"code\",[s._v(\"float\")]),s._v(\" 在二进制中的表现比较特殊，因此不能来进行移位操作。\")]),s._v(\" \"),a(\"p\",[s._v(\"移位操作符实际上支持的类型只有\"),a(\"code\",[s._v(\"int\")]),s._v(\"和\"),a(\"code\",[s._v(\"long\")]),s._v(\"，编译器在对\"),a(\"code\",[s._v(\"short\")]),s._v(\"、\"),a(\"code\",[s._v(\"byte\")]),s._v(\"、\"),a(\"code\",[s._v(\"char\")]),s._v(\"类型进行移位前，都会将其转换为\"),a(\"code\",[s._v(\"int\")]),s._v(\"类型再操作。\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"如果移位的位数超过数值所占有的位数会怎样？\")])]),s._v(\" \"),a(\"p\",[s._v(\"当 int 类型左移/右移位数**大于等于 32 位操作时，会先求余（%）后再进行左移/右移操作。**也就是说左移/右移 32 位相当于不进行移位操作（32%32=0），左移/右移 42 位相当于左移/右移 10 位（42%32=10）。当 long 类型进行左移/右移操作时，由于 long 对应的二进制是 64 位，因此求余操作的基数也变成了 64。\")]),s._v(\" \"),a(\"p\",[s._v(\"也就是说：\"),a(\"code\",[s._v(\"x<<42\")]),s._v(\"等同于\"),a(\"code\",[s._v(\"x<<10\")]),s._v(\"，\"),a(\"code\",[s._v(\"x>>42\")]),s._v(\"等同于\"),a(\"code\",[s._v(\"x>>10\")]),s._v(\"，\"),a(\"code\",[s._v(\"x >>>42\")]),s._v(\"等同于\"),a(\"code\",[s._v(\"x >>> 10\")]),s._v(\"。\")]),s._v(\" \"),a(\"h2\",{attrs:{id:\"基本类型和包装类\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基本类型和包装类\"}},[s._v(\"#\")]),s._v(\" 基本类型和包装类\")]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/basis/primitive-type-vs-packaging-type.png\",alt:\"基本类型 vs 包装类型\"}}),s._v(\"基本类型 vs 包装类型\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[s._v(\"用途\")]),s._v(\"：除了定义一些常量和局部变量之外，我们在其他地方比如方法参数、对象属性中很少会使用基本类型来定义变量。并且，包装类型可用于泛型，而基本类型不可以。\")]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"存储方式\")]),s._v(\"：基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 \"),a(\"code\",[s._v(\"static\")]),s._v(\" 修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，我们知道几乎所有对象实例都存在于堆中。\")]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"占用空间\")]),s._v(\"：相比于包装类型（对象类型）， 基本数据类型占用的空间往往非常小。\")]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"默认值\")]),s._v(\"：成员变量包装类型不赋值就是 \"),a(\"code\",[s._v(\"null\")]),s._v(\" ，而基本类型有默认值且不是 \"),a(\"code\",[s._v(\"null\")]),s._v(\"。\")]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"比较方式\")]),s._v(\"：对于基本数据类型来说，\"),a(\"strong\",[a(\"code\",[s._v(\"==\")]),s._v(\" 比较的是值。对于包装数据类型来说，\"),a(\"code\",[s._v(\"==\")]),s._v(\" 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 \"),a(\"code\",[s._v(\"equals()\")]),s._v(\" 方法。\")])])]),s._v(\" \"),a(\"p\",[s._v(\"⚠️ 注意：\"),a(\"strong\",[s._v(\"基本数据类型存放在栈中是一个常见的误区！\")]),s._v(\" 基本数据类型的存储位置取决于它们的作用域和声明方式。如果它们是\"),a(\"strong\",[s._v(\"局部变量，那么它们会存放在栈中；如果它们是成员变量，那么它们会存放在堆中。\")])]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Test\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 成员变量，存放在堆中\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" a \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 被 static 修饰，也存放在堆中，但属于类，不属于对象\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// JDK1.7 静态变量从永久代移动了 Java 堆中\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" b \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"20\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 局部变量，存放在栈中\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" c \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"30\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" d \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"40\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 编译错误，不能在方法中使用 static 修饰局部变量\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),a(\"br\")])]),a(\"h2\",{attrs:{id:\"包装类的缓存机制\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#包装类的缓存机制\"}},[s._v(\"#\")]),s._v(\" 包装类的缓存机制\")]),s._v(\" \"),a(\"p\",[s._v(\"Java 基本数据类型的包装类型的大部分都用到了缓存机制来提升性能。\")]),s._v(\" \"),a(\"p\",[a(\"code\",[s._v(\"Byte\")]),s._v(\",\"),a(\"code\",[s._v(\"Short\")]),s._v(\",\"),a(\"code\",[s._v(\"Integer\")]),s._v(\",\"),a(\"code\",[s._v(\"Long\")]),s._v(\" 这 4 种包装类默认创建了数值 \"),a(\"strong\",[s._v(\"[-128，127]\")]),s._v(\" 的相应类型的缓存数据，\"),a(\"code\",[s._v(\"Character\")]),s._v(\" 创建了数值在 \"),a(\"strong\",[s._v(\"[0,127]\")]),s._v(\" 范围的缓存数据，\"),a(\"code\",[s._v(\"Boolean\")]),s._v(\" 直接返回 \"),a(\"code\",[s._v(\"True\")]),s._v(\" or \"),a(\"code\",[s._v(\"False\")]),s._v(\"。\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"Integer 缓存源码：\")])]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Integer\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"valueOf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" i\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"if\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"IntegerCache\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"low \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"&&\")]),s._v(\" i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"IntegerCache\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"high\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"IntegerCache\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"cache\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"IntegerCache\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"low\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Integer\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"i\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"IntegerCache\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"final\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" low \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"128\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"final\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" high\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// high value may be configured by property\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" h \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[a(\"code\",[s._v(\"Character\")]),s._v(\" 缓存源码:\")])]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Character\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"valueOf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"char\")]),s._v(\" c\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"if\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"c \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// must cache\")]),s._v(\"\\n      \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"CharacterCache\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"cache\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"c\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Character\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"c\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"CharacterCache\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"CharacterCache\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"final\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Character\")]),s._v(\" cache\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Character\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"127\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"for\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\" cache\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"length\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" i\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"++\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n            cache\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"i\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Character\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"char\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"i\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[a(\"code\",[s._v(\"Boolean\")]),s._v(\" 缓存源码：\")])]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Boolean\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"valueOf\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"boolean\")]),s._v(\" b\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"b \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"?\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"TRUE\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\":\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"FALSE\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[s._v(\"如果超出对应范围仍然会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。\")])]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"两种浮点数类型的包装类 \"),a(\"code\",[s._v(\"Float\")]),s._v(\",\"),a(\"code\",[s._v(\"Double\")]),s._v(\" 并没有实现缓存机制。\")])]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Integer\")]),s._v(\" i1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"33\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Integer\")]),s._v(\" i2 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"33\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"i1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),s._v(\" i2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 输出 true\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Float\")]),s._v(\" i11 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"333f\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Float\")]),s._v(\" i22 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"333f\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"i11 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),s._v(\" i22\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 输出 false\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Double\")]),s._v(\" i3 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1.2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Double\")]),s._v(\" i4 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1.2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"i3 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),s._v(\" i4\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 输出 false\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),a(\"br\")])]),a(\"p\",[s._v(\"下面我们来看一个问题：下面的代码的输出结果是 \"),a(\"code\",[s._v(\"true\")]),s._v(\" 还是 \"),a(\"code\",[s._v(\"false\")]),s._v(\" 呢？\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Integer\")]),s._v(\" i1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"40\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Integer\")]),s._v(\" i2 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Integer\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"40\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"i1\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),s._v(\"i2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\")])]),a(\"p\",[a(\"code\",[s._v(\"Integer i1=40\")]),s._v(\" 这一行代码会发生装箱，也就是说这行代码等价于 \"),a(\"code\",[s._v(\"Integer i1=Integer.valueOf(40)\")]),s._v(\" 。因此，\"),a(\"code\",[s._v(\"i1\")]),s._v(\" 直接使用的是缓存中的对象。而\"),a(\"code\",[s._v(\"Integer i2 = new Integer(40)\")]),s._v(\" 会直接创建新的对象。\")]),s._v(\" \"),a(\"p\",[s._v(\"因此，答案是 \"),a(\"code\",[s._v(\"false\")]),s._v(\" 。你答对了吗？\")]),s._v(\" \"),a(\"p\",[s._v(\"记住：\"),a(\"strong\",[s._v(\"所有整型包装类对象之间值的比较，全部使用 equals 方法比较\")]),s._v(\"。\")]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/up-1ae0425ce8646adfb768b5374951eeb820d.png\",alt:\"\"}})]),s._v(\" \"),a(\"h2\",{attrs:{id:\"自动拆箱和装箱的原理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#自动拆箱和装箱的原理\"}},[s._v(\"#\")]),s._v(\" 自动拆箱和装箱的原理\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[s._v(\"Integer i = 10\")]),s._v(\" 等价于 \"),a(\"code\",[s._v(\"Integer i = Integer.valueOf(10)\")])]),s._v(\" \"),a(\"li\",[a(\"code\",[s._v(\"int n = i\")]),s._v(\" 等价于 \"),a(\"code\",[s._v(\"int n = i.intValue()\")]),s._v(\";\")])]),s._v(\" \"),a(\"p\",[s._v(\"注意：\"),a(\"strong\",[s._v(\"如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。\")])]),s._v(\" \"),a(\"h2\",{attrs:{id:\"为什么浮点数运算的时候会有精度丢失的风险\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么浮点数运算的时候会有精度丢失的风险\"}},[s._v(\"#\")]),s._v(\" 为什么浮点数运算的时候会有精度丢失的风险？\")]),s._v(\" \"),a(\"p\",[s._v(\"浮点数运算精度丢失代码演示：\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"float\")]),s._v(\" a \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2.0f\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1.9f\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"float\")]),s._v(\" b \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1.8f\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1.7f\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"a\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 0.100000024\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"b\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 0.099999905\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"a \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),s._v(\" b\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// false\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\")])]),a(\"p\",[s._v(\"为什么会出现这个问题呢？\")]),s._v(\" \"),a(\"p\",[s._v(\"这个和计算机保存浮点数的机制有很大关系。我们知道计算机是二进制的，而且计算机在表示一个数字时，\"),a(\"strong\",[s._v(\"宽度是有限的，无限循环的小数存储在计算机时，只能被截断\")]),s._v(\"，所以就会导致小数精度发生损失的情况。这也就是解释了为什么浮点数没有办法用二进制精确表示。\")]),s._v(\" \"),a(\"p\",[s._v(\"就比如说十进制下的 0.2 就没办法精确转换成二进制小数：\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 0.2 转换为二进制数的过程为，不断乘以 2，直到不存在小数为止，\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 在这个计算过程中，得到的整数部分从上到下排列就是二进制的结果。\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.2\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.4\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"->\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.4\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.8\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"->\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.8\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1.6\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"->\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.6\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1.2\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"->\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.2\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.4\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"->\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\"（发生循环）\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\")])]),a(\"p\",[a(\"code\",[s._v(\"BigDecimal\")]),s._v(\" 可以实现对浮点数的运算，\"),a(\"strong\",[s._v(\"不会造成精度丢失\")]),s._v(\"。通常情况下，大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过 \"),a(\"code\",[s._v(\"BigDecimal\")]),s._v(\" 来做的。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"BigDecimal\")]),s._v(\" a \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"BigDecimal\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"1.0\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"BigDecimal\")]),s._v(\" b \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"BigDecimal\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"0.9\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"BigDecimal\")]),s._v(\" c \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"BigDecimal\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"0.8\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"BigDecimal\")]),s._v(\" x \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" a\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"subtract\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"b\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"BigDecimal\")]),s._v(\" y \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" b\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"subtract\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"c\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"x\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* 0.1 */\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"y\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* 0.1 */\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Objects\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"equals\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"x\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" y\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* true */\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\")])]),a(\"h2\",{attrs:{id:\"成员变量与局部变量的区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#成员变量与局部变量的区别\"}},[s._v(\"#\")]),s._v(\" 成员变量与局部变量的区别？\")]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://oss.javaguide.cn/github/javaguide/java/basis/member-var-vs-local-var.png\",alt:\"成员变量 vs 局部变量\"}})]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[s._v(\"语法形式\")]),s._v(\"：从语法形式上看，成员变量是属于类的，而局部变量是在代码块或方法中定义的变量或是方法的参数；成员变量可以被 \"),a(\"code\",[s._v(\"public\")]),s._v(\",\"),a(\"code\",[s._v(\"private\")]),s._v(\",\"),a(\"code\",[s._v(\"static\")]),s._v(\" 等修饰符所修饰，而局部变量不能被访问控制修饰符及 \"),a(\"code\",[s._v(\"static\")]),s._v(\" 所修饰；但是，成员变量和局部变量都能被 \"),a(\"code\",[s._v(\"final\")]),s._v(\" 所修饰。\")]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"存储方式\")]),s._v(\"：从变量在内存中的存储方式来看，\"),a(\"strong\",[s._v(\"如果成员变量是使用 \"),a(\"code\",[s._v(\"static\")]),s._v(\" 修饰的，那么这个成员变量是属于类的\")]),s._v(\"，如果没有使用 \"),a(\"code\",[s._v(\"static\")]),s._v(\" 修饰，\"),a(\"strong\",[s._v(\"这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。\")])]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"生存时间\")]),s._v(\"：从变量在内存中的生存时间上看，\"),a(\"strong\",[s._v(\"成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动生成，随着方法的调用结束而消亡。\")])]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"默认值\")]),s._v(\"：从变量是否有默认值来看，成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外:被 \"),a(\"code\",[s._v(\"final\")]),s._v(\" 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。\")])]),s._v(\" \"),a(\"h2\",{attrs:{id:\"静态变量有什么作用\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#静态变量有什么作用\"}},[s._v(\"#\")]),s._v(\" 静态变量有什么作用？\")]),s._v(\" \"),a(\"p\",[s._v(\"静态变量也就是被 \"),a(\"code\",[s._v(\"static\")]),s._v(\" 关键字修饰的变量。\"),a(\"strong\",[s._v(\"它可以被类的所有实例共享，无论一个类创建了多少个对象，它们都共享同一份静态变量。也就是说，静态变量只会被分配一次内存，即使创建多个对象，这样可以节省内存。\")])]),s._v(\" \"),a(\"p\",[s._v(\"静态变量是通过类名来访问的，例如\"),a(\"code\",[s._v(\"StaticVariableExample.staticVar\")]),s._v(\"（如果被 \"),a(\"code\",[s._v(\"private\")]),s._v(\"关键字修饰就无法这样访问了）。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"StaticVariableExample\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 静态变量\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" staticVar \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\")])]),a(\"p\",[s._v(\"通常情况下，静态变量会被 \"),a(\"code\",[s._v(\"final\")]),s._v(\" 关键字修饰成为常量。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ConstantVariableExample\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 常量\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"final\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" constantVar \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\")])]),a(\"p\",[s._v(\"⚠️ \"),a(\"strong\",[s._v(\"注意 \"),a(\"code\",[s._v(\"char\")]),s._v(\" 在 Java 中占两个字节。\")])]),s._v(\" \"),a(\"h2\",{attrs:{id:\"静态方法为什么不能调用非静态成员\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#静态方法为什么不能调用非静态成员\"}},[s._v(\"#\")]),s._v(\" 静态方法为什么不能调用非静态成员?\")]),s._v(\" \"),a(\"p\",[s._v(\"这个需要结合 JVM 的相关知识，主要原因如下：\")]),s._v(\" \"),a(\"ol\",[a(\"li\",[s._v(\"静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问。\")]),s._v(\" \"),a(\"li\",[s._v(\"在\"),a(\"strong\",[s._v(\"类的非静态成员不存在的时候静态方法就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。\")])])]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Example\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 定义一个字符型常量\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"final\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"char\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"LETTER_A\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token char\"}},[s._v(\"'A'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 定义一个字符串常量\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"final\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"GREETING_MESSAGE\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"Hello, world!\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" args\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 输出字符型常量的值\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"字符型常量的值为：\"')]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"LETTER_A\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 输出字符串常量的值\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"字符串常量的值为：\"')]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"GREETING_MESSAGE\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),a(\"br\")])]),a(\"h2\",{attrs:{id:\"jdk动态代理和cglib动态代理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jdk动态代理和cglib动态代理\"}},[s._v(\"#\")]),s._v(\" JDK动态代理和CGLIB动态代理\")]),s._v(\" \"),a(\"p\",[s._v(\"// TODO\")]),s._v(\" \"),a(\"h2\",{attrs:{id:\"java-中-final-关键字有什么用\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java-中-final-关键字有什么用\"}},[s._v(\"#\")]),s._v(\" Java 中 final 关键字有什么⽤？\")]),s._v(\" \"),a(\"p\",[s._v(\"在 Java 中，final 关键字⽤于表示⼀个不可变的常量或⼀个不可变的变量。 在 Java 中，final 关键字可以修饰类、⽅法和变量，作⽤如下：\")]),s._v(\" \"),a(\"ol\",[a(\"li\",[s._v(\"**final 修饰类，表示该类不能被继承。**final 类中的⽅法默认都是 final 的，不能被⼦类重 写。\")]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"final 修饰⽅法，表示该⽅法不能被⼦类重写。\")])]),s._v(\" \"),a(\"li\",[s._v(\"**final 修饰变量，表示该变量只能被赋值⼀次。**final 修饰的变量必须在声明时或构造函数 中初始化，且不能再被修改。常⽤于定义常量\")])]),s._v(\" \"),a(\"h2\",{attrs:{id:\"反射机制\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#反射机制\"}},[s._v(\"#\")]),s._v(\" 反射机制\")]),s._v(\" \"),a(\"p\",[s._v(\"// TODO\")]),s._v(\" \"),a(\"h2\",{attrs:{id:\"访问修饰符-public、private、protected-以及无修饰符-默认-的区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#访问修饰符-public、private、protected-以及无修饰符-默认-的区别\"}},[s._v(\"#\")]),s._v(\" 访问修饰符 public、private、protected，以及⽆修饰符（默认）的区别\")]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20240325190301698.png\",alt:\"image-20240325190301698\"}})]),s._v(\" \"),a(\"h2\",{attrs:{id:\"string-和-stringbuffer、stringbuilder-的区别是什么\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string-和-stringbuffer、stringbuilder-的区别是什么\"}},[s._v(\"#\")]),s._v(\" String 和 StringBuffer、StringBuilder 的区别是什么？\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"String 是不可变的（immutable）对象，⽽ StringBuffer 和 StringBuilder 则是可变的 （mutable）对象。\")])]),s._v(\" \"),a(\"p\",[s._v(\"String 对象⼀旦被创建，就不可修改，任何的字符串操作都会返回⼀个新的 String 对象，这 可能导致频繁的对象创建和销毁，影响性能。\")]),s._v(\" \"),a(\"p\",[s._v(\"⽽ StringBuffer 和 StringBuilder 允许进⾏修改 操作，提供了⼀种更⾼效的字符串处理⽅式。\")]),s._v(\" \"),a(\"p\",[s._v(\"StringBuffer 和 StringBuilder 的主要区别在于线程安全性和性能⽅⾯。\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"StringBuffer 是线程安全的，所有⽅法都是同步的，因此可以被多个线程同时访问和修改。⽽ StringBuilder 不是线程安全的\")]),s._v(\"，适⽤于单线程环境下的字符串处理，但是相⽐于 StringBuffer，StringBuilder 具有 更⾼的性能。 因此，当字符串处理需要频繁修改时，建议使⽤ StringBuffer 或 StringBuilder；⽽当字符串处 理不需要修改时，可以使⽤ String\")]),s._v(\" \"),a(\"h2\",{attrs:{id:\"java-内部类\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java-内部类\"}},[s._v(\"#\")]),s._v(\" Java 内部类\")]),s._v(\" \"),a(\"p\",[s._v(\"// TODO\")])])}),[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}