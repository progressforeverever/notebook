{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{434:function(s,t,r){\"use strict\";r.r(t);var a=r(4),_=Object(a.a)({},(function(){var s=this,t=s._self._c;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"_01-基础架构-一条sql查询语句是如何执行的\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_01-基础架构-一条sql查询语句是如何执行的\"}},[s._v(\"#\")]),s._v(\" 01 | 基础架构：一条SQL查询语句是如何执行的？\")]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[s._v(\"也该到了深入了解系统学习MySQL的时候了\")]),s._v(\" \"),t(\"p\",[s._v(\"极客讲坛  极客时间\")]),s._v(\" \"),t(\"p\",[s._v(\"如听仙乐耳暂明\")])]),s._v(\" \"),t(\"p\",[s._v(\"看一个事儿千万不 要直接陷入细节里，你应该先鸟瞰其全貌，这样能够帮助你从高维度理解问题。\")]),s._v(\" \"),t(\"p\",[s._v(\"比如，你有个最简 单的表，表里只有一个ID字段，在执行下面这个查询语句时：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-mysql line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[s._v(\"mysql> select * from T where ID=10\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/mysql01.png\"}}),s._v(\" \"),t(\"p\",[s._v(\"大体来说，MySQL可以分为\"),t(\"strong\",[s._v(\"Server层\")]),s._v(\"和\"),t(\"strong\",[s._v(\"存储引擎层\")]),s._v(\"两部分。\")]),s._v(\" \"),t(\"p\",[s._v(\"Server层包括\"),t(\"strong\",[s._v(\"连接器、查询缓存、分析器、优化器、执行器\")]),s._v(\"等，涵盖MySQL的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在 这一层实现，比如\"),t(\"strong\",[s._v(\"存储过程、触发器、视图\")]),s._v(\"等。\")]),s._v(\" \"),t(\"p\",[s._v(\"而\"),t(\"strong\",[s._v(\"存储引擎层负责数据的存储和提取。\"),t(\"strong\",[s._v(\"其架构模式是\")]),s._v(\"插件式\")]),s._v(\"的，支持InnoDB、MyISAM、 Memory等多个存储引擎。现在\"),t(\"strong\",[s._v(\"最常用的存储引擎是InnoDB，它从MySQL 5.5.5版本开始成为了 默认存储引擎。\")]),s._v(\" 也就是说，你执行create table建表的时候，如果不指定引擎类型，默认使用的就是InnoDB。不 过，你也可以通过指定存储引擎的类型来选择别的引擎，比如在create table语句中使用 engine=memory, 来指定使用内存引擎创建表。不同存储引擎的表数据存取方式不同，支持的功 能也不同，\")]),s._v(\" \"),t(\"p\",[s._v(\"可以看出，\"),t(\"strong\",[s._v(\"不同的存储引擎共用一个 Server 层\")]),s._v(\"，也就是从连接器到执行器的部分。下面将结合开头给出的 SQL 语句，带你走一遍整个执行流程，依次看下每个组件的作用。\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"一个sql的执行流程\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一个sql的执行流程\"}},[s._v(\"#\")]),s._v(\" 一个SQL的执行流程\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"_2-1-连接器\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-连接器\"}},[s._v(\"#\")]),s._v(\" 2.1 连接器\")]),s._v(\" \"),t(\"p\",[s._v(\"第一步，你会先连接到这个数据库上，这时候接待你的就是连接器。\"),t(\"strong\",[s._v(\"连接器\")]),s._v(\"负责跟客户端建立连接、获取权限、维持和管理连接。连接命令一般是这么写的：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-shell line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-shell\"}},[t(\"code\",[s._v(\"mysql -h\"),t(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"$ip\")]),s._v(\" -P\"),t(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"$port\")]),s._v(\" -u\"),t(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"$user\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[s._v(\"-p\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[s._v(\"连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在完成经典的 TCP 握手后，连接器就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v('如果用户名或密码不对，你就会收到一个\"'),t(\"strong\",[s._v(\"Access denied for user\")]),s._v('\"的错误（经典开发中的'),t(\"strong\",[s._v(\"Access denied for root\")]),s._v(\"），然后客户端程序结束执行。\")]),s._v(\" \"),t(\"li\",[s._v(\"如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。\")])]),s._v(\" \"),t(\"p\",[s._v(\"这就意味着，一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。\")]),s._v(\" \"),t(\"p\",[s._v(\"连接完成后，如果你没有后续的动作，这个连接就处于空闲状态，你可以在 \"),t(\"code\",[s._v(\"show processlist\")]),s._v(\" 命令中看到它：\")]),s._v(\" \"),t(\"img\",{staticStyle:{zoom:\"80%\"},attrs:{src:\"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/image-20230117174614530.png\",alt:\"image-20230117174614530\"}}),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"Command 列有一个显示“Sleep”的行，表示现在系统里面有一个空闲连接\")])]),s._v(\" \"),t(\"p\",[s._v(\"客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。\")]),s._v(\" \"),t(\"p\",[s._v(\"数据库里面，\"),t(\"strong\",[s._v(\"长连接\")]),s._v(\"是指连接成功后，如果客户端\"),t(\"strong\",[s._v(\"持续有请求，则一直使用同一个连接\")]),s._v(\"。\"),t(\"strong\",[s._v(\"短连接\")]),s._v(\"则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。\")]),s._v(\" \"),t(\"p\",[s._v(\"建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是\"),t(\"font\",{attrs:{color:\"red\"}},[s._v(\"尽量使用长连接\")]),s._v(\"。\")],1),s._v(\" \"),t(\"blockquote\",[t(\"p\",[s._v(\"但是全部使用长连接后，你可能会发现，有些时候 \"),t(\"strong\",[s._v(\"MySQL 占用内存涨得特别快\")]),s._v(\"，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 \"),t(\"strong\",[s._v(\"MySQL 异常重启\")]),s._v(\"了。\")])]),s._v(\" \"),t(\"p\",[s._v(\"怎么解决这个问题呢？你可以考虑以下两种方案。\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[t(\"strong\",[s._v(\"定期断开长连接\")]),s._v(\"。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来\"),t(\"strong\",[s._v(\"重新初始化连接资源\")]),s._v(\"。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。\")])])]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[s._v(\"Q：什么是OOM？\")]),s._v(\" \"),t(\"p\",[s._v(\"A：\")]),s._v(\" \"),t(\"p\",[s._v(\"java.lang.OutOfMemoryError\")]),s._v(\" \"),t(\"p\",[s._v(\"oom就是我们常说的\"),t(\"strong\",[s._v(\"Out of Memory内存溢出\")]),s._v(\"，它是指需要的内存空间大于系统分配的内存空间，oom后果就是项目程序crash;\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"常见造成oom的原因\")]),s._v(\"\\n内存泄露造成、加载的文件或者图片过大造成线程数量过多，队列容量设置过大，导致OOM\")]),s._v(\" \"),t(\"p\",[s._v(\"一，业务需要比较多的内存，但是jvm分配的太少；\")]),s._v(\" \"),t(\"p\",[s._v(\"二，\"),t(\"strong\",[s._v(\"GC回收内存的速度赶不上程序运行消耗内存的速度。\")])]),s._v(\" \"),t(\"p\",[s._v(\"三，存在内存泄漏情况，比如\"),t(\"strong\",[s._v(\"打开文件不释放、创建网络连接不关闭、不再使用的对象未断开引用关系\")]),s._v(\"、使用\"),t(\"a\",{attrs:{href:\"https://www.zhihu.com/search?q=%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2587293792%7D\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"静态变量\"),t(\"OutboundLink\")],1),s._v(\"持有大对象引用等等，久而久之也会造成OOM。\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"_2-2-查询缓存\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-查询缓存\"}},[s._v(\"#\")]),s._v(\" 2.2 查询缓存\")]),s._v(\" \"),t(\"p\",[s._v(\"连接建立完成后，你就可以执行 select 语句了。执行逻辑就会来到第二步：\"),t(\"mark\",[s._v(\"查询缓存\")]),s._v(\"。\")]),s._v(\" \"),t(\"p\",[s._v(\"MySQL 拿到一个查询请求后，会先到查询缓存看看，缓存可能会以 key-value 对的形式存在于内存中，命中则直接返回。key 是查询的语句，value 是查询的结果。\")]),s._v(\" \"),t(\"p\",[s._v(\"但是\"),t(\"font\",{attrs:{color:\"red\"}},[s._v(\"大多数情况下我会建议你不要使用查询缓存\")]),s._v(\"，为什么呢？\"),t(\"u\",[s._v(\"因为查询缓存往往弊大于利\")]),s._v(\"。\")],1),s._v(\" \"),t(\"p\",[s._v(\"查询缓存的\"),t(\"strong\",[s._v(\"失效非常频繁\")]),s._v(\"，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。除非你的业务就是有**一张静态表，很长时间才会更新一次。**比如，\"),t(\"strong\",[s._v(\"一个系统配置表，那这张表上的查询才适合使用查询缓存\")]),s._v(\"。\")]),s._v(\" \"),t(\"p\",[s._v(\"好在 MySQL 也提供了这种“按需使用”的方式。你可以将参数 query_cache_type 设置成 DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用 SQL_CACHE 显式指定，像下面这个语句一样：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[t(\"code\",[s._v(\"mysql\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"select\")]),s._v(\" SQL_CACHE \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" T \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"where\")]),s._v(\" ID\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10\")]),s._v(\"；\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[s._v(\"需要注意的是，MySQL 8.0 版本直接将查询缓存的整块功能删掉了，也就是说 \"),t(\"strong\",[s._v(\"8.0 开始彻底没有这个功能了\")]),s._v(\"。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"_2-3-分析器\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-3-分析器\"}},[s._v(\"#\")]),s._v(\" 2.3 分析器\")]),s._v(\" \"),t(\"p\",[s._v(\"如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL 需要知道你要做什么，因此需要使用\"),t(\"mark\",[s._v(\"分析器\")]),s._v(\"对 SQL 语句做解析。\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"【词法分析】识别出 SQL 中每个词代表什么。比如将 select 识别出来这是一个查询语句。它也要把字符串“T”识别 成“表名T”，把字符串“ID”识别成“列ID”。\")]),s._v(\" \"),t(\"li\",[s._v(\"【语法分析】判断 SQL 是否符合语法要求。\")])]),s._v(\" \"),t(\"p\",[s._v(\"如果你的语句不对，就会收到“You have an error in your SQL syntax”的错误提醒。\")]),s._v(\" \"),t(\"p\",[s._v(\"一般语法错误会提示第一个出现错误的位置，所以你要关注的是紧接“use near”的内容。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"_2-4-优化器\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-4-优化器\"}},[s._v(\"#\")]),s._v(\" 2.4 优化器\")]),s._v(\" \"),t(\"p\",[s._v(\"经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。\")]),s._v(\" \"),t(\"p\",[t(\"mark\",[s._v(\"优化器\")]),s._v(\"优化 SQL 具体执行的方案。比如索引的选择、join 的顺序等。\")]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[t(\"strong\",[s._v(\"举例\")]),s._v(\"：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[t(\"code\",[s._v(\"mysql\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"select\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" t1 \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"join\")]),s._v(\" t2 \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"using\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"ID\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"where\")]),s._v(\" t1\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"c\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"and\")]),s._v(\" t2\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"d\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"20\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"ul\",[t(\"li\",[s._v(\"既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20。\")]),s._v(\" \"),t(\"li\",[s._v(\"也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。\")])]),s._v(\" \"),t(\"p\",[s._v(\"这两种方案的结果一样，优化器根据效率来决定使用哪种\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"_2-5-执行器\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-5-执行器\"}},[s._v(\"#\")]),s._v(\" 2.5 执行器\")]),s._v(\" \"),t(\"p\",[s._v(\"MySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。\")]),s._v(\" \"),t(\"p\",[s._v(\"**开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限 ** （\"),t(\"strong\",[s._v(\"连接上了并不代表有权限\")]),s._v(\"），如果没有，就会返回没有权限的错误，如下所示 (在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。查询也会在优化器之前调用 precheck 验证权限)。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-sql line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[t(\"code\",[s._v(\"mysql\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"select\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"from\")]),s._v(\" T \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"where\")]),s._v(\" ID\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\nERROR \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1142\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"42000\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\": \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"SELECT\")]),s._v(\" command denied \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"to\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"user\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'b'\")]),t(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"@'localhost'\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"for\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"table\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'T'\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\")])]),t(\"p\",[s._v(\"如果有权限，就打开表继续执行。\"),t(\"strong\",[s._v(\"打开表的时候\")]),s._v(\"，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。\")]),s._v(\" \"),t(\"p\",[s._v(\"比如我们这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的：\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；\")]),s._v(\" \"),t(\"li\",[s._v(\"调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。\")]),s._v(\" \"),t(\"li\",[s._v(\"执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。\")])]),s._v(\" \"),t(\"p\",[s._v(\"你会在数据库的慢查询日志中看到一个 \"),t(\"code\",[s._v(\"rows_examined\")]),s._v(\" 的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此\"),t(\"strong\",[s._v(\"引擎扫描行数跟 rows_examined 并不是完全相同的\")]),s._v(\"。我们后面会专门有一篇文章来讲存储引擎的内部机制，里面会有详细的说明。\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"qa\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#qa\"}},[s._v(\"#\")]),s._v(\" QA\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"Q\")]),s._v(\"：为什么对权限的检查不在优化器之前做？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"A\")]),s._v(\"：有些时候，SQL 语句要操作的表不只是 SQL 字面上那些。比如如果有个触发器，得在执行器阶段（过程中）才能确定。优化器阶段前是无能为力的。\")]),s._v(\" \"),t(\"hr\"),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"Q\")]),s._v(\"：如果表 T 中没有字段 k，而你执行了这个语句 select * from T where k=1, 那肯定是会报“不存在这个列”的错误： “Unknown column ‘k’ in ‘where clause’”。你觉得这个错误是在我们上面提到的哪个阶段报出来的呢？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"A\")]),s._v(\"：应当是\"),t(\"strong\",[s._v(\"优化器。优化器会进行优化分析\")]),s._v(\"，比如用先执行哪个条件，使用哪个索引。\"),t(\"strong\",[s._v(\"如果没有对应的字段就会报错的\")]),s._v(\"。有人认为是执行器，给出的原因是执行的时候才打开表获取数据，但是\"),t(\"strong\",[s._v(\"表的字段不是数据\")]),s._v(\"，是事先定义好的，所以可以直接读取的，不需要打开表。\")]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[s._v(\"一开始认为是分析器，分析器做什么，词法分析，语法分析，相当于只是做一个识别，识别出来，但并不知道有没有\")])])])}),[],!1,null,null,null);t.default=_.exports}}]);","extractedComments":[]}