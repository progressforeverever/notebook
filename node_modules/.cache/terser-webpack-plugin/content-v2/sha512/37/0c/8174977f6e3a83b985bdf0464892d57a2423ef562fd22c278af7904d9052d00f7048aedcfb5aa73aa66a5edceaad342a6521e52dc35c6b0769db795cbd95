{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{391:function(s,t,a){\"use strict\";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[t(\"h2\",{attrs:{id:\"jmm-java-内存模型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jmm-java-内存模型\"}},[s._v(\"#\")]),s._v(\" JMM(Java 内存模型)\")]),s._v(\" \"),t(\"p\",[s._v(\"JMM（Java 内存模型）相关的问题比较多，也比较重要，于是我单独抽了一篇文章来总结 JMM 相关的知识点和问题：\"),t(\"RouterLink\",{attrs:{to:\"/java/10.javaSE/jmm.html\"}},[s._v(\"JMM（Java 内存模型）详解\")]),s._v(\" 。\")],1),s._v(\" \"),t(\"h2\",{attrs:{id:\"volatile-关键字\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#volatile-关键字\"}},[s._v(\"#\")]),s._v(\" volatile 关键字\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"如何保证变量的可见性\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何保证变量的可见性\"}},[s._v(\"#\")]),s._v(\" 如何保证变量的可见性？\")]),s._v(\" \"),t(\"p\",[s._v(\"在 Java 中，\"),t(\"code\",[s._v(\"volatile\")]),s._v(\" 关键字可以保证变量的可见性，\"),t(\"strong\",[s._v(\"如果我们将变量声明为 \"),t(\"code\",[s._v(\"volatile\")]),s._v(\" ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/jmm.png\",alt:\"JMM(Java 内存模型)\"}})]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/jmm2.png\",alt:\"JMM(Java 内存模型)强制在主存中进行读取\"}})]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"volatile\")]),s._v(\" 关键字其实并非是 Java 语言特有的，在 C 语言里也有，它最原始的意义就是禁用 CPU 缓存。如果我们将一个变量使用 \"),t(\"code\",[s._v(\"volatile\")]),s._v(\" 修饰，这就指示 编译器，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[t(\"code\",[s._v(\"volatile\")]),s._v(\" 关键字能保证数据的可见性，但不能保证数据的原子性。\"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 关键字两者都能保证。\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"如何禁止指令重排序\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何禁止指令重排序\"}},[s._v(\"#\")]),s._v(\" 如何禁止指令重排序？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"在 Java 中，\"),t(\"code\",[s._v(\"volatile\")]),s._v(\" 关键字除了可以保证变量的可见性，还有一个重要的作用就是防止 JVM 的指令重排序。\")]),s._v(\" 如果我们将变量声明为 \"),t(\"strong\",[t(\"code\",[s._v(\"volatile\")])]),s._v(\" ，在对这个变量进行读写操作的时候，会通过插入特定的 \"),t(\"strong\",[s._v(\"内存屏障\")]),s._v(\" 的方式来禁止指令重排序。\")]),s._v(\" \"),t(\"p\",[s._v(\"在 Java 中，\"),t(\"code\",[s._v(\"Unsafe\")]),s._v(\" 类提供了三个开箱即用的内存屏障相关的方法，屏蔽了操作系统底层的差异：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"native\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"loadFence\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"native\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"storeFence\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"native\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"fullFence\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\")])]),t(\"p\",[s._v(\"理论上来说，你通过这个三个方法也可以实现和\"),t(\"code\",[s._v(\"volatile\")]),s._v(\"禁止重排序一样的效果，只是会麻烦一些。\")]),s._v(\" \"),t(\"p\",[s._v(\"下面我以一个常见的面试题为例讲解一下 \"),t(\"code\",[s._v(\"volatile\")]),s._v(\" 关键字禁止指令重排序的效果。\")]),s._v(\" \"),t(\"p\",[s._v(\"面试中面试官经常会说：“单例模式了解吗？来给我手写一下！给我解释一下双重检验锁方式实现单例模式的原理呗！”\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"双重校验锁实现对象单例（线程安全）\")]),s._v(\"：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Singleton\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"volatile\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Singleton\")]),s._v(\" uniqueInstance\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Singleton\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\"  \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Singleton\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getUniqueInstance\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n       \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//先判断对象是否已经实例过，没有实例化过才进入加锁代码\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"if\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"uniqueInstance \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"null\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//类对象加锁\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"synchronized\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Singleton\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n                \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"if\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"uniqueInstance \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"null\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n                    uniqueInstance \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Singleton\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n                \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" uniqueInstance\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),t(\"br\")])]),t(\"p\",[t(\"strong\",[t(\"code\",[s._v(\"uniqueInstance\")]),s._v(\" 采用 \"),t(\"code\",[s._v(\"volatile\")]),s._v(\" 关键字修饰也是很有必要的\")]),s._v(\"， \"),t(\"code\",[s._v(\"uniqueInstance = new Singleton();\")]),s._v(\" 这段代码其实是分为三步执行：\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"为 \"),t(\"code\",[s._v(\"uniqueInstance\")]),s._v(\" 分配内存空间\")]),s._v(\" \"),t(\"li\",[s._v(\"初始化 \"),t(\"code\",[s._v(\"uniqueInstance\")])]),s._v(\" \"),t(\"li\",[s._v(\"将 \"),t(\"code\",[s._v(\"uniqueInstance\")]),s._v(\" 指向分配的内存地址\")])]),s._v(\" \"),t(\"p\",[s._v(\"但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1->3->2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 \"),t(\"code\",[s._v(\"getUniqueInstance\")]),s._v(\"() 后发现 \"),t(\"code\",[s._v(\"uniqueInstance\")]),s._v(\" 不为空，因此返回 \"),t(\"code\",[s._v(\"uniqueInstance\")]),s._v(\"，但此时 \"),t(\"code\",[s._v(\"uniqueInstance\")]),s._v(\" 还未被初始化。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"volatile-可以保证原子性么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#volatile-可以保证原子性么\"}},[s._v(\"#\")]),s._v(\" volatile 可以保证原子性么？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[t(\"code\",[s._v(\"volatile\")]),s._v(\" 关键字能保证变量的可见性，但不能保证对变量的操作是原子性的。\")])]),s._v(\" \"),t(\"p\",[s._v(\"我们通过下面的代码即可证明：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v('/**\\n * 微信搜 JavaGuide 回复\"面试突击\"即可免费领取个人原创的 Java 面试手册\\n *\\n * @author Guide哥\\n * @date 2022/08/03 13:40\\n **/')]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"VolatoleAtomicityDemo\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"volatile\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" inc \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"increase\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        inc\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"++\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"main\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" args\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"throws\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"InterruptedException\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ExecutorService\")]),s._v(\" threadPool \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Executors\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"newFixedThreadPool\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"VolatoleAtomicityDemo\")]),s._v(\" volatoleAtomicityDemo \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"VolatoleAtomicityDemo\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"for\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" i \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" i \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"5\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" i\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"++\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n            threadPool\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"execute\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"->\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n                \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"for\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" j \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" j \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"500\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" j\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"++\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n                    volatoleAtomicityDemo\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"increase\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n                \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 等待1.5秒，保证上面程序执行完成\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Thread\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"sleep\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1500\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"inc\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        threadPool\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"shutdown\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),t(\"br\")])]),t(\"p\",[s._v(\"正常情况下，运行上面的代码理应输出 \"),t(\"code\",[s._v(\"2500\")]),s._v(\"。但你真正运行了上面的代码之后，你会发现每次输出结果都小于 \"),t(\"code\",[s._v(\"2500\")]),s._v(\"。\")]),s._v(\" \"),t(\"p\",[s._v(\"为什么会出现这种情况呢？不是说好了，\"),t(\"code\",[s._v(\"volatile\")]),s._v(\" 可以保证变量的可见性嘛！\")]),s._v(\" \"),t(\"p\",[s._v(\"也就是说，如果 \"),t(\"code\",[s._v(\"volatile\")]),s._v(\" 能保证 \"),t(\"code\",[s._v(\"inc++\")]),s._v(\" 操作的原子性的话。每个线程中对 \"),t(\"code\",[s._v(\"inc\")]),s._v(\" 变量自增完之后，其他线程可以立即看到修改后的值。5 个线程分别进行了 500 次操作，那么最终 inc 的值应该是 5*500=2500。\")]),s._v(\" \"),t(\"p\",[s._v(\"很多人会误认为自增操作 \"),t(\"code\",[s._v(\"inc++\")]),s._v(\" 是原子性的，实际上，\"),t(\"code\",[s._v(\"inc++\")]),s._v(\" 其实是一个复合操作，包括三步：\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"读取 inc 的值。\")]),s._v(\" \"),t(\"li\",[s._v(\"对 inc 加 1。\")]),s._v(\" \"),t(\"li\",[s._v(\"将 inc 的值写回内存。\")])]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"volatile\")]),s._v(\" 是无法保证这三个操作是具有原子性的，有可能导致下面这种情况出现：\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"线程 1 对 \"),t(\"code\",[s._v(\"inc\")]),s._v(\" 进行读取操作之后，还未对其进行修改。线程 2 又读取了 \"),t(\"code\",[s._v(\"inc\")]),s._v(\"的值并对其进行修改（+1），再将\"),t(\"code\",[s._v(\"inc\")]),s._v(\" 的值写回内存。\")]),s._v(\" \"),t(\"li\",[s._v(\"线程 2 操作完毕后，线程 1 对 \"),t(\"code\",[s._v(\"inc\")]),s._v(\"的值进行修改（+1），再将\"),t(\"code\",[s._v(\"inc\")]),s._v(\" 的值写回内存。\")])]),s._v(\" \"),t(\"p\",[s._v(\"这也就导致两个线程分别对 \"),t(\"code\",[s._v(\"inc\")]),s._v(\" 进行了一次自增操作后，\"),t(\"code\",[s._v(\"inc\")]),s._v(\" 实际上只增加了 1。\")]),s._v(\" \"),t(\"p\",[s._v(\"其实，如果想要保证上面的代码运行正确也非常简单，利用 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\"、\"),t(\"code\",[s._v(\"Lock\")]),s._v(\"或者\"),t(\"code\",[s._v(\"AtomicInteger\")]),s._v(\"都可以。\")]),s._v(\" \"),t(\"p\",[s._v(\"使用 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 改进：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"synchronized\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"increase\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    inc\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"++\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\")])]),t(\"p\",[s._v(\"使用 \"),t(\"code\",[s._v(\"AtomicInteger\")]),s._v(\" 改进：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"AtomicInteger\")]),s._v(\" inc \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"AtomicInteger\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"increase\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    inc\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getAndIncrement\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\")])]),t(\"p\",[s._v(\"使用 \"),t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\" 改进：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Lock\")]),s._v(\" lock \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ReentrantLock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"increase\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    lock\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"lock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"try\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        inc\"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"++\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"finally\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        lock\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"unlock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\")])]),t(\"h2\",{attrs:{id:\"乐观锁和悲观锁\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#乐观锁和悲观锁\"}},[s._v(\"#\")]),s._v(\" 乐观锁和悲观锁\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"什么是悲观锁\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是悲观锁\"}},[s._v(\"#\")]),s._v(\" 什么是悲观锁？\")]),s._v(\" \"),t(\"p\",[s._v(\"悲观锁总是假设最坏的情况，认为共享资源每次被访问的时候就会出现问题(比如共享数据被修改)，所以每次在获取资源操作的时候都会上锁，这样其他线程想拿到这个资源就会阻塞直到锁被上一个持有者释放。也就是说，\"),t(\"strong\",[s._v(\"共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程\")]),s._v(\"。\")]),s._v(\" \"),t(\"p\",[s._v(\"像 Java 中**\"),t(\"code\",[s._v(\"synchronized\")]),s._v(\"和\"),t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\"等独占锁就是悲观锁思想的实现。**\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"performSynchronisedTask\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"synchronized\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"this\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 需要同步的操作\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Lock\")]),s._v(\" lock \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ReentrantLock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\nlock\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"lock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"try\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n   \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 需要同步的操作\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"finally\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    lock\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"unlock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\")])]),t(\"p\",[s._v(\"高并发的场景下，激烈的锁竞争会造成线程阻塞，大量阻塞线程会导致系统的上下文切换，增加系统的性能开销。并且，悲观锁还可能会存在死锁问题，影响代码的正常运行。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"什么是乐观锁\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是乐观锁\"}},[s._v(\"#\")]),s._v(\" 什么是乐观锁？\")]),s._v(\" \"),t(\"p\",[s._v(\"乐观锁总是假设最好的情况，认为共享资源每次被访问的时候不会出现问题，线程可以不停地执行，无需加锁也无需等待，只是在提交修改的时候去验证对应的资源（也就是数据）是否被其它线程修改了（具体方法可以使用版本号机制或 CAS 算法）。\")]),s._v(\" \"),t(\"p\",[s._v(\"在 Java 中\"),t(\"code\",[s._v(\"java.util.concurrent.atomic\")]),s._v(\"包下面的原子变量类（比如\"),t(\"code\",[s._v(\"AtomicInteger\")]),s._v(\"、\"),t(\"code\",[s._v(\"LongAdder\")]),s._v(\"）就是使用了乐观锁的一种实现方式 \"),t(\"strong\",[s._v(\"CAS\")]),s._v(\" 实现的。\\n\"),t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20240409220910143.png\",alt:\"image-20240409220910143\"}})]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// LongAdder 在高并发场景下会比 AtomicInteger 和 AtomicLong 的性能更好\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 代价就是会消耗更多的内存空间（空间换时间）\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"LongAdder\")]),s._v(\" sum \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"LongAdder\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\nsum\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"increment\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\")])]),t(\"p\",[s._v(\"高并发的场景下，乐观锁相比悲观锁来说，不存在锁竞争造成线程阻塞，也不会有死锁的问题，在性能上往往会更胜一筹**。但是，如果冲突频繁发生（写占比非常多的情况），会频繁失败和重试，这样同样会非常影响性能，导致 CPU 飙升。**\")]),s._v(\" \"),t(\"p\",[s._v(\"不过，大量失败重试的问题也是可以解决的，像我们前面提到的 \"),t(\"code\",[s._v(\"LongAdder\")]),s._v(\"以空间换时间的方式就解决了这个问题。\")]),s._v(\" \"),t(\"p\",[s._v(\"理论上来说：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[s._v(\"悲观锁通常多用于写比较多的情况（多写场景，竞争激烈），这样可以避免频繁失败和重试影响性能，悲观锁的开销是固定的\")]),s._v(\"。不过，如果乐观锁解决了频繁失败和重试这个问题的话（比如\"),t(\"code\",[s._v(\"LongAdder\")]),s._v(\"），也是可以考虑使用乐观锁的，要视实际情况而定。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"乐观锁通常多用于写比较少的情况（多读场景，竞争较少），这样可以避免频繁加锁影响性能。不过，乐观锁主要针对的对象是单个共享变量（参考\"),t(\"code\",[s._v(\"java.util.concurrent.atomic\")]),s._v(\"包下面的原子变量类）。\")])])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"如何实现乐观锁\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何实现乐观锁\"}},[s._v(\"#\")]),s._v(\" 如何实现乐观锁？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"乐观锁一般会使用版本号机制或 CAS 算法实现，CAS 算法相对来说更多一些，这里需要格外注意。\")])]),s._v(\" \"),t(\"h4\",{attrs:{id:\"版本号机制\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#版本号机制\"}},[s._v(\"#\")]),s._v(\" 版本号机制\")]),s._v(\" \"),t(\"p\",[s._v(\"一般是在数据表中加上一个数据版本号 \"),t(\"code\",[s._v(\"version\")]),s._v(\" 字段，表示数据被修改的次数。当数据被修改时，\"),t(\"code\",[s._v(\"version\")]),s._v(\" 值会加一。当线程 A 要更新数据值时，在读取数据的同时也会读取 \"),t(\"code\",[s._v(\"version\")]),s._v(\" 值，在提交更新时，若刚才读取到的 version 值为当前数据库中的 \"),t(\"code\",[s._v(\"version\")]),s._v(\" 值相等时才更新，否则重试更新操作，直到更新成功。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"举一个简单的例子\")]),s._v(\"：假设数据库中帐户信息表中有一个 version 字段，当前值为 1 ；而当前帐户余额字段（ \"),t(\"code\",[s._v(\"balance\")]),s._v(\" ）为 $100 。\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"操作员 A 此时将其读出（ \"),t(\"code\",[s._v(\"version\")]),s._v(\"=1 ），并从其帐户余额中扣除 $50（ $100-$50 ）。\")]),s._v(\" \"),t(\"li\",[s._v(\"在操作员 A 操作的过程中，操作员 B 也读入此用户信息（ \"),t(\"code\",[s._v(\"version\")]),s._v(\"=1 ），并从其帐户余额中扣除 $20 （ $100-$20 ）。\")]),s._v(\" \"),t(\"li\",[s._v(\"操作员 A 完成了修改工作，将数据版本号（ \"),t(\"code\",[s._v(\"version\")]),s._v(\"=1 ），连同帐户扣除后余额（ \"),t(\"code\",[s._v(\"balance\")]),s._v(\"=$50 ），提交至数据库更新，此时由于提交数据版本等于数据库记录当前版本，数据被更新，数据库记录 \"),t(\"code\",[s._v(\"version\")]),s._v(\" 更新为 2 。\")]),s._v(\" \"),t(\"li\",[s._v(\"操作员 B 完成了操作，也将版本号（ \"),t(\"code\",[s._v(\"version\")]),s._v(\"=1 ）试图向数据库提交数据（ \"),t(\"code\",[s._v(\"balance\")]),s._v(\"=$80 ），但此时比对数据库记录版本时发现，操作员 B 提交的数据版本号为 1 ，数据库记录当前版本也为 2 ，不满足 “ 提交版本必须等于当前版本才能执行更新 “ 的乐观锁策略，因此，操作员 B 的提交被驳回。\")])]),s._v(\" \"),t(\"p\",[s._v(\"这样就避免了操作员 B 用基于 \"),t(\"code\",[s._v(\"version\")]),s._v(\"=1 的旧数据修改的结果覆盖操作员 A 的操作结果的可能。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"cas-算法\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cas-算法\"}},[s._v(\"#\")]),s._v(\" CAS 算法\")]),s._v(\" \"),t(\"p\",[s._v(\"CAS 的全称是 \"),t(\"strong\",[s._v(\"Compare And Swap（比较与交换）\")]),s._v(\" ，用于实现乐观锁，被广泛应用于各大框架中。CAS 的思想很简单，\"),t(\"strong\",[s._v(\"就是用一个预期值和要更新的变量值进行比较，两值相等才会进行更新。\")])]),s._v(\" \"),t(\"p\",[s._v(\"CAS 是一个原子操作，底层依赖于一条 CPU 的原子指令。\")]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[t(\"strong\",[s._v(\"原子操作\")]),s._v(\" 即最小不可拆分的操作，也就是说操作一旦开始，就不能被打断，直到操作完成。\")])]),s._v(\" \"),t(\"p\",[s._v(\"CAS 涉及到三个操作数：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[s._v(\"V\")]),s._v(\"：要更新的变量值(Var)\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"E\")]),s._v(\"：预期值(Expected)\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"N\")]),s._v(\"：拟写入的新值(New)\")])]),s._v(\" \"),t(\"p\",[s._v(\"**当且仅当 V 的值等于 E 时，CAS 通过原子方式用新值 N 来更新 V 的值。**如果不等，说明已经有其它线程更新了 V，则当前线程放弃更新。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"举一个简单的例子\")]),s._v(\"：线程 A 要修改变量 i 的值为 6，i 原值为 1（V = 1，E=1，N=6，假设不存在 ABA 问题）。\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"i 与 1 进行比较，如果相等， 则说明没被其他线程修改，可以被设置为 6 。\")]),s._v(\" \"),t(\"li\",[s._v(\"i 与 1 进行比较，如果不相等，则说明被其他线程修改，当前线程放弃更新，CAS 操作失败。\")])]),s._v(\" \"),t(\"p\",[s._v(\"当多个线程同时使用 CAS 操作一个变量时，只有一个会胜出，并成功更新，其余均会失败，\"),t(\"strong\",[s._v(\"但失败的线程并不会被挂起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。\")])]),s._v(\" \"),t(\"p\",[s._v(\"Java 语言并没有直接实现 CAS，CAS 相关的实现是通过 C++ 内联汇编的形式实现的（JNI 调用）。因此， CAS 的具体实现和操作系统以及 CPU 都有关系。\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"sun.misc\")]),s._v(\"包下的\"),t(\"code\",[s._v(\"Unsafe\")]),s._v(\"类提供了\"),t(\"code\",[s._v(\"compareAndSwapObject\")]),s._v(\"、\"),t(\"code\",[s._v(\"compareAndSwapInt\")]),s._v(\"、\"),t(\"code\",[s._v(\"compareAndSwapLong\")]),s._v(\"方法来实现的对\"),t(\"code\",[s._v(\"Object\")]),s._v(\"、\"),t(\"code\",[s._v(\"int\")]),s._v(\"、\"),t(\"code\",[s._v(\"long\")]),s._v(\"类型的 CAS 操作\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/**\\n\\t*  CAS\\n  * @param o         包含要修改field的对象\\n  * @param offset    对象中某field的偏移量\\n  * @param expected  期望值\\n  * @param update    更新值\\n  * @return          true | false\\n  */\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"final\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"native\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"boolean\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"compareAndSwapObject\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Object\")]),s._v(\" o\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" offset\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"  \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Object\")]),s._v(\" expected\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Object\")]),s._v(\" update\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"final\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"native\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"boolean\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"compareAndSwapInt\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Object\")]),s._v(\" o\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" offset\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" expected\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" update\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"final\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"native\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"boolean\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"compareAndSwapLong\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Object\")]),s._v(\" o\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" offset\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" expected\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" update\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\")])]),t(\"p\",[s._v(\"关于 \"),t(\"code\",[s._v(\"Unsafe\")]),s._v(\" 类的详细介绍可以看这篇文章：\"),t(\"a\",{attrs:{href:\"https://javaguide.cn/java/basis/unsafe.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"Java 魔法类 Unsafe 详解 - JavaGuide - 2022\"),t(\"OutboundLink\")],1),s._v(\" 。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"乐观锁存在哪些问题\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#乐观锁存在哪些问题\"}},[s._v(\"#\")]),s._v(\" 乐观锁存在哪些问题？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"ABA 问题是乐观锁最常见的问题。\")])]),s._v(\" \"),t(\"h4\",{attrs:{id:\"aba-问题\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#aba-问题\"}},[s._v(\"#\")]),s._v(\" ABA 问题\")]),s._v(\" \"),t(\"p\",[s._v(\"如果一个变量 V 初次读取的时候是 A 值，并且在准备赋值的时候检查到它仍然是 A 值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，**因为在这段时间它的值可能被改为其他值，然后又改回 A，那 CAS 操作就会误认为它从来没有被修改过。**这个问题被称为 CAS 操作的 \"),t(\"strong\",[s._v('\"ABA\"问题。')])]),s._v(\" \"),t(\"p\",[s._v(\"ABA 问题的解决思路是在变量前面追加上\"),t(\"strong\",[s._v(\"版本号或者时间戳\")]),s._v(\"。JDK 1.5 以后的 \"),t(\"code\",[s._v(\"AtomicStampedReference\")]),s._v(\" 类就是用来解决 ABA 问题的，其中的 \"),t(\"code\",[s._v(\"compareAndSet()\")]),s._v(\" 方法就是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"boolean\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"compareAndSet\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"V\")]),s._v(\"   expectedReference\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"\\n                             \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"V\")]),s._v(\"   newReference\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"\\n                             \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" expectedStamp\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\"\\n                             \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" newStamp\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Pair\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"V\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" current \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" pair\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\"\\n        expectedReference \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),s._v(\" current\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"reference \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"&&\")]),s._v(\"\\n        expectedStamp \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),s._v(\" current\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"stamp \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"&&\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"newReference \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),s._v(\" current\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"reference \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"&&\")]),s._v(\"\\n          newStamp \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),s._v(\" current\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"stamp\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"||\")]),s._v(\"\\n         \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"casPair\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"current\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Pair\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"of\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"newReference\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" newStamp\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\")])]),t(\"h4\",{attrs:{id:\"循环时间长开销大\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#循环时间长开销大\"}},[s._v(\"#\")]),s._v(\" 循环时间长开销大\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"CAS 经常会用到自旋操作来进行重试，也就是不成功就一直循环执行直到成功。如果长时间不成功，会给 CPU 带来非常大的执行开销。\")])]),s._v(\" \"),t(\"p\",[s._v(\"如果 JVM 能支持处理器提供的 pause 指令那么效率会有一定的提升，pause 指令有两个作用：\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"可以延迟流水线执行指令，使 CPU 不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。\")]),s._v(\" \"),t(\"li\",[s._v(\"可以避免在退出循环的时候因内存顺序冲而引起 CPU 流水线被清空，从而提高 CPU 的执行效率。\")])]),s._v(\" \"),t(\"h4\",{attrs:{id:\"只能保证一个共享变量的原子操作\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#只能保证一个共享变量的原子操作\"}},[s._v(\"#\")]),s._v(\" 只能保证一个共享变量的原子操作\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"CAS 只对单个共享变量有效，当操作涉及跨多个共享变量时 CAS 无效\")]),s._v(\"。但是从 JDK 1.5 开始，提\"),t(\"strong\",[s._v(\"供了\"),t(\"code\",[s._v(\"AtomicReference\")]),s._v(\"类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行 CAS 操作.所以我们可以使用锁或者利用\"),t(\"code\",[s._v(\"AtomicReference\")]),s._v(\"类把多个共享变量合并成一个共享变量来操作。\")])]),s._v(\" \"),t(\"h2\",{attrs:{id:\"synchronized-关键字\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#synchronized-关键字\"}},[s._v(\"#\")]),s._v(\" synchronized 关键字\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"synchronized-是什么-有什么用\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#synchronized-是什么-有什么用\"}},[s._v(\"#\")]),s._v(\" synchronized 是什么？有什么用？\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"synchronized\")]),s._v(\" 是 Java 中的一个关键字，翻译成中文是同步的意思，\"),t(\"strong\",[s._v(\"主要解决的是多个线程之间访问资源的同步性，可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。\")])]),s._v(\" \"),t(\"p\",[s._v(\"在 Java 早期版本中，\"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 属于 \"),t(\"strong\",[s._v(\"重量级锁\")]),s._v(\"，效率低下。这是因为监视器锁（monitor）是依赖于底层的操作系统的 \"),t(\"code\",[s._v(\"Mutex Lock\")]),s._v(\" 来实现的，Java 的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换时需要从用户态转换到内核态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高。\")]),s._v(\" \"),t(\"p\",[s._v(\"不过，在 Java 6 之后， \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 引入了大量的优化如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销，这些优化让 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 锁的效率提升了很多。因此， \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 还是可以在实际项目中使用的，像 JDK 源码、很多开源框架都大量使用了 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 。\")]),s._v(\" \"),t(\"p\",[s._v(\"关于偏向锁多补充一点：由于偏向锁增加了 JVM 的复杂性，同时也并没有为所有应用都带来性能提升。因此，在 JDK15 中，偏向锁被默认关闭（仍然可以使用 \"),t(\"code\",[s._v(\"-XX:+UseBiasedLocking\")]),s._v(\" 启用偏向锁），在 JDK18 中，偏向锁已经被彻底废弃（无法通过命令行打开）。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"如何使用-synchronized\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何使用-synchronized\"}},[s._v(\"#\")]),s._v(\" 如何使用 synchronized？\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"synchronized\")]),s._v(\" 关键字的使用方式主要有下面 3 种：\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[t(\"strong\",[s._v(\"修饰实例方法\")])]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"修饰静态方法\")])]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"修饰代码块\")])])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"1、修饰实例方法\")]),s._v(\" \"),t(\"strong\",[s._v(\"（锁当前对象实例）\")])]),s._v(\" \"),t(\"p\",[s._v(\"给当前对象实例加锁，进入同步代码前要获得 \"),t(\"strong\",[s._v(\"当前对象实例的锁\")]),s._v(\" 。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"synchronized\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//业务代码\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\")])]),t(\"p\",[t(\"strong\",[s._v(\"2、修饰静态方法\")]),s._v(\" （锁当前类）\")]),s._v(\" \"),t(\"p\",[s._v(\"给当前类加锁，会作用于类的所有对象实例 ，进入同步代码前要获得 \"),t(\"strong\",[s._v(\"当前 class 的锁\")]),s._v(\"。\")]),s._v(\" \"),t(\"p\",[s._v(\"这是因为静态成员不属于任何一个实例对象，归整个类所有，不依赖于类的特定实例，被类的所有实例共享。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"synchronized\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//业务代码\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\")])]),t(\"p\",[s._v(\"静态 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 方法和非静态 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 方法之间的调用互斥么？不互斥！如果一个线程 A 调用一个实例对象的非静态 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 方法，而线程 B 需要调用这个实例对象所属类的静态 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 方法，是允许的，不会发生互斥现象，因为访问静态 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 方法占用的锁是当前类的锁，而访问非静态 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 方法占用的锁是当前实例对象锁。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"3、修饰代码块\")]),s._v(\" （锁指定对象/类）\")]),s._v(\" \"),t(\"p\",[s._v(\"对括号里指定的对象/类加锁：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"synchronized(object)\")]),s._v(\" 表示进入同步代码库前要获得 \"),t(\"strong\",[s._v(\"给定对象的锁\")]),s._v(\"。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"synchronized(类.class)\")]),s._v(\" 表示进入同步代码前要获得 \"),t(\"strong\",[s._v(\"给定 Class 的锁\")])])]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"synchronized\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"this\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//业务代码\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\")])]),t(\"p\",[t(\"strong\",[s._v(\"总结：\")])]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"synchronized\")]),s._v(\" 关键字加到 \"),t(\"code\",[s._v(\"static\")]),s._v(\" 静态方法和 \"),t(\"code\",[s._v(\"synchronized(class)\")]),s._v(\" 代码块上都是是给 Class 类上锁；\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"synchronized\")]),s._v(\" 关键字加到实例方法上是给对象实例上锁；\")]),s._v(\" \"),t(\"li\",[s._v(\"尽量不要使用 \"),t(\"code\",[s._v(\"synchronized(String a)\")]),s._v(\" 因为 JVM 中，字符串常量池具有缓存功能。\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"构造方法可以用-synchronized-修饰么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#构造方法可以用-synchronized-修饰么\"}},[s._v(\"#\")]),s._v(\" 构造方法可以用 synchronized 修饰么？\")]),s._v(\" \"),t(\"p\",[s._v(\"先说结论：\"),t(\"strong\",[s._v(\"构造方法不能使用 synchronized 关键字修饰。\")])]),s._v(\" \"),t(\"p\",[s._v(\"构造方法本身就属于线程安全的，不存在同步的构造方法一说。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"synchronized-底层原理了解吗\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#synchronized-底层原理了解吗\"}},[s._v(\"#\")]),s._v(\" synchronized 底层原理了解吗？\")]),s._v(\" \"),t(\"p\",[s._v(\"synchronized 关键字底层原理属于 JVM 层面的东西。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"synchronized-同步语句块的情况\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#synchronized-同步语句块的情况\"}},[s._v(\"#\")]),s._v(\" synchronized 同步语句块的情况\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"SynchronizedDemo\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"synchronized\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"this\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"synchronized 代码块\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\")])]),t(\"p\",[s._v(\"通过 JDK 自带的 \"),t(\"code\",[s._v(\"javap\")]),s._v(\" 命令查看 \"),t(\"code\",[s._v(\"SynchronizedDemo\")]),s._v(\" 类的相关字节码信息：首先切换到类的对应目录执行 \"),t(\"code\",[s._v(\"javac SynchronizedDemo.java\")]),s._v(\" 命令生成编译后的 .class 文件，然后执行\"),t(\"code\",[s._v(\"javap -c -s -v -l SynchronizedDemo.class\")]),s._v(\"。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/synchronized-principle.png\",alt:\"synchronized关键字原理\"}})]),s._v(\" \"),t(\"p\",[s._v(\"从上面我们可以看出：\"),t(\"strong\",[t(\"code\",[s._v(\"synchronized\")]),s._v(\" 同步语句块的实现使用的是 \"),t(\"code\",[s._v(\"monitorenter\")]),s._v(\" 和 \"),t(\"code\",[s._v(\"monitorexit\")]),s._v(\" 指令，其中 \"),t(\"code\",[s._v(\"monitorenter\")]),s._v(\" 指令指向同步代码块的开始位置，\"),t(\"code\",[s._v(\"monitorexit\")]),s._v(\" 指令则指明同步代码块的结束位置。\")])]),s._v(\" \"),t(\"p\",[s._v(\"上面的字节码中包含一个 \"),t(\"code\",[s._v(\"monitorenter\")]),s._v(\" 指令以及两个 \"),t(\"code\",[s._v(\"monitorexit\")]),s._v(\" 指令，这是为了保证锁在同步代码块代码正常执行以及出现异常的这两种情况下都能被正确释放。\")]),s._v(\" \"),t(\"p\",[s._v(\"当执行 \"),t(\"code\",[s._v(\"monitorenter\")]),s._v(\" 指令时，线程试图获取锁也就是获取 \"),t(\"strong\",[s._v(\"对象监视器 \"),t(\"code\",[s._v(\"monitor\")])]),s._v(\" 的持有权。\")]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[s._v(\"在 Java 虚拟机(HotSpot)中，Monitor 是基于 C++实现的，由\"),t(\"a\",{attrs:{href:\"https://github.com/openjdk-mirror/jdk7u-hotspot/blob/50bdefc3afe944ca74c3093e7448d6b889cd20d1/src/share/vm/runtime/objectMonitor.cpp\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"ObjectMonitor\"),t(\"OutboundLink\")],1),s._v(\"实现的。每个对象中都内置了一个 \"),t(\"code\",[s._v(\"ObjectMonitor\")]),s._v(\"对象。\")]),s._v(\" \"),t(\"p\",[s._v(\"另外，\"),t(\"code\",[s._v(\"wait/notify\")]),s._v(\"等方法也依赖于\"),t(\"code\",[s._v(\"monitor\")]),s._v(\"对象，这就是为什么只有在同步的块或者方法中才能调用\"),t(\"code\",[s._v(\"wait/notify\")]),s._v(\"等方法，否则会抛出\"),t(\"code\",[s._v(\"java.lang.IllegalMonitorStateException\")]),s._v(\"的异常的原因。\")])]),s._v(\" \"),t(\"p\",[s._v(\"在执行\"),t(\"code\",[s._v(\"monitorenter\")]),s._v(\"时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/synchronized-get-lock-code-block.png\",alt:\"执行 monitorenter 获取锁\"}})]),s._v(\" \"),t(\"p\",[s._v(\"对象锁的的拥有者线程才可以执行 \"),t(\"code\",[s._v(\"monitorexit\")]),s._v(\" 指令来释放锁。在执行 \"),t(\"code\",[s._v(\"monitorexit\")]),s._v(\" 指令后，将锁计数器设为 0，表明锁被释放，其他线程可以尝试获取锁。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/synchronized-release-lock-block.png\",alt:\"执行 monitorexit 释放锁\"}})]),s._v(\" \"),t(\"p\",[s._v(\"如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"synchronized-修饰方法的的情况\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#synchronized-修饰方法的的情况\"}},[s._v(\"#\")]),s._v(\" synchronized 修饰方法的的情况\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"SynchronizedDemo2\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"synchronized\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"synchronized 方法\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\")])]),t(\"p\",[t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20240409220929535.png\",alt:\"image-20240409220929535\"}})]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"synchronized\")]),s._v(\" 修饰的方法并没有 \"),t(\"code\",[s._v(\"monitorenter\")]),s._v(\" 指令和 \"),t(\"code\",[s._v(\"monitorexit\")]),s._v(\" 指令，取得代之的确实是 \"),t(\"code\",[s._v(\"ACC_SYNCHRONIZED\")]),s._v(\" 标识，该标识指明了该方法是一个同步方法。JVM 通过该 \"),t(\"code\",[s._v(\"ACC_SYNCHRONIZED\")]),s._v(\" 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。\")]),s._v(\" \"),t(\"p\",[s._v(\"如果是实例方法，JVM 会尝试获取实例对象的锁。如果是静态方法，JVM 会尝试获取当前 class 的锁。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"总结\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结\"}},[s._v(\"#\")]),s._v(\" 总结\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[t(\"code\",[s._v(\"synchronized\")]),s._v(\" 同步语句块的实现使用的是 \"),t(\"code\",[s._v(\"monitorenter\")]),s._v(\" 和 \"),t(\"code\",[s._v(\"monitorexit\")]),s._v(\" 指令，其中 \"),t(\"code\",[s._v(\"monitorenter\")]),s._v(\" 指令指向同步代码块的开始位置，\"),t(\"code\",[s._v(\"monitorexit\")]),s._v(\" 指令则指明同步代码块的结束位置。\")])]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"synchronized\")]),s._v(\" 修饰的方法并没有 \"),t(\"code\",[s._v(\"monitorenter\")]),s._v(\" 指令和 \"),t(\"code\",[s._v(\"monitorexit\")]),s._v(\" 指令，取得代之的确实是 \"),t(\"code\",[s._v(\"ACC_SYNCHRONIZED\")]),s._v(\" 标识，该标识指明了该方法是一个同步方法。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"不过两者的本质都是对对象监视器 monitor 的获取。\")])]),s._v(\" \"),t(\"p\",[s._v(\"相关推荐：\"),t(\"a\",{attrs:{href:\"https://tech.youzan.com/javasuo-yu-xian-cheng-de-na-xie-shi/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"Java 锁与线程的那些事 - 有赞技术团队\"),t(\"OutboundLink\")],1),s._v(\" 。\")]),s._v(\" \"),t(\"p\",[s._v(\"🧗🏻 进阶一下：学有余力的小伙伴可以抽时间详细研究一下对象监视器 \"),t(\"code\",[s._v(\"monitor\")]),s._v(\"。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"jdk1-6-之后的-synchronized-底层做了哪些优化\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jdk1-6-之后的-synchronized-底层做了哪些优化\"}},[s._v(\"#\")]),s._v(\" JDK1.6 之后的 synchronized 底层做了哪些优化？\")]),s._v(\" \"),t(\"p\",[s._v(\"JDK1.6 对锁的实现引入了大量的优化，如偏向锁、轻量级锁、自旋锁、适应性自旋锁、锁消除、锁粗化等技术来减少锁操作的开销。\")]),s._v(\" \"),t(\"p\",[s._v(\"锁主要存在四种状态，依次是：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，他们会随着竞争的激烈而逐渐升级。注意锁可以升级不可降级，这种策略是为了提高获得锁和释放锁的效率。\")]),s._v(\" \"),t(\"p\",[s._v(\"关于这几种优化的详细信息可以查看下面这篇文章：\"),t(\"a\",{attrs:{href:\"https://www.cnblogs.com/wuqinglong/p/9945618.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"Java6 及以上版本对 synchronized 的优化\"),t(\"OutboundLink\")],1),s._v(\" 。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"synchronized-和-volatile-有什么区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#synchronized-和-volatile-有什么区别\"}},[s._v(\"#\")]),s._v(\" synchronized 和 volatile 有什么区别？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[t(\"code\",[s._v(\"synchronized\")]),s._v(\" 关键字和 \"),t(\"code\",[s._v(\"volatile\")]),s._v(\" 关键字是两个互补的存在，而不是对立的存在！\")])]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"volatile\")]),s._v(\" 关键字是线程同步的轻量级实现，\"),t(\"strong\",[s._v(\"所以 \"),t(\"code\",[s._v(\"volatile\")]),s._v(\"性能肯定比\"),t(\"code\",[s._v(\"synchronized\")]),s._v(\"关键字要好 。但是 \"),t(\"code\",[s._v(\"volatile\")]),s._v(\" 关键字只能用于变量而 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 关键字可以修饰方法以及代码块 。\")])]),s._v(\" \"),t(\"li\",[t(\"strong\",[t(\"code\",[s._v(\"volatile\")]),s._v(\" 关键字能保证数据的可见性，但不能保证数据的原子性。\"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 关键字两者都能保证。\")])]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"volatile\")]),s._v(\"关键字主要用于解决变量在多个线程之间的可见性，而 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 关键字解决的是多个线程之间访问资源的同步性。\")])]),s._v(\" \"),t(\"h2\",{attrs:{id:\"reentrantlock\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#reentrantlock\"}},[s._v(\"#\")]),s._v(\" ReentrantLock\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"reentrantlock-是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#reentrantlock-是什么\"}},[s._v(\"#\")]),s._v(\" ReentrantLock 是什么？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\" 实现了 \"),t(\"code\",[s._v(\"Lock\")]),s._v(\" 接口，是一个可重入且独占式的锁，和 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 关键字类似。不过，\"),t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\" 更灵活、更强大，增加了轮询、超时、中断、公平锁和非公平锁等高级功能。\")])]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ReentrantLock\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"implements\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Lock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[s._v(\"java\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"io\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")])]),s._v(\"Serializable\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\" 里面有一个内部类 \"),t(\"code\",[s._v(\"Sync\")]),s._v(\"，\"),t(\"code\",[s._v(\"Sync\")]),s._v(\" 继承 AQS（\"),t(\"code\",[s._v(\"AbstractQueuedSynchronizer\")]),s._v(\"），添加锁和释放锁的大部分操作实际上都是在 \"),t(\"code\",[s._v(\"Sync\")]),s._v(\" 中实现的。\"),t(\"code\",[s._v(\"Sync\")]),s._v(\" 有公平锁 \"),t(\"code\",[s._v(\"FairSync\")]),s._v(\" 和非公平锁 \"),t(\"code\",[s._v(\"NonfairSync\")]),s._v(\" 两个子类。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/reentrantlock-class-diagram.png\",alt:\"\"}})]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\" 默认使用非公平锁，也可以通过构造器来显式的指定使用公平锁。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 传入一个 boolean 值，true 时为公平锁，false 时为非公平锁\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ReentrantLock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"boolean\")]),s._v(\" fair\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    sync \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" fair \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"?\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"FairSync\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\":\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"NonfairSync\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\")])]),t(\"p\",[s._v(\"从上面的内容可以看出， \"),t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\" 的底层就是由 AQS 来实现的。关于 AQS 的相关内容推荐阅读 \"),t(\"a\",{attrs:{href:\"https://javaguide.cn/java/concurrent/aqs.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"AQS 详解\"),t(\"OutboundLink\")],1),s._v(\" 这篇文章。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"公平锁和非公平锁有什么区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#公平锁和非公平锁有什么区别\"}},[s._v(\"#\")]),s._v(\" 公平锁和非公平锁有什么区别？\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[s._v(\"公平锁\")]),s._v(\" : 锁被释放之后，\"),t(\"strong\",[s._v(\"先申请的线程先得到锁。性能较差一些，因为公平锁为了保证时间上的绝对顺序，上下文切换更频繁。\")])]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"非公平锁\")]),s._v(\"：锁被释放之后**，后申请的线程可能会先获取到锁，是随机或者按照其他优先级排序的。性能更好，但可能会导致某些线程永远无法获取到锁。**\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"synchronized-和-reentrantlock-有什么区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#synchronized-和-reentrantlock-有什么区别\"}},[s._v(\"#\")]),s._v(\" synchronized 和 ReentrantLock 有什么区别？\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"两者都是可重入锁\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#两者都是可重入锁\"}},[s._v(\"#\")]),s._v(\" 两者都是可重入锁\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"可重入锁\")]),s._v(\" 也叫递归锁，指的是\"),t(\"strong\",[s._v(\"线程可以再次获取自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，如果是不可重入锁的话，就会造成死锁。\")])]),s._v(\" \"),t(\"p\",[s._v(\"JDK 提供的所有现成的 \"),t(\"code\",[s._v(\"Lock\")]),s._v(\" 实现类，包括 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 关键字锁都是可重入的。\")]),s._v(\" \"),t(\"p\",[s._v(\"在下面的代码中，\"),t(\"code\",[s._v(\"method1()\")]),s._v(\" 和 \"),t(\"code\",[s._v(\"method2()\")]),s._v(\"都被 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 关键字修饰，\"),t(\"code\",[s._v(\"method1()\")]),s._v(\"调用了\"),t(\"code\",[s._v(\"method2()\")]),s._v(\"。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"SynchronizedDemo\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"synchronized\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method1\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"方法1\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method2\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"synchronized\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method2\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"方法2\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\")])]),t(\"p\",[s._v(\"由于 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\"锁是可重入的，同一个线程在调用\"),t(\"code\",[s._v(\"method1()\")]),s._v(\" 时可以直接获得当前对象的锁，执行 \"),t(\"code\",[s._v(\"method2()\")]),s._v(\" 的时候可以再次获取这个对象的锁，不会产生死锁问题。假如\"),t(\"code\",[s._v(\"synchronized\")]),s._v(\"是不可重入锁的话，由于该对象的锁已被当前线程所持有且无法释放，这就导致线程在执行 \"),t(\"code\",[s._v(\"method2()\")]),s._v(\"时获取锁失败，会出现死锁问题。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"synchronized-依赖于-jvm-而-reentrantlock-依赖于-api\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#synchronized-依赖于-jvm-而-reentrantlock-依赖于-api\"}},[s._v(\"#\")]),s._v(\" synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"synchronized\")]),s._v(\" 是依赖于 JVM 实现的，前面我们也讲到了 虚拟机团队在 JDK1.6 为 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\" 是 JDK 层面实现的（也就是 API 层面，需要 lock() 和 unlock() 方法配合 try/finally 语句块来完成），所以我们可以通过查看它的源代码，来看它是如何实现的。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"reentrantlock-比-synchronized-增加了一些高级功能\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#reentrantlock-比-synchronized-增加了一些高级功能\"}},[s._v(\"#\")]),s._v(\" ReentrantLock 比 synchronized 增加了一些高级功能\")]),s._v(\" \"),t(\"p\",[s._v(\"相比\"),t(\"code\",[s._v(\"synchronized\")]),s._v(\"，\"),t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\"增加了一些高级功能。主要来说主要有三点：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[s._v(\"等待可中断\")]),s._v(\" : \"),t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\"提供了一种能够中断等待锁的线程的机制，通过 \"),t(\"code\",[s._v(\"lock.lockInterruptibly()\")]),s._v(\" 来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"可实现公平锁\")]),s._v(\" : \"),t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\"可以指定是公平锁还是非公平锁。而\"),t(\"code\",[s._v(\"synchronized\")]),s._v(\"只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。\"),t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\"默认情况是非公平的，可以通过 \"),t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\"类的\"),t(\"code\",[s._v(\"ReentrantLock(boolean fair)\")]),s._v(\"构造方法来指定是否是公平的。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"可实现选择性通知（锁可以绑定多个条件）\")]),s._v(\": \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\"关键字与\"),t(\"code\",[s._v(\"wait()\")]),s._v(\"和\"),t(\"code\",[s._v(\"notify()\")]),s._v(\"/\"),t(\"code\",[s._v(\"notifyAll()\")]),s._v(\"方法相结合可以实现等待/通知机制。\"),t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\"类当然也可以实现，但是需要借助于\"),t(\"code\",[s._v(\"Condition\")]),s._v(\"接口与\"),t(\"code\",[s._v(\"newCondition()\")]),s._v(\"方法。\")])]),s._v(\" \"),t(\"p\",[s._v(\"如果你想使用上述功能，那么选择 \"),t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\" 是一个不错的选择。\")]),s._v(\" \"),t(\"p\",[s._v(\"关于 \"),t(\"code\",[s._v(\"Condition\")]),s._v(\"接口的补充：\")]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[t(\"code\",[s._v(\"Condition\")]),s._v(\"是 JDK1.5 之后才有的，它具有很好的灵活性，比如可以实现多路通知功能也就是在一个\"),t(\"code\",[s._v(\"Lock\")]),s._v(\"对象中可以创建多个\"),t(\"code\",[s._v(\"Condition\")]),s._v(\"实例（即对象监视器），\"),t(\"strong\",[s._v(\"线程对象可以注册在指定的\"),t(\"code\",[s._v(\"Condition\")]),s._v(\"中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。 在使用\"),t(\"code\",[s._v(\"notify()/notifyAll()\")]),s._v(\"方法进行通知时，被通知的线程是由 JVM 选择的，用\"),t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\"类结合\"),t(\"code\",[s._v(\"Condition\")]),s._v(\"实例可以实现“选择性通知”\")]),s._v(\" ，这个功能非常重要，而且是 \"),t(\"code\",[s._v(\"Condition\")]),s._v(\" 接口默认提供的。而\"),t(\"code\",[s._v(\"synchronized\")]),s._v(\"关键字就相当于整个 \"),t(\"code\",[s._v(\"Lock\")]),s._v(\" 对象中只有一个\"),t(\"code\",[s._v(\"Condition\")]),s._v(\"实例，所有的线程都注册在它一个身上。如果执行\"),t(\"code\",[s._v(\"notifyAll()\")]),s._v(\"方法的话就会通知所有处于等待状态的线程，这样会造成很大的效率问题。而\"),t(\"code\",[s._v(\"Condition\")]),s._v(\"实例的\"),t(\"code\",[s._v(\"signalAll()\")]),s._v(\"方法，只会唤醒注册在该\"),t(\"code\",[s._v(\"Condition\")]),s._v(\"实例中的所有等待线程。\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"可中断锁和不可中断锁有什么区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#可中断锁和不可中断锁有什么区别\"}},[s._v(\"#\")]),s._v(\" 可中断锁和不可中断锁有什么区别？\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[s._v(\"可中断锁\")]),s._v(\"：获取锁的过程中可以被中断，不需要一直等到获取锁之后 才能进行其他逻辑处理。\"),t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\" 就属于是可中断锁。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"不可中断锁\")]),s._v(\"：一旦线程申请了锁，就只能等到拿到锁以后才能进行其他的逻辑处理。 \"),t(\"code\",[s._v(\"synchronized\")]),s._v(\" 就属于是不可中断锁。\")])]),s._v(\" \"),t(\"h2\",{attrs:{id:\"reentrantreadwritelock\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#reentrantreadwritelock\"}},[s._v(\"#\")]),s._v(\" ReentrantReadWriteLock\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"ReentrantReadWriteLock\")]),s._v(\" 在实际项目中使用的并不多，面试中也问的比较少，简单了解即可。JDK 1.8 引入了性能更好的读写锁 \"),t(\"code\",[s._v(\"StampedLock\")]),s._v(\" 。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"reentrantreadwritelock-是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#reentrantreadwritelock-是什么\"}},[s._v(\"#\")]),s._v(\" ReentrantReadWriteLock 是什么？\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"ReentrantReadWriteLock\")]),s._v(\" 实现了 \"),t(\"code\",[s._v(\"ReadWriteLock\")]),s._v(\" ，是一个可重入的读写锁，既可以保证多个线程同时读的效率，同时又可以保证有写入操作时的线程安全。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ReentrantReadWriteLock\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"implements\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ReadWriteLock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[s._v(\"java\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"io\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")])]),s._v(\"Serializable\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"interface\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ReadWriteLock\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Lock\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"readLock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Lock\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"writeLock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\")])]),t(\"ul\",[t(\"li\",[s._v(\"一般锁进行并发控制的规则：读读互斥、读写互斥、写写互斥。\")]),s._v(\" \"),t(\"li\",[s._v(\"读写锁进行并发控制的规则：读读不互斥、读写互斥、写写互斥（只有读读不互斥）。\")])]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"ReentrantReadWriteLock\")]),s._v(\" 其实是两把锁，一把是 \"),t(\"code\",[s._v(\"WriteLock\")]),s._v(\" (写锁)，一把是 \"),t(\"code\",[s._v(\"ReadLock\")]),s._v(\"（读锁） 。读锁是共享锁，写锁是独占锁。读锁可以被同时读，可以同时被多个线程持有，而写锁最多只能同时被一个线程持有。\")]),s._v(\" \"),t(\"p\",[s._v(\"和 \"),t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\" 一样，\"),t(\"code\",[s._v(\"ReentrantReadWriteLock\")]),s._v(\" 底层也是基于 AQS 实现的。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/reentrantreadwritelock-class-diagram.png\",alt:\"\"}})]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"ReentrantReadWriteLock\")]),s._v(\" 也支持公平锁和非公平锁，默认使用非公平锁，可以通过构造器来显示的指定。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 传入一个 boolean 值，true 时为公平锁，false 时为非公平锁\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ReentrantReadWriteLock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"boolean\")]),s._v(\" fair\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    sync \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" fair \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"?\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"FairSync\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\":\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"NonfairSync\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    readerLock \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ReadLock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"this\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    writerLock \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"WriteLock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"this\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\")])]),t(\"h3\",{attrs:{id:\"reentrantreadwritelock-适合什么场景\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#reentrantreadwritelock-适合什么场景\"}},[s._v(\"#\")]),s._v(\" ReentrantReadWriteLock 适合什么场景？\")]),s._v(\" \"),t(\"p\",[s._v(\"由于 \"),t(\"code\",[s._v(\"ReentrantReadWriteLock\")]),s._v(\" 既可以保证多个线程同时读的效率，同时又可以保证有写入操作时的线程安全。因此，在读多写少的情况下，使用 \"),t(\"code\",[s._v(\"ReentrantReadWriteLock\")]),s._v(\" 能够明显提升系统性能。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"共享锁和独占锁有什么区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#共享锁和独占锁有什么区别\"}},[s._v(\"#\")]),s._v(\" 共享锁和独占锁有什么区别？\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[s._v(\"共享锁\")]),s._v(\"：一把锁可以被多个线程同时获得。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"独占锁\")]),s._v(\"：一把锁只能被一个线程获得。\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"线程持有读锁还能获取写锁吗\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程持有读锁还能获取写锁吗\"}},[s._v(\"#\")]),s._v(\" 线程持有读锁还能获取写锁吗？\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"在线程持有读锁的情况下，该线程不能取得写锁(因为获取写锁的时候，如果发现当前的读锁被占用，就马上获取失败，不管读锁是不是被当前线程持有)。\")]),s._v(\" \"),t(\"li\",[s._v(\"在线程持有写锁的情况下，该线程可以继续获取读锁（获取读锁时如果发现写锁被占用，只有写锁没有被当前线程占用的情况才会获取失败）。\")])]),s._v(\" \"),t(\"p\",[s._v(\"读写锁的源码分析，推荐阅读 \"),t(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s/h3VIUyH9L0v14MrQJiiDbw\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"聊聊 Java 的几把 JVM 级锁 - 阿里巴巴中间件\"),t(\"OutboundLink\")],1),s._v(\" 这篇文章，写的很不错。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"读锁为什么不能升级为写锁\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#读锁为什么不能升级为写锁\"}},[s._v(\"#\")]),s._v(\" 读锁为什么不能升级为写锁？\")]),s._v(\" \"),t(\"p\",[s._v(\"写锁可以降级为读锁，但是读锁却不能升级为写锁。这是因为读锁升级为写锁会引起线程的争夺，毕竟写锁属于是独占锁，这样的话，会影响性能。\")]),s._v(\" \"),t(\"p\",[s._v(\"另外，还可能会有死锁问题发生。举个例子：假设两个线程的读锁都想升级写锁，则需要对方都释放自己锁，而双方都不释放，就会产生死锁。\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"stampedlock\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#stampedlock\"}},[s._v(\"#\")]),s._v(\" StampedLock\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"StampedLock\")]),s._v(\" 面试中问的比较少，不是很重要，简单了解即可。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"stampedlock-是什么\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#stampedlock-是什么\"}},[s._v(\"#\")]),s._v(\" StampedLock 是什么？\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"StampedLock\")]),s._v(\" 是 JDK 1.8 引入的性能更好的读写锁，不可重入且不支持条件变量 \"),t(\"code\",[s._v(\"Conditon\")]),s._v(\"。\")]),s._v(\" \"),t(\"p\",[s._v(\"不同于一般的 \"),t(\"code\",[s._v(\"Lock\")]),s._v(\" 类，\"),t(\"code\",[s._v(\"StampedLock\")]),s._v(\" 并不是直接实现 \"),t(\"code\",[s._v(\"Lock\")]),s._v(\"或 \"),t(\"code\",[s._v(\"ReadWriteLock\")]),s._v(\"接口，而是基于 \"),t(\"strong\",[s._v(\"CLH 锁\")]),s._v(\" 独立实现的（AQS 也是基于这玩意）。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"StampedLock\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"implements\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[s._v(\"java\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"io\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")])]),s._v(\"Serializable\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\")])]),t(\"p\",[t(\"code\",[s._v(\"StampedLock\")]),s._v(\" 提供了三种模式的读写控制模式：读锁、写锁和乐观读。\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[s._v(\"写锁\")]),s._v(\"：独占锁，一把锁只能被一个线程获得。当一个线程获取写锁后，其他请求读锁和写锁的线程必须等待。类似于 \"),t(\"code\",[s._v(\"ReentrantReadWriteLock\")]),s._v(\" 的写锁，不过这里的写锁是不可重入的。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"读锁\")]),s._v(\" （悲观读）：共享锁，没有线程获取写锁的情况下，多个线程可以同时持有读锁。如果己经有线程持有写锁，则其他线程请求获取该读锁会被阻塞。类似于 \"),t(\"code\",[s._v(\"ReentrantReadWriteLock\")]),s._v(\" 的读锁，不过这里的读锁是不可重入的。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"乐观读\")]),s._v(\"：允许多个线程获取乐观读以及读锁。同时允许一个写线程获取写锁。\")])]),s._v(\" \"),t(\"p\",[s._v(\"另外，\"),t(\"code\",[s._v(\"StampedLock\")]),s._v(\" 还支持这三种锁在一定条件下进行相互转换 。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"tryConvertToWriteLock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" stamp\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"tryConvertToReadLock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" stamp\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"tryConvertToOptimisticRead\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" stamp\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\")])]),t(\"p\",[t(\"code\",[s._v(\"StampedLock\")]),s._v(\" 在获取锁的时候会返回一个 long 型的数据戳，该数据戳用于稍后的锁释放参数，如果返回的数据戳为 0 则表示锁获取失败。当前线程持有了锁再次获取锁还是会返回一个新的数据戳，这也是\"),t(\"code\",[s._v(\"StampedLock\")]),s._v(\"不可重入的原因。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 写锁\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"writeLock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" s\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" next\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"  \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// bypass acquireWrite in fully unlocked case only\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"s \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" state\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"&\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"ABITS\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0L\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"&&\")]),s._v(\"\\n             \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"U\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"compareAndSwapLong\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"this\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"STATE\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" s\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" next \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" s \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"WBIT\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"?\")]),s._v(\"\\n            next \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\":\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"acquireWrite\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[s._v(\"false\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0L\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 读锁\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"readLock\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" s \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" state\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" next\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"  \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// bypass acquireRead on common uncontended case\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"whead \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),s._v(\" wtail \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"&&\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"s \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"&\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"ABITS\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"RFULL\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"&&\")]),s._v(\"\\n             \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"U\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"compareAndSwapLong\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"this\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"STATE\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" s\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" next \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" s \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"RUNIT\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"?\")]),s._v(\"\\n            next \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\":\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"acquireRead\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[s._v(\"false\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0L\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 乐观读\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"tryOptimisticRead\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" s\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"s \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" state\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"&\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"WBIT\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0L\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"?\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"s \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"&\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"SBITS\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\":\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0L\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),t(\"br\")])]),t(\"h3\",{attrs:{id:\"stampedlock-的性能为什么更好\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#stampedlock-的性能为什么更好\"}},[s._v(\"#\")]),s._v(\" StampedLock 的性能为什么更好？\")]),s._v(\" \"),t(\"p\",[s._v(\"相比于传统读写锁多出来的乐观读是\"),t(\"code\",[s._v(\"StampedLock\")]),s._v(\"比 \"),t(\"code\",[s._v(\"ReadWriteLock\")]),s._v(\" 性能更好的关键原因。\"),t(\"code\",[s._v(\"StampedLock\")]),s._v(\" 的乐观读允许一个写线程获取写锁，所以不会导致所有写线程阻塞，也就是当读多写少的时候，写线程有机会获取写锁，减少了线程饥饿的问题，吞吐量大大提高。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"stampedlock-适合什么场景\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#stampedlock-适合什么场景\"}},[s._v(\"#\")]),s._v(\" StampedLock 适合什么场景？\")]),s._v(\" \"),t(\"p\",[s._v(\"和 \"),t(\"code\",[s._v(\"ReentrantReadWriteLock\")]),s._v(\" 一样，\"),t(\"code\",[s._v(\"StampedLock\")]),s._v(\" 同样适合读多写少的业务场景，可以作为 \"),t(\"code\",[s._v(\"ReentrantReadWriteLock\")]),s._v(\"的替代品，性能更好。\")]),s._v(\" \"),t(\"p\",[s._v(\"不过，需要注意的是\"),t(\"code\",[s._v(\"StampedLock\")]),s._v(\"不可重入，不支持条件变量 \"),t(\"code\",[s._v(\"Conditon\")]),s._v(\"，对中断操作支持也不友好（使用不当容易导致 CPU 飙升）。如果你需要用到 \"),t(\"code\",[s._v(\"ReentrantLock\")]),s._v(\" 的一些高级性能，就不太建议使用 \"),t(\"code\",[s._v(\"StampedLock\")]),s._v(\" 了。\")]),s._v(\" \"),t(\"p\",[s._v(\"另外，\"),t(\"code\",[s._v(\"StampedLock\")]),s._v(\" 性能虽好，但使用起来相对比较麻烦，一旦使用不当，就会出现生产问题。强烈建议你在使用\"),t(\"code\",[s._v(\"StampedLock\")]),s._v(\" 之前，看看 \"),t(\"a\",{attrs:{href:\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/StampedLock.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"StampedLock 官方文档中的案例\"),t(\"OutboundLink\")],1),s._v(\"。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"stampedlock-的底层原理了解吗\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#stampedlock-的底层原理了解吗\"}},[s._v(\"#\")]),s._v(\" StampedLock 的底层原理了解吗？\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"StampedLock\")]),s._v(\" 不是直接实现 \"),t(\"code\",[s._v(\"Lock\")]),s._v(\"或 \"),t(\"code\",[s._v(\"ReadWriteLock\")]),s._v(\"接口，而是基于 \"),t(\"strong\",[s._v(\"CLH 锁\")]),s._v(\" 实现的（AQS 也是基于这玩意），CLH 锁是对自旋锁的一种改良，是一种隐式的链表队列。\"),t(\"code\",[s._v(\"StampedLock\")]),s._v(\" 通过 CLH 队列进行线程的管理，通过同步状态值 \"),t(\"code\",[s._v(\"state\")]),s._v(\" 来表示锁的状态和类型。\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"StampedLock\")]),s._v(\" 的原理和 AQS 原理比较类似，这里就不详细介绍了，感兴趣的可以看看下面这两篇文章：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"a\",{attrs:{href:\"https://javaguide.cn/java/concurrent/aqs.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"AQS 详解\"),t(\"OutboundLink\")],1)]),s._v(\" \"),t(\"li\",[t(\"a\",{attrs:{href:\"https://segmentfault.com/a/1190000015808032\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"StampedLock 底层原理分析\"),t(\"OutboundLink\")],1)])]),s._v(\" \"),t(\"p\",[s._v(\"如果你只是准备面试的话，建议多花点精力搞懂 AQS 原理即可，\"),t(\"code\",[s._v(\"StampedLock\")]),s._v(\" 底层原理在面试中遇到的概率非常小。\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"atomic-原子类\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#atomic-原子类\"}},[s._v(\"#\")]),s._v(\" Atomic 原子类\")]),s._v(\" \"),t(\"p\",[s._v(\"Atomic 原子类部分的内容我单独写了一篇文章来总结：\"),t(\"RouterLink\",{attrs:{to:\"/java/10.javaSE/atomic-classes.html\"}},[s._v(\"Atomic 原子类总结\")]),s._v(\" 。\")],1)])}),[],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}