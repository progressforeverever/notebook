{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{456:function(t,o,s){\"use strict\";s.r(o);var a=s(4),n=Object(a.a)({},(function(){var t=this,o=t._self._c;return o(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[o(\"h1\",{attrs:{id:\"内存管理\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内存管理\"}},[t._v(\"#\")]),t._v(\" 内存管理\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107092027645.png\",alt:\"image-20231107092027645\"}})]),t._v(\" \"),o(\"h2\",{attrs:{id:\"概述\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#概述\"}},[t._v(\"#\")]),t._v(\" 概述\")]),t._v(\" \"),o(\"p\",[t._v(\"内存可存放数据。\"),o(\"strong\",[t._v(\"程序执行前需要先放到内存中才能被CPU处理——缓和CPU与硬盘之间的速度矛盾\")])]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107090414940.png\",alt:\"image-20231107090414940\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107090602499.png\",alt:\"image-20231107090440736\"}})]),t._v(\" \"),o(\"p\",[t._v(\"程序经过\"),o(\"strong\",[t._v(\"编译、链接\")]),t._v(\" 后生成的指令中指明 的是\"),o(\"strong\",[t._v(\"逻辑地址（相对地址），即：相对于 进程的起始地址而言 的地址\")])]),t._v(\" \"),o(\"p\",[t._v(\"然后要转入实际的物理地址，\"),o(\"strong\",[t._v(\"这中间就有个转化的过程\")])]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107090440736.png\",alt:\"image-20231107090602499\"}})]),t._v(\" \"),o(\"p\",[t._v(\"三种装入方式\")]),t._v(\" \"),o(\"h3\",{attrs:{id:\"绝对装入\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#绝对装入\"}},[t._v(\"#\")]),t._v(\" 绝对装入\")]),t._v(\" \"),o(\"p\",[t._v(\"绝对装入：在编译时，如果知道\"),o(\"strong\",[t._v(\"程序将放到内存中的哪个位置，编译程序将产生绝对地址的目标代码\")]),t._v(\"。 装入程序按照装入模块中的地址，将程序和数据装入内存。 Eg：如果知道装入模块要从地址为 100 的地方开始存放…\")]),t._v(\" \"),o(\"p\",[t._v(\"绝对装入\"),o(\"strong\",[t._v(\"只适用于单道程序环境\")]),t._v(\"。 程序中使用的绝对地址，可在编译或汇编时给出，也可由程序 员直接赋予。通常情况下都是编译或汇编时再转换为绝对地址。\")]),t._v(\" \"),o(\"p\",[t._v(\"假如这台程序按照绝对装入来找物理地址，那么换一台电脑，物理地址可能已经被占用，就不能运行了。\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107090715999.png\",alt:\"image-20231107090715999\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"静态定位装入\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#静态定位装入\"}},[t._v(\"#\")]),t._v(\" 静态定位装入\")]),t._v(\" \"),o(\"p\",[t._v(\"静态重定位：又称可重定位装入。编译、链接后的装入模块的地址都是从0开始的，指令中使用的地址、数据存放的地址都是相对于起始地址而言的逻辑地址。可根据内存的当前情况，将装入模块装入 到内存的适当位置。装入时对地址进行“重定位”，将逻辑地址变换为物理地址（\"),o(\"strong\",[t._v(\"地址变换是在装入 时一次完成的\")]),t._v(\"）。\")]),t._v(\" \"),o(\"p\",[t._v(\"静态重定位的特点是在一个作业装入内存时，\"),o(\"strong\",[t._v(\"必须分配其要求 的全部内存空间\")]),t._v(\"，如果没有足够的内存，就不能装入该作业。 作业一旦进入内存后，\"),o(\"strong\",[t._v(\"在运行期间就不能再移动，也不能再申 请内存空间\")])]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"适用于早期多道批处理系统\")])]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107091431520.png\",alt:\"image-20231107091332895\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"动态运行时装入\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#动态运行时装入\"}},[t._v(\"#\")]),t._v(\" 动态运行时装入\")]),t._v(\" \"),o(\"p\",[t._v(\"动态重定位：又称动态运行时装入。编译、链接后的装入模块的地址都是从0开始的。装入程序把装入模块装入内存后，\"),o(\"strong\",[t._v(\"并不会立即把逻辑地址转换为物理地址，而是把地址转换推迟到程序真正要执行 时才进行。因此装入内存后所有的地址依然是逻辑地址。这种方式需要一个重定位寄存器的支持。\")]),t._v(\"（用到时再转化成物理地址）\")]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"现代操作系统的应用\")])]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107091858932.png\",alt:\"image-20231107091431520\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107091332895.png\",alt:\"image-20231107091534770\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107092708599.png\",alt:\"image-20231107092708599\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107091604302.png\",alt:\"image-20231107091604302\"}})]),t._v(\" \"),o(\"p\",[t._v(\"链接  编译后的模块拼成一起\")]),t._v(\" \"),o(\"h3\",{attrs:{id:\"静态链接\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#静态链接\"}},[t._v(\"#\")]),t._v(\" 静态链接\")]),t._v(\" \"),o(\"p\",[t._v(\"静态链接：在程序运行之前， 先将各目标模块及它们所需 的库函数连接成一个完整的 可执行文件（装入模块）， 之后不再拆开。\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107091534770.png\",alt:\"image-20231107091858932\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"动态链接\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#动态链接\"}},[t._v(\"#\")]),t._v(\" 动态链接\")]),t._v(\" \"),o(\"p\",[t._v(\"装入时动态链接：将各目标 模块装入内存时，边装入边 链接的链接方式\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107091920381.png\",alt:\"image-20231107091920381\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"运行时动态装入\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#运行时动态装入\"}},[t._v(\"#\")]),t._v(\" 运行时动态装入\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107092106119.png\",alt:\"image-20231107091943372\"}})]),t._v(\" \"),o(\"p\",[t._v(\"运行时动态链接：在程序执 行中需要该目标模块时，才 对它进行链接。其优点是便 于修改和更新，便于实现对 目标模块的共享\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107092027645.png\",alt:\"image-20231107092027645\"}})]),t._v(\" \"),o(\"p\",[t._v(\"后面就主要研究这几个问题\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107091943372.png\",alt:\"image-20231107092106119\"}})]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"先链接  再装入\")])]),t._v(\" \"),o(\"h2\",{attrs:{id:\"内存保护\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内存保护\"}},[t._v(\"#\")]),t._v(\" 内存保护\")]),t._v(\" \"),o(\"p\",[t._v(\"操作系统需要提供内存保护功能。\"),o(\"strong\",[t._v(\"保证各进程在各自存储空间内运行，互不干扰\")])]),t._v(\" \"),o(\"h3\",{attrs:{id:\"设置上下限寄存器\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#设置上下限寄存器\"}},[t._v(\"#\")]),t._v(\" 设置上下限寄存器\")]),t._v(\" \"),o(\"p\",[t._v(\"方法一：在CPU中设置一对上、下限寄存器，存放 进程的上、下限地址。进程的指令要访问某个地址 时，CPU检查是否越界\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107092213529.png\",alt:\"image-20231107092213529\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"可重定位寄存器\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#可重定位寄存器\"}},[t._v(\"#\")]),t._v(\" 可重定位寄存器\")]),t._v(\" \"),o(\"p\",[t._v(\"采用重定位寄存器（又称\"),o(\"strong\",[t._v(\"基址寄存器\")]),t._v(\"）和界 地址寄存器（又称\"),o(\"strong\",[t._v(\"限长寄存器\")]),t._v(\"）进行越界检查。重定 位寄存器中存放的是进程的起始物理地址。界地址寄 存器中存放的是进程的最大逻辑地址\")]),t._v(\" \"),o(\"p\",[t._v(\"基址和限长就能知道范围了\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107092808492.png\",alt:\"image-20231107092530983\"}})]),t._v(\" \"),o(\"h2\",{attrs:{id:\"内存空间的扩充\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内存空间的扩充\"}},[t._v(\"#\")]),t._v(\" 内存空间的扩充\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107092530983.png\",alt:\"image-20231107092808492\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"覆盖技术\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#覆盖技术\"}},[t._v(\"#\")]),t._v(\" 覆盖技术\")]),t._v(\" \"),o(\"p\",[t._v(\"覆盖技术的思想：\"),o(\"strong\",[t._v(\"将程序分为多个段（多个模块）\")]),t._v(\"。 \"),o(\"strong\",[t._v(\"常用的段常驻内存，不常用的段在需要时调入内存\")]),t._v(\"。 内存中分为\"),o(\"strong\",[t._v(\"一个“固定区”和若干个“覆盖区”。\")]),t._v(\" 需要常驻内存的段放在“固定区”中，调入后就不再 调出（除非运行结束） 不常用的段放在“覆盖区”，需要用到时调入内存， 用不到时调出内存\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107092857247.png\",alt:\"image-20231107092857247\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"交换技术\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#交换技术\"}},[t._v(\"#\")]),t._v(\" 交换技术\")]),t._v(\" \"),o(\"p\",[t._v(\"交换（对换）技术的设计思想：\"),o(\"strong\",[t._v(\"内存空间紧张时，系统将内存中某些进程暂时换出外存，把外存中 某些已具备运行条件的进程换入内存（进程在内存与磁盘间动态调度）\")])]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107093151448.png\",alt:\"image-20231107093151448\"}})]),t._v(\" \"),o(\"p\",[t._v(\"这里与后面的磁盘管理有一定的联系\")]),t._v(\" \"),o(\"p\",[t._v(\"通常把磁盘空间分为\"),o(\"strong\",[t._v(\"文件区和对换区两部分\")]),t._v(\"。\"),o(\"strong\",[t._v(\"文件区主要用于存放文件\")]),t._v(\"，主要追求存储空间的利用率，因此对文件区空间的管理采 用离散分配方式；\"),o(\"strong\",[t._v(\"对换区空间只占磁盘空间的小部分，被换出的进程数据就存放 在对换区。\")])]),t._v(\" \"),o(\"p\",[t._v(\"对换区速度更快，\"),o(\"strong\",[t._v(\"对换区的I/O速度比文件区的更快。\")])]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"（注意：PCB 会常驻内存，不会被换出外存）\")])]),t._v(\" \"),o(\"h3\",{attrs:{id:\"虚拟内存\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#虚拟内存\"}},[t._v(\"#\")]),t._v(\" 虚拟内存\")]),t._v(\" \"),o(\"p\",[t._v(\"传统的存储管理\")]),t._v(\" \"),o(\"p\",[t._v(\"一次性：作业必须一次性全部装入内存后才能开始运行。这会造成两个问题：\")]),t._v(\" \"),o(\"p\",[t._v(\"①作业很大时，不能全 部装入内存，导致大作业无法运行；\")]),t._v(\" \"),o(\"p\",[t._v(\"②当大量作业要求运行时，由于内存无法容纳所有作业，因此只 有少量作业能运行，导致多道程序并发度下降。\")]),t._v(\" \"),o(\"p\",[t._v(\"驻留性：一旦作业被装入内存，就会一直驻留在内存中，直至作业运行结束。事实上，在一个时间段 内，只需要访问作业的一小部分数据即可正常运行，这就导致了内存中会驻留大量的、暂时用不到的 数据，浪费了宝贵的内存资源。\")]),t._v(\" \"),o(\"p\",[t._v(\"虚拟内存技术  \"),o(\"strong\",[t._v(\"换入换出\")]),t._v(\" \"),o(\"strong\",[t._v(\"（页面置换算法）\")])]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107111428772.png\",alt:\"image-20231107111428772\"}})]),t._v(\" \"),o(\"p\",[t._v(\"虚拟内存有一下三个主要特征：\")]),t._v(\" \"),o(\"p\",[t._v(\"多次性：无需在作业运行时一次性全部装入内存，而是允许被分成多次调入内存。\")]),t._v(\" \"),o(\"p\",[t._v(\"对换性：在作业运行时无需一直常驻内存，而是允许在作业运行过程中，将作业换 入、换出。\")]),t._v(\" \"),o(\"p\",[t._v(\"虚拟性：从逻辑上扩充了内存的容量，使用户看到的内存容量，远大于实际的容量。\")]),t._v(\" \"),o(\"p\",[t._v(\"虚拟内存技术，允许一个作业分多次调入内存。如果采用连续分配方式，会不方便实现。因此， 虚拟内存的实现需要建立在离散分配的内存管理方式基础上。\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107112103548.png\",alt:\"image-20231107112103548\"}})]),t._v(\" \"),o(\"h4\",{attrs:{id:\"请求分页管理\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#请求分页管理\"}},[t._v(\"#\")]),t._v(\" 请求分页管理\")]),t._v(\" \"),o(\"p\",[t._v(\"请求分页存储管理与基本分页存储管理的主要区别： 在程序执行过程中，当所访问的信息不在内存时，由操作系统负责将所需信息从外存调入内存，然 后继续执行程序。 \"),o(\"strong\",[t._v(\"若内存空间不够，由操作系统负责将内存中暂时用不到的信息换出到外存。\")])]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107112242448.png\",alt:\"image-20231107112208217\"}})]),t._v(\" \"),o(\"p\",[t._v(\"页表机制   （数据结构上入手）\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107112208217.png\",alt:\"image-20231107112242448\"}})]),t._v(\" \"),o(\"h4\",{attrs:{id:\"缺页中断机构\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缺页中断机构\"}},[t._v(\"#\")]),t._v(\" 缺页中断机构\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107112707493.png\",alt:\"image-20231107112707493\"}})]),t._v(\" \"),o(\"p\",[t._v(\"引发缺页中断\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107112731813.png\",alt:\"image-20231107112731813\"}})]),t._v(\" \"),o(\"h4\",{attrs:{id:\"地址变化机构\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#地址变化机构\"}},[t._v(\"#\")]),t._v(\" 地址变化机构\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107112751366.png\",alt:\"image-20231107112751366\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"页面置换算法\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#页面置换算法\"}},[t._v(\"#\")]),t._v(\" 页面置换算法\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107112829419.png\",alt:\"image-20231107112908601\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107112908601.png\",alt:\"image-20231107112829419\"}})]),t._v(\" \"),o(\"p\",[t._v(\"最佳置换算法可以保证最低的缺页率，但实际上，\"),o(\"strong\",[t._v(\"只有在进程执行的过程中才能知道接下来会访问到 的是哪个页面。操作系统无法提前预判页面访问序列\")]),t._v(\".因此，\"),o(\"strong\",[t._v(\"最佳置换算法是无法实现的。\")])]),t._v(\" \"),o(\"p\",[t._v(\"先进先出算法\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107113002311.png\",alt:\"image-20231107113002311\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107113019219.png\",alt:\"image-20231107113019219\"}})]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"Belady 异常——当为进程分配的物理块数增大时，缺页次数不减反增的异常现象。\")]),t._v(\" \"),o(\"strong\",[t._v(\"只有 FIFO 算法会产生 Belady 异常\")]),t._v(\"。另外，FIFO算法虽然\"),o(\"strong\",[t._v(\"实现简单\")]),t._v(\"，但是该算法与进程实际运行时的 规律不适应，\"),o(\"strong\",[t._v(\"因为先进入的页面也有可能最经常被访问。因此，算法性能差\")])]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"LRU！！！\")])]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"最近最久未使用置换算法（LRU，least recently used）\")]),t._v(\"：每次淘汰的页面是最近最久未使用的页面 实现方法：赋予每个页面对应的页表项中，用访问字段记录该页面自上次被访问以来所经历的时间t。 \"),o(\"strong\",[t._v(\"当需要淘汰一个页面时，选择现有页面中 t 值最大的，即最近最久未使用的页面\")])]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107113141223.png\",alt:\"image-20231107113141223\"}})]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"逆向扫描\")])]),t._v(\" \"),o(\"p\",[t._v(\"时钟置换算法\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107113501962.png\",alt:\"image-20231107113501962\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107113615578.png\",alt:\"image-20231107113543604\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107113543604.png\",alt:\"image-20231107113602065\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107113602065.png\",alt:\"image-20231107113615578\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"页面分配策略\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#页面分配策略\"}},[t._v(\"#\")]),t._v(\" 页面分配策略\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107114120906.png\",alt:\"image-20231107114120906\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107114149180.png\",alt:\"image-20231107114132120\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107114319596.png\",alt:\"image-20231107114149180\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107114214232.png\",alt:\"image-20231107114214232\"}})]),t._v(\" \"),o(\"p\",[t._v(\"抖动颠簸现象\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107114341460.png\",alt:\"image-20231107114319596\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107114132120.png\",alt:\"image-20231107114341460\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107114422690.png\",alt:\"image-20231107114422690\"}})]),t._v(\" \"),o(\"h2\",{attrs:{id:\"内存空间的连续分配\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内存空间的连续分配\"}},[t._v(\"#\")]),t._v(\" 内存空间的连续分配\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107093750645.png\",alt:\"image-20231107093345212\"}})]),t._v(\" \"),o(\"p\",[t._v(\"连续分配：指为用户进程分配的必须是一个\"),o(\"strong\",[t._v(\"连续的内存空间\")])]),t._v(\" \"),o(\"h3\",{attrs:{id:\"单一连续分配\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#单一连续分配\"}},[t._v(\"#\")]),t._v(\" 单一连续分配\")]),t._v(\" \"),o(\"p\",[t._v(\"在单一连续分配方式中，\"),o(\"strong\",[t._v(\"内存被分为系统区和用户区\")]),t._v(\"。 系统区通常位于内存的低地址部分，用于存放操作系统相关数据；用户区用于存放用户进程相关数据。 内\"),o(\"strong\",[t._v(\"存中只能有一道用户程序，用户程序独占整个用户区空间\")])]),t._v(\" \"),o(\"p\",[t._v(\"优点：实现简单；无外部碎片；可以采用覆盖技术扩充 内存；不一定需要采取内存保护（eg：早期的 PC 操作 系统 MS-DOS）。\")]),t._v(\" \"),o(\"p\",[t._v(\"缺点：\"),o(\"strong\",[t._v(\"只能用于单用户、单任务的操作系统中\")]),t._v(\"；\"),o(\"strong\",[t._v(\"有内部碎片；存储器利用率极低。\")])]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107093345212.png\",alt:\"image-20231107093750645\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"固定分区\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#固定分区\"}},[t._v(\"#\")]),t._v(\" 固定分区\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107093815405.png\",alt:\"image-20231107093815405\"}})]),t._v(\" \"),o(\"p\",[t._v(\"操作系统需要建立一个数据结构——\"),o(\"strong\",[t._v(\"分区说明表，来实现各个分区的分配与回 收。每个表项对应一个分区\")]),t._v(\"，通常按分区大小排列。每个表项包括\"),o(\"strong\",[t._v(\"对应分区的大小、起始地址、状态（是否已分配）\")])]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107095242983.png\",alt:\"image-20231107093916999\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"动态分区分配\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#动态分区分配\"}},[t._v(\"#\")]),t._v(\" 动态分区分配\")]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"动态分区分配又称为可变分区分配。这种分配方式不会预先划分内存分区，而是在进程装入内存时， 根据进程的大小动态地建立分区\")]),t._v(\",并使分区的大小正好适合进程的需要。因此系统分区的大小和数 目是可变的。（eg：假设某计算机内存大小为 64MB，系统区 8MB，用户区共 56 MB…）\")]),t._v(\" \"),o(\"p\",[t._v(\"空闲分区表  空闲分区链来进行记录\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107094007927.png\",alt:\"image-20231107094007927\"}})]),t._v(\" \"),o(\"p\",[t._v(\"如何分配\")]),t._v(\" \"),o(\"p\",[t._v(\"动态分区分配算法\")]),t._v(\" \"),o(\"p\",[t._v(\"如何回收\")]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"两个相邻的空闲分区合并为一个\")])]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"然后在分区表做修改\")])]),t._v(\" \"),o(\"p\",[t._v(\"动态分区分配没有内部碎片，但是有外部碎片。\")]),t._v(\" \"),o(\"p\",[t._v(\"内部碎片，分配给某进程的内存区域中，如果\"),o(\"strong\",[t._v(\"有些部分没有用上\")]),t._v(\"。\")]),t._v(\" \"),o(\"p\",[t._v(\"外部碎片，是指内存中的\"),o(\"strong\",[t._v(\"某些空闲分区由于太小而难以利用\")]),t._v(\"。\")]),t._v(\" \"),o(\"p\",[t._v(\"如果内存中空闲空间的总和本来可以满足某进程的要求， 但由于进程需要的是一整块连续的内存空间，因此这些 “碎片”不能满足进程的需求。\")]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"可以通过紧凑（拼凑，Compaction）技术来解决外部碎片\")])]),t._v(\" \"),o(\"h2\",{attrs:{id:\"动态分区分配算法\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#动态分区分配算法\"}},[t._v(\"#\")]),t._v(\" 动态分区分配算法\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107093916999.png\",alt:\"image-20231107095242983\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"首次适应算法\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#首次适应算法\"}},[t._v(\"#\")]),t._v(\" 首次适应算法\")]),t._v(\" \"),o(\"p\",[t._v(\"法思想：\"),o(\"strong\",[t._v(\"每次都从低地址开始查找，找到第一个能满足大小的空闲分区。\")]),t._v(\" 如何实现：\"),o(\"strong\",[t._v(\"空闲分区以地址递增的次序排列\")]),t._v(\"。每次分配内存时顺序查找空闲分区链（或空闲分区 表），找到大小能满足要求的第一个空闲分区。\")]),t._v(\" \"),o(\"h3\",{attrs:{id:\"最佳适应算法\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#最佳适应算法\"}},[t._v(\"#\")]),t._v(\" 最佳适应算法\")]),t._v(\" \"),o(\"p\",[t._v(\"由于动态分区分配是一种连续分配方式，为各进程分配的空间必须是连续的一整片区 域。因此为了保证当“大进程”到来时能有连续的大片空间，\"),o(\"strong\",[t._v(\"可以尽可能多地留下大片的空闲区， 即，优先使用更小的空闲区。\")])]),t._v(\" \"),o(\"p\",[t._v(\"如何实现：\"),o(\"strong\",[t._v(\"空闲分区按容量递增次序链接\")]),t._v(\".每次分配内存时顺序查找空闲分区链（或空闲分区 表），\"),o(\"strong\",[t._v(\"找到大小能满足要求的第一个空闲分区\")])]),t._v(\" \"),o(\"p\",[t._v(\"缺点：每次都选最小的分区进行分配，会留下越来越多的、很小 的、难以利用的内存块。因此这种方法\"),o(\"strong\",[t._v(\"会产生很多的外部碎片。\")])]),t._v(\" \"),o(\"h3\",{attrs:{id:\"最坏适应算法\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#最坏适应算法\"}},[t._v(\"#\")]),t._v(\" 最坏适应算法\")]),t._v(\" \"),o(\"p\",[t._v(\"又称 最大适应算法（Largest Fit）\")]),t._v(\" \"),o(\"p\",[t._v(\"算法思想：为了解决最佳适应算法的问题——即留下太多难以利用的小碎片，可以在每次分配时 \"),o(\"strong\",[t._v(\"优先使用最大的连续空闲区\")]),t._v(\"，这样分配后剩余的空闲区就不会太小，更方便使用。\")]),t._v(\" \"),o(\"p\",[t._v(\"如何实现：\"),o(\"strong\",[t._v(\"空闲分区按容量递减次序链接\")]),t._v(\"。每次分配内存时顺序查找空闲分区链（或空闲分区 表），找到大小能满足要求的第一个空闲分区。\")]),t._v(\" \"),o(\"p\",[t._v(\"缺点：每次都选最大的分区进行分配，虽然可以让分配后留下的 空闲区更大，更可用，但是这种方式会导致较大的连续空闲区被 迅速用完。\"),o(\"strong\",[t._v(\"如果之后有“大进程”到达，就没有内存分区可用了\")])]),t._v(\" \"),o(\"h3\",{attrs:{id:\"邻近适应算法\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#邻近适应算法\"}},[t._v(\"#\")]),t._v(\" 邻近适应算法\")]),t._v(\" \"),o(\"p\",[t._v(\"首次适应算法\"),o(\"strong\",[t._v(\"每次都从链头开始查找的。这可能会导致低地址部分出现很多小的空闲分区，\"),o(\"strong\",[t._v(\"而每次\")]),t._v(\"分配查找时，都要经过这些分区，因此也增加了查找的开销\")]),t._v(\"。如果每次都\"),o(\"strong\",[t._v(\"从上次查 找结束的位置开始检索\")]),t._v(\"，就能解决上述问题。\")]),t._v(\" \"),o(\"p\",[t._v(\"如何实现：\"),o(\"strong\",[t._v(\"空闲分区以地址递增的顺序排列（可排成一个循环链表）\")]),t._v(\"。每次分配内存时\"),o(\"strong\",[t._v(\"从上次查 找结束的位置开始查找空闲分区链（或空闲分区表），找到大小能满足要求的第一个空闲分区\")])]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107100442067.png\",alt:\"image-20231107095716722\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107095729491.png\",alt:\"image-20231107095729491\"}})]),t._v(\" \"),o(\"h2\",{attrs:{id:\"内存空间的非连续分配\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内存空间的非连续分配\"}},[t._v(\"#\")]),t._v(\" 内存空间的非连续分配\")]),t._v(\" \"),o(\"p\",[t._v(\"之前上面讲的都是连续分配\")]),t._v(\" \"),o(\"p\",[t._v(\"连续分配需要知道起始地址以及长度就能进行逻辑地址和物理地址的转化\")]),t._v(\" \"),o(\"p\",[t._v(\"连续分配：为用户进程分配的必须是一个连续的内存空间。\")]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"非连续分配：为用户进程分配的可以是一些分散的内存空间。\")])]),t._v(\" \"),o(\"p\",[t._v(\"非连续分配逻辑地址和物理地址的转化就稍微复杂一点，这种映射关系就是重点\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107095716722.png\",alt:\"image-20231107100442067\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"分页存储\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分页存储\"}},[t._v(\"#\")]),t._v(\" 分页存储\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107103845449.png\",alt:\"image-20231107103810947\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107103810947.png\",alt:\"image-20231107103829607\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107103921105.png\",alt:\"image-20231107103845449\"}})]),t._v(\" \"),o(\"p\",[t._v(\"假设页表中的各页表项从内存地址为 X 的地方开始连续存放… 如何找到页号为 i 的页表项？ i 号页表项的存放地址 = X + 3*I 因此，页表中的页号可以是隐含的，即页号不占用存储空间\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107103829607.png\",alt:\"image-20231107103921105\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107103935822.png\",alt:\"image-20231107103935822\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107103957422.png\",alt:\"image-20231107103946958\"}})]),t._v(\" \"),o(\"p\",[t._v(\"逻辑地址结构  这个很重要！！！\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107104136336.png\",alt:\"image-20231107103957422\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"基本地址变化机构\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基本地址变化机构\"}},[t._v(\"#\")]),t._v(\" 基本地址变化机构\")]),t._v(\" \"),o(\"p\",[t._v(\"基本地址变换机构（用于\"),o(\"strong\",[t._v(\"实现逻辑地址到物理地址转换\")]),t._v(\"的\"),o(\"strong\",[t._v(\"一组硬件机构\")]),t._v(\"）的原理 和流程\")]),t._v(\" \"),o(\"p\",[t._v(\"基本地址变换机构可以\"),o(\"strong\",[t._v(\"借助进程的页表将逻辑地址转换为物理地址\")]),t._v(\"。 通常会在\"),o(\"strong\",[t._v(\"系统中设置一个页表寄存器（PTR），存放页表在内存中的起始地址F 和页表长度M。\")]),t._v(\" 进程未执行时，页表的始址 和 页表长度 放在进程控制块（PCB）中，当进程被调度时，操作系统内核会把它们放到页表寄存器中。\")]),t._v(\" \"),o(\"p\",[t._v(\"注意：页面大小是2的整数幂 设页面大小为L，逻辑地址A到物理地址E的变换过程如下\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107103946958.png\",alt:\"image-20231107104136336\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"快表\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#快表\"}},[t._v(\"#\")]),t._v(\" 快表\")]),t._v(\" \"),o(\"p\",[t._v(\"类比redis\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107104223334.png\",alt:\"image-20231107104223334\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107104232614.png\",alt:\"image-20231107104232614\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107104404908.png\",alt:\"image-20231107104251182\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"局部性原理\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#局部性原理\"}},[t._v(\"#\")]),t._v(\" 局部性原理\")]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"时间局部性：如果执行了程序中的某条指令，那么不久后这条指令很 有可能再次执行\")]),t._v(\"；如果某个数据被访问过，不久之后该数据很可能再 次被访问。（因为程序中存在大量的循环）\")]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"空间局部性：一旦程序访问了某个存储单元，在不久之后，其附近的 存储单元也很有可能被访问。\")]),t._v(\"（因为很多数据在内存中都是连续存放 的）\")]),t._v(\" \"),o(\"p\",[t._v(\"上小节介绍的基本地址变换机构中，每次要访问一个逻辑地址，都需 要查询内存中的页表。由于局部性原理，可能连续很多次查到的都是 同一个页表项\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107104437515.png\",alt:\"image-20231107104404908\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"两级页表\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#两级页表\"}},[t._v(\"#\")]),t._v(\" 两级页表\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107104513782.png\",alt:\"image-20231107104437515\"}})]),t._v(\" \"),o(\"p\",[t._v(\"根据局部性原理可知，很多时候，进程在一段时间内只需要访问某几个页面 就可以正常运行了。因此没有必要让整个页表都常驻内存\")]),t._v(\" \"),o(\"p\",[t._v(\"两级页表  多级页表 逻辑地址的形式改变\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107104251182.png\",alt:\"image-20231107104513782\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107104715234.png\",alt:\"image-20231107104527937\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107104527937.png\",alt:\"image-20231107104715234\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107104820892.png\",alt:\"image-20231107104727040\"}})]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"若分为两级页表后，页表依然很长，则可以采用更多级页表，一般来说各级页表的大小不能超过一个页面\")])]),t._v(\" \"),o(\"h3\",{attrs:{id:\"分段存储\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分段存储\"}},[t._v(\"#\")]),t._v(\" 分段存储\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107104727040.png\",alt:\"image-20231107104820892\"}})]),t._v(\" \"),o(\"p\",[o(\"strong\",[t._v(\"逻辑地址\")])]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107104918851.png\",alt:\"image-20231107104918851\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107110134154.png\",alt:\"image-20231107105031281\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107110241154.png\",alt:\"image-20231107110134154\"}})]),t._v(\" \"),o(\"p\",[t._v(\"段 逻辑单位\")]),t._v(\" \"),o(\"p\",[t._v(\"页 物理单位\")]),t._v(\" \"),o(\"p\",[t._v(\"段 使得代码更好的共享\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107105031281.png\",alt:\"image-20231107110214063\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107110214063.png\",alt:\"image-20231107110241154\"}})]),t._v(\" \"),o(\"h3\",{attrs:{id:\"段页式存储\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#段页式存储\"}},[t._v(\"#\")]),t._v(\" 段页式存储\")]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107111027418.png\",alt:\"image-20231107111027418\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107111119433.png\",alt:\"image-20231107111037756\"}})]),t._v(\" \"),o(\"p\",[o(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20231107111037756.png\",alt:\"image-20231107111119433\"}})])])}),[],!1,null,null,null);o.default=n.exports}}]);","extractedComments":[]}