{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{383:function(s,t,a){\"use strict\";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[t(\"h2\",{attrs:{id:\"异常\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异常\"}},[s._v(\"#\")]),s._v(\" 异常\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"Java 异常类层次结构图概览\")]),s._v(\"：\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/types-of-exceptions-in-java.png\",alt:\"Java 异常类层次结构图\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"exception-和-error-有什么区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#exception-和-error-有什么区别\"}},[s._v(\"#\")]),s._v(\" Exception 和 Error 有什么区别？\")]),s._v(\" \"),t(\"p\",[s._v(\"在 Java 中，所有的异常都有一个共同的祖先 \"),t(\"code\",[s._v(\"java.lang\")]),s._v(\" 包中的 \"),t(\"code\",[s._v(\"Throwable\")]),s._v(\" 类。\"),t(\"code\",[s._v(\"Throwable\")]),s._v(\" 类有两个重要的子类:\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[t(\"code\",[s._v(\"Exception\")])]),s._v(\" :程序本身可以处理的异常，可以通过 \"),t(\"code\",[s._v(\"catch\")]),s._v(\" 来进行捕获。\"),t(\"code\",[s._v(\"Exception\")]),s._v(\" 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[t(\"code\",[s._v(\"Error\")])]),s._v(\"：\"),t(\"code\",[s._v(\"Error\")]),s._v(\" 属于程序无法处理的错误 ，\"),t(\"s\",[s._v(\"我们没办法通过 \"),t(\"code\",[s._v(\"catch\")]),s._v(\" 来进行捕获\")]),s._v(\"不建议通过\"),t(\"code\",[s._v(\"catch\")]),s._v(\"捕获 。例如 Java 虚拟机运行错误（\"),t(\"code\",[s._v(\"Virtual MachineError\")]),s._v(\"）、虚拟机内存不够错误(\"),t(\"code\",[s._v(\"OutOfMemoryError\")]),s._v(\")、类定义错误（\"),t(\"code\",[s._v(\"NoClassDefFoundError\")]),s._v(\"）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"checked-exception-和-unchecked-exception-有什么区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#checked-exception-和-unchecked-exception-有什么区别\"}},[s._v(\"#\")]),s._v(\" Checked Exception 和 Unchecked Exception 有什么区别？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"Checked Exception\")]),s._v(\" 即 受检查异常 ，Java 代码在编译过程中，\"),t(\"strong\",[s._v(\"如果受检查异常没有被 \"),t(\"code\",[s._v(\"catch\")]),s._v(\"或者\"),t(\"code\",[s._v(\"throws\")]),s._v(\" 关键字处理的话，就没办法通过编译。\")])]),s._v(\" \"),t(\"p\",[s._v(\"比如下面这段 IO 操作的代码：\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/checked-exception.png\",alt:\"\"}})]),s._v(\" \"),t(\"p\",[s._v(\"除了\"),t(\"code\",[s._v(\"RuntimeException\")]),s._v(\"及其子类以外，其他的\"),t(\"code\",[s._v(\"Exception\")]),s._v(\"类及其子类都属于受检查异常 。常见的受检查异常有：IO 相关的异常、\"),t(\"code\",[s._v(\"ClassNotFoundException\")]),s._v(\"、\"),t(\"code\",[s._v(\"SQLException\")]),s._v(\"...。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"Unchecked Exception\")]),s._v(\" 即 \"),t(\"strong\",[s._v(\"不受检查异常\")]),s._v(\" ，Java 代码在编译过程中 ，\"),t(\"strong\",[s._v(\"我们即使不处理不受检查异常也可以正常通过编译。\")])]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"RuntimeException\")]),s._v(\" 及其子类都统称为非受检查异常，常见的有（建议记下来，日常开发中会经常用到）：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"NullPointerException\")]),s._v(\"(空指针错误)\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"IllegalArgumentException\")]),s._v(\"(参数错误比如方法入参类型错误)\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"NumberFormatException\")]),s._v(\"（字符串转换为数字格式错误，\"),t(\"code\",[s._v(\"IllegalArgumentException\")]),s._v(\"的子类）\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"ArrayIndexOutOfBoundsException\")]),s._v(\"（数组越界错误）\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"ClassCastException\")]),s._v(\"（类型转换错误）\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"ArithmeticException\")]),s._v(\"（算术错误）\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"SecurityException\")]),s._v(\" （安全错误比如权限不够）\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"UnsupportedOperationException\")]),s._v(\"(不支持的操作错误比如重复创建同一用户)\")]),s._v(\" \"),t(\"li\",[s._v(\"……\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/unchecked-exception.png\",alt:\"\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"throwable-类常用方法有哪些\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#throwable-类常用方法有哪些\"}},[s._v(\"#\")]),s._v(\" Throwable 类常用方法有哪些？\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"String getMessage()\")]),s._v(\": 返回异常发生时的简要描述\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"String toString()\")]),s._v(\": 返回异常发生时的详细信息\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"String getLocalizedMessage()\")]),s._v(\": 返回异常对象的本地化信息。使用 \"),t(\"code\",[s._v(\"Throwable\")]),s._v(\" 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 \"),t(\"code\",[s._v(\"getMessage()\")]),s._v(\"返回的结果相同\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"void printStackTrace()\")]),s._v(\": 在控制台上打印 \"),t(\"code\",[s._v(\"Throwable\")]),s._v(\" 对象封装的异常信息\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"try-catch-finally-如何使用\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#try-catch-finally-如何使用\"}},[s._v(\"#\")]),s._v(\" try-catch-finally 如何使用？\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"try\")]),s._v(\"块：用于捕获异常。\"),t(\"strong\",[s._v(\"其后可接零个或多个 \"),t(\"code\",[s._v(\"catch\")]),s._v(\" 块，如果没有 \"),t(\"code\",[s._v(\"catch\")]),s._v(\" 块，则必须跟一个 \"),t(\"code\",[s._v(\"finally\")]),s._v(\" 块。\")])]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"catch\")]),s._v(\"块：用于处理 try 捕获到的异常。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"finally\")]),s._v(\" 块：无论是否捕获或处理异常，\"),t(\"code\",[s._v(\"finally\")]),s._v(\" 块里的语句都会被执行。当在 \"),t(\"code\",[s._v(\"try\")]),s._v(\" 块或 \"),t(\"code\",[s._v(\"catch\")]),s._v(\" 块中遇到 \"),t(\"code\",[s._v(\"return\")]),s._v(\" 语句时，\"),t(\"code\",[s._v(\"finally\")]),s._v(\" 语句块将在方法返回之前被执行。\")])]),s._v(\" \"),t(\"p\",[s._v(\"代码示例：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"try\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"Try to do something\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"throw\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RuntimeException\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"RuntimeException\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"catch\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Exception\")]),s._v(\" e\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"Catch Exception -> \"')]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" e\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getMessage\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"finally\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"Finally\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\")])]),t(\"p\",[s._v(\"输出：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-plain line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-plain\"}},[t(\"code\",[s._v(\"Try to do something\\nCatch Exception -> RuntimeException\\nFinally\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\")])]),t(\"p\",[t(\"strong\",[s._v(\"注意：不要在 finally 语句块中使用 return!\")]),s._v(\" \"),t(\"strong\",[s._v(\"当 try 语句和 finally 语句中都有 return 语句时，try 语句块中的 return 语句会被忽略。这是因为 try 语句中的 return 返回值会先被暂存在一个本地变量中，\")])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"当执行到 finally 语句中的 return 之后，这个本地变量的值就变为了 finally 语句中的 return 返回值。\")])]),s._v(\" \"),t(\"p\",[t(\"a\",{attrs:{href:\"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.10.2.5\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"jvm 官方文档\"),t(\"OutboundLink\")],1),s._v(\"中有明确提到：\")]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[s._v(\"If the \"),t(\"code\",[s._v(\"try\")]),s._v(\" clause executes a \"),t(\"em\",[s._v(\"return\")]),s._v(\", the compiled code does the following:\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"Saves the return value (if any) in a local variable.\")]),s._v(\" \"),t(\"li\",[s._v(\"Executes a \"),t(\"em\",[s._v(\"jsr\")]),s._v(\" to the code for the \"),t(\"code\",[s._v(\"finally\")]),s._v(\" clause.\")]),s._v(\" \"),t(\"li\",[s._v(\"Upon return from the \"),t(\"code\",[s._v(\"finally\")]),s._v(\" clause, returns the value saved in the local variable.\")])])]),s._v(\" \"),t(\"p\",[s._v(\"代码示例：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"main\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" args\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"f\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"f\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" value\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"try\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" value \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\" value\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"finally\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"if\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"value \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\")])]),t(\"p\",[s._v(\"输出：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-plain line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-plain\"}},[t(\"code\",[s._v(\"0\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"h3\",{attrs:{id:\"finally-中的代码一定会执行吗\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#finally-中的代码一定会执行吗\"}},[s._v(\"#\")]),s._v(\" finally 中的代码一定会执行吗？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"不一定的\")]),s._v(\"！在某些情况下，finally 中的代码不会被执行。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"就比如说 finally 之前虚拟机被终止运行的话，finally 中的代码就不会被执行。\")])]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"try\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"Try to do something\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"throw\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RuntimeException\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"RuntimeException\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"catch\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Exception\")]),s._v(\" e\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"Catch Exception -> \"')]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" e\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getMessage\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 终止当前正在运行的Java虚拟机\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"exit\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"finally\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"Finally\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\")])]),t(\"p\",[s._v(\"输出：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-plain line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-plain\"}},[t(\"code\",[s._v(\"Try to do something\\nCatch Exception -> RuntimeException\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\")])]),t(\"p\",[t(\"strong\",[s._v(\"另外，在以下 2 种特殊情况下，\"),t(\"code\",[s._v(\"finally\")]),s._v(\" 块的代码也不会被执行：\")])]),s._v(\" \"),t(\"ol\",[t(\"li\",[t(\"strong\",[s._v(\"程序所在的线程死亡。\")])]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"关闭 CPU。\")])])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"如何使用-try-with-resources-代替try-catch-finally\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何使用-try-with-resources-代替try-catch-finally\"}},[s._v(\"#\")]),s._v(\" 如何使用 \"),t(\"code\",[s._v(\"try-with-resources\")]),s._v(\" 代替\"),t(\"code\",[s._v(\"try-catch-finally\")]),s._v(\"？\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[t(\"strong\",[s._v(\"适用范围（资源的定义）：\")]),s._v(\" 任何实现 \"),t(\"code\",[s._v(\"java.lang.AutoCloseable\")]),s._v(\"或者 \"),t(\"code\",[s._v(\"java.io.Closeable\")]),s._v(\" 的对象\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"关闭资源和 finally 块的执行顺序：\")]),s._v(\" 在 \"),t(\"code\",[s._v(\"try-with-resources\")]),s._v(\" 语句中，任何 catch 或 finally 块在声明的资源关闭后运行\")])]),s._v(\" \"),t(\"p\",[s._v(\"《Effective Java》中明确指出：\")]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[s._v(\"面对必须要关闭的资源，我们总是应该优先使用 \"),t(\"code\",[s._v(\"try-with-resources\")]),s._v(\" 而不是\"),t(\"code\",[s._v(\"try-finally\")]),s._v(\"。随之产生的代码更简短，更清晰，产生的异常对我们也更有用。\"),t(\"code\",[s._v(\"try-with-resources\")]),s._v(\"语句让我们更容易编写必须要关闭的资源的代码，若采用\"),t(\"code\",[s._v(\"try-finally\")]),s._v(\"则几乎做不到这点。\")])]),s._v(\" \"),t(\"p\",[s._v(\"Java 中类似于\"),t(\"code\",[s._v(\"InputStream\")]),s._v(\"、\"),t(\"code\",[s._v(\"OutputStream\")]),s._v(\"、\"),t(\"code\",[s._v(\"Scanner\")]),s._v(\"、\"),t(\"code\",[s._v(\"PrintWriter\")]),s._v(\"等的资源都需要我们调用\"),t(\"code\",[s._v(\"close()\")]),s._v(\"方法来手动关闭，一般情况下我们都是通过\"),t(\"code\",[s._v(\"try-catch-finally\")]),s._v(\"语句来实现这个需求，如下：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//读取文本文件的内容\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Scanner\")]),s._v(\" scanner \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"null\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"try\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    scanner \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Scanner\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"File\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"D://read.txt\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"while\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"scanner\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"hasNext\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"scanner\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"nextLine\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"catch\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"FileNotFoundException\")]),s._v(\" e\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    e\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"printStackTrace\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"finally\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"if\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"scanner \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"!=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"null\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        scanner\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"close\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),t(\"br\")])]),t(\"p\",[s._v(\"使用 Java 7 之后的 \"),t(\"code\",[s._v(\"try-with-resources\")]),s._v(\" 语句改造上面的代码:\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"try\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Scanner\")]),s._v(\" scanner \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Scanner\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"File\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"test.txt\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"while\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"scanner\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"hasNext\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"scanner\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"nextLine\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"catch\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"FileNotFoundException\")]),s._v(\" fnfe\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    fnfe\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"printStackTrace\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\")])]),t(\"p\",[s._v(\"当然多个资源需要关闭的时候，使用 \"),t(\"code\",[s._v(\"try-with-resources\")]),s._v(\" 实现起来也非常简单，如果你还是用\"),t(\"code\",[s._v(\"try-catch-finally\")]),s._v(\"可能会带来很多问题。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"通过使用分号分隔，可以在\"),t(\"code\",[s._v(\"try-with-resources\")]),s._v(\"块中声明多个资源。\")])]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"try\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"BufferedInputStream\")]),s._v(\" bin \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"BufferedInputStream\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"FileInputStream\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"File\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"test.txt\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n     \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"BufferedOutputStream\")]),s._v(\" bout \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"BufferedOutputStream\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"FileOutputStream\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"File\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"out.txt\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" b\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"while\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"b \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" bin\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"read\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"!=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        bout\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"write\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"b\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"catch\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"IOException\")]),s._v(\" e\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    e\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"printStackTrace\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\")])]),t(\"h3\",{attrs:{id:\"异常使用有哪些需要注意的地方\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异常使用有哪些需要注意的地方\"}},[s._v(\"#\")]),s._v(\" 异常使用有哪些需要注意的地方？\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"不要把异常定义为静态变量，因为这样会导致异常栈信息错乱。每次手动抛出异常，我们都需要手动 new 一个异常对象抛出。\")]),s._v(\" \"),t(\"li\",[s._v(\"抛出的异常信息一定要有意义。\")]),s._v(\" \"),t(\"li\",[s._v(\"建议抛出更加具体的异常比如字符串转换为数字格式错误的时候应该抛出\"),t(\"code\",[s._v(\"NumberFormatException\")]),s._v(\"而不是其父类\"),t(\"code\",[s._v(\"IllegalArgumentException\")]),s._v(\"。\")]),s._v(\" \"),t(\"li\",[s._v(\"使用日志打印异常之后就不要再抛出异常了（两者不要同时存在一段代码逻辑中）。\")]),s._v(\" \"),t(\"li\",[s._v(\"……\")])]),s._v(\" \"),t(\"h2\",{attrs:{id:\"泛型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#泛型\"}},[s._v(\"#\")]),s._v(\" 泛型\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"什么是泛型-有什么作用\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是泛型-有什么作用\"}},[s._v(\"#\")]),s._v(\" 什么是泛型？有什么作用？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"Java 泛型（Generics）\")]),s._v(\" 是 JDK 5 中引入的一个新特性。使用泛型参数，可以增强代码的可读性以及稳定性。\")]),s._v(\" \"),t(\"p\",[s._v(\"编译器可以对泛型参数进行检测，并且通过泛型参数可以指定传入的对象类型。比如 \"),t(\"code\",[s._v(\"ArrayList<Person> persons = new ArrayList<Person>()\")]),s._v(\" 这行代码就指明了该 \"),t(\"code\",[s._v(\"ArrayList\")]),s._v(\" 对象只能传入 \"),t(\"code\",[s._v(\"Person\")]),s._v(\" 对象，如果传入其他类型的对象就会报错。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ArrayList\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"E\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"extends\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"AbstractList\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"E\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[s._v(\"并且，原生 \"),t(\"code\",[s._v(\"List\")]),s._v(\" 返回类型是 \"),t(\"code\",[s._v(\"Object\")]),s._v(\" ，需要手动转换类型才能使用，使用泛型后编译器自动转换。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"泛型的使用方式有哪几种\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#泛型的使用方式有哪几种\"}},[s._v(\"#\")]),s._v(\" 泛型的使用方式有哪几种？\")]),s._v(\" \"),t(\"p\",[s._v(\"泛型一般有三种使用方式:\"),t(\"strong\",[s._v(\"泛型类\")]),s._v(\"、\"),t(\"strong\",[s._v(\"泛型接口\")]),s._v(\"、\"),t(\"strong\",[s._v(\"泛型方法\")]),s._v(\"。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"1.泛型类\")]),s._v(\"：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//在实例化泛型类时，必须指定T的具体类型\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Generic\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"T\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"T\")]),s._v(\" key\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Generic\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"T\")]),s._v(\" key\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"this\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"key \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" key\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"T\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getKey\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" key\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),t(\"br\")])]),t(\"p\",[s._v(\"如何实例化泛型类：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Generic\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Integer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" genericInteger \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Generic\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Integer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"123456\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[t(\"strong\",[s._v(\"2.泛型接口\")]),s._v(\"：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"interface\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Generator\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"T\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"T\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\")])]),t(\"p\",[t(\"strong\",[s._v(\"实现泛型接口，不指定类型：\")])]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"GeneratorImpl\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"T\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"implements\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Generator\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"T\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@Override\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"T\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"null\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\")])]),t(\"p\",[t(\"strong\",[s._v(\"实现泛型接口，指定类型：\")])]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"GeneratorImpl\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"T\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"implements\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Generator\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@Override\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"hello\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\")])]),t(\"p\",[t(\"strong\",[s._v(\"3.泛型方法\")]),s._v(\"：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"E\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"printArray\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"E\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" inputArray \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n   \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n         \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"for\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"E\")]),s._v(\" element \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\":\")]),s._v(\" inputArray \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"printf\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"%s \"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" element \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n         \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n         \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\")])]),t(\"p\",[s._v(\"使用：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 创建不同类型数组：Integer, Double 和 Character\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Integer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" intArray \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" stringArray \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"Hello\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"World\"')]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"printArray\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\" intArray  \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"printArray\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\" stringArray  \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\")])]),t(\"blockquote\",[t(\"p\",[s._v(\"注意: \"),t(\"code\",[s._v(\"public static < E > void printArray( E[] inputArray )\")]),s._v(\" 一般被称为\"),t(\"strong\",[s._v(\"静态泛型方法;在 java 中泛型只是一个占位符，必须在传递类型后才能使用\")]),s._v(\"。\"),t(\"strong\",[s._v(\"类在实例化时才能真正的传递类型参数，由于静态方法的加载先于类的实例化，也就是说类中的泛型还没有传递真正的类型参数，静态的方法的加载就已经完成了，所以静态泛型方法是没有办法使用类上声明的泛型的。只能使用自己声明的 \"),t(\"code\",[s._v(\"<E>\")])])])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"项目中哪里用到了泛型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#项目中哪里用到了泛型\"}},[s._v(\"#\")]),s._v(\" 项目中哪里用到了泛型？\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[s._v(\"自定义接口通用返回结果 \"),t(\"code\",[s._v(\"CommonResult<T>\")]),s._v(\" 通过参数 \"),t(\"code\",[s._v(\"T\")]),s._v(\" 可根据具体的返回类型动态指定结果的数据类型\")])]),s._v(\" \"),t(\"li\",[s._v(\"定义 \"),t(\"strong\",[t(\"code\",[s._v(\"Excel\")]),s._v(\" 处理类 \"),t(\"code\",[s._v(\"ExcelUtil<T>\")]),s._v(\" 用于动态指定 \"),t(\"code\",[s._v(\"Excel\")]),s._v(\" 导出的数据类型\")])]),s._v(\" \"),t(\"li\",[s._v(\"构建集合工具类（参考 \"),t(\"code\",[s._v(\"Collections\")]),s._v(\" 中的 \"),t(\"code\",[s._v(\"sort\")]),s._v(\", \"),t(\"code\",[s._v(\"binarySearch\")]),s._v(\" 方法）。\")]),s._v(\" \"),t(\"li\",[s._v(\"……\")])]),s._v(\" \"),t(\"h2\",{attrs:{id:\"反射\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#反射\"}},[s._v(\"#\")]),s._v(\" 反射\")]),s._v(\" \"),t(\"p\",[s._v(\"// TODO\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"何谓反射\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#何谓反射\"}},[s._v(\"#\")]),s._v(\" 何谓反射？\")]),s._v(\" \"),t(\"p\",[s._v(\"如果说大家研究过框架的底层原理或者咱们自己写过框架的话，一定对反射这个概念不陌生。反射之所以被称为框架的灵魂，主要是因为它赋予了我们在运行时分析类以及执行类中方法的能力。通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"反射的优缺点\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#反射的优缺点\"}},[s._v(\"#\")]),s._v(\" 反射的优缺点？\")]),s._v(\" \"),t(\"p\",[s._v(\"反射可以让我们的代码更加灵活、为各种框架提供开箱即用的功能提供了便利。\")]),s._v(\" \"),t(\"p\",[s._v(\"不过，反射让我们在运行时有了分析操作类的能力的同时，也增加了安全问题，比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点，不过，对于框架来说实际是影响不大的。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"反射的应用场景\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#反射的应用场景\"}},[s._v(\"#\")]),s._v(\" 反射的应用场景？\")]),s._v(\" \"),t(\"p\",[s._v(\"像咱们平时大部分时候都是在写业务代码，很少会接触到直接使用反射机制的场景。但是！这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"这些框架中也大量使用了动态代理，而动态代理的实现也依赖反射。\")])]),s._v(\" \"),t(\"p\",[s._v(\"比如下面是通过 JDK 实现动态代理的示例代码，其中就使用了反射类 \"),t(\"code\",[s._v(\"Method\")]),s._v(\" 来调用指定的方法。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"DebugInvocationHandler\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"implements\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"InvocationHandler\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/**\\n     * 代理类中的真实对象\\n     */\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"final\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Object\")]),s._v(\" target\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"DebugInvocationHandler\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Object\")]),s._v(\" target\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"this\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"target \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" target\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Object\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"invoke\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Object\")]),s._v(\" proxy\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Method\")]),s._v(\" method\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Object\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" args\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"throws\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"InvocationTargetException\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"IllegalAccessException\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"before method \"')]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" method\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getName\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Object\")]),s._v(\" result \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" method\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"invoke\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"target\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" args\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"after method \"')]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" method\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"getName\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" result\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),t(\"br\")])]),t(\"p\",[s._v(\"另外，像 Java 中的一大利器 \"),t(\"strong\",[s._v(\"注解\")]),s._v(\" 的实现也用到了反射。\")]),s._v(\" \"),t(\"p\",[s._v(\"为什么你使用 Spring 的时候 ，一个\"),t(\"code\",[s._v(\"@Component\")]),s._v(\"注解就声明了一个类为 Spring Bean 呢？为什么你通过一个 \"),t(\"code\",[s._v(\"@Value\")]),s._v(\"注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？\")]),s._v(\" \"),t(\"p\",[s._v(\"这些都是因为你可以基于反射分析类，然后获取到类/属性/方法/方法的参数上的注解。你获取到注解之后，就可以做进一步的处理。\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"注解\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#注解\"}},[s._v(\"#\")]),s._v(\" 注解\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"何谓注解\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#何谓注解\"}},[s._v(\"#\")]),s._v(\" 何谓注解？\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"Annotation\")]),s._v(\" （注解） 是 Java5 开始引入的新特性，可以看作是一种特殊的注释，主要用于修饰类、方法或者变量，提供某些信息供程序在编译或者运行时使用。\")]),s._v(\" \"),t(\"p\",[s._v(\"注解本质是一个继承了\"),t(\"code\",[s._v(\"Annotation\")]),s._v(\" 的特殊接口：\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@Target\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ElementType\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"METHOD\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@Retention\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RetentionPolicy\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[s._v(\"SOURCE\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@interface\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Override\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"interface\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Override\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"extends\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Annotation\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\")])]),t(\"p\",[s._v(\"JDK 提供了很多内置的注解（比如 \"),t(\"code\",[s._v(\"@Override\")]),s._v(\"、\"),t(\"code\",[s._v(\"@Deprecated\")]),s._v(\"），同时，我们还可以自定义注解。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"注解的解析方法有哪几种\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#注解的解析方法有哪几种\"}},[s._v(\"#\")]),s._v(\" 注解的解析方法有哪几种？\")]),s._v(\" \"),t(\"p\",[s._v(\"注解只有被解析之后才会生效，常见的解析方法有两种：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[s._v(\"编译期直接扫描\")]),s._v(\"：编译器在编译 Java 代码的时候扫描对应的注解并处理，比如某个方法使用\"),t(\"code\",[s._v(\"@Override\")]),s._v(\" 注解，编译器在编译的时候就会检测当前的方法是否重写了父类对应的方法。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"运行期通过反射处理\")]),s._v(\"：像框架中自带的注解(比如 Spring 框架的 \"),t(\"code\",[s._v(\"@Value\")]),s._v(\"、\"),t(\"code\",[s._v(\"@Component\")]),s._v(\")都是通过反射来进行处理的。\")])]),s._v(\" \"),t(\"h2\",{attrs:{id:\"spi\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#spi\"}},[s._v(\"#\")]),s._v(\" SPI\")]),s._v(\" \"),t(\"p\",[s._v(\"关于 SPI 的详细解读，请看这篇文章 \"),t(\"RouterLink\",{attrs:{to:\"/java/10.javaSE/spi.html\"}},[s._v(\"Java SPI 机制详解\")]),s._v(\" 。\")],1),s._v(\" \"),t(\"h3\",{attrs:{id:\"何谓-spi\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#何谓-spi\"}},[s._v(\"#\")]),s._v(\" 何谓 SPI?\")]),s._v(\" \"),t(\"p\",[s._v(\"SPI 即 \"),t(\"strong\",[s._v(\"Service Provider Interface\")]),s._v(\" ，字面意思就是：\"),t(\"strong\",[s._v(\"“服务提供者的接口”\")]),s._v(\"，我的理解是：专门提供给服务提供者或者扩展框架功能的开发者去使用的一个接口。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"SPI 将服务接口和具体的服务实现分离开来，将服务调用方和服务实现者解耦\")]),s._v(\"，能够提升程序的扩展性、可维护性。修改或者替换服务实现并不需要修改调用方。\")]),s._v(\" \"),t(\"p\",[s._v(\"很多框架都使用了 Java 的 SPI 机制，比如：Spring 框架、数据库加载驱动、日志接口、以及 Dubbo 的扩展实现等等。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/22e1830e0b0e4115a882751f6c417857tplv-k3u1fbpfcp-zoom-1.jpeg\",alt:\"\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"spi-和-api-有什么区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#spi-和-api-有什么区别\"}},[s._v(\"#\")]),s._v(\" SPI 和 API 有什么区别？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"那 SPI 和 API 有啥区别？\")])]),s._v(\" \"),t(\"p\",[s._v(\"说到 SPI 就不得不说一下 API 了，从广义上来说它们都属于接口，而且很容易混淆。下面先用一张图说明一下：\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/1ebd1df862c34880bc26b9d494535b3dtplv-k3u1fbpfcp-watermark.png\",alt:\"\"}})]),s._v(\" \"),t(\"p\",[s._v(\"一般模块之间都是通过接口进行通讯，那我们在服务调用方和服务实现方（也称服务提供者）之间引入一个“接口”。\")]),s._v(\" \"),t(\"p\",[s._v(\"当实现方提供了接口和实现，我们可以通过调用实现方的接口从而拥有实现方给我们提供的能力，这就是 API ，\"),t(\"strong\",[s._v(\"这种接口和实现都是放在实现方的。\")])]),s._v(\" \"),t(\"p\",[s._v(\"当接口存在于调用方这边时，就是 SPI ，\"),t(\"strong\",[s._v(\"由接口调用方确定接口规则，然后由不同的厂商去根据这个规则对这个接口进行实现，从而提供服务。\")])]),s._v(\" \"),t(\"p\",[s._v(\"举个通俗易懂的例子：公司 H 是一家科技公司，新设计了一款芯片，然后现在需要量产了，而市面上有好几家芯片制造业公司，这个时候，\"),t(\"strong\",[s._v(\"只要 H 公司指定好了这芯片生产的标准（定义好了接口标准），那么这些合作的芯片公司（服务提供者）就按照标准交付自家特色的芯片（提供不同方案的实现，但是给出来的结果是一样的）。\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"spi-的优缺点\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#spi-的优缺点\"}},[s._v(\"#\")]),s._v(\" SPI 的优缺点？\")]),s._v(\" \"),t(\"p\",[s._v(\"通过 SPI 机制能够大大地提高接口设计的灵活性，但是 SPI 机制也存在一些缺点，比如：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"需要遍历加载所有的实现类，不能做到按需加载，这样效率还是相对较低的。\")]),s._v(\" \"),t(\"li\",[s._v(\"当多个 \"),t(\"code\",[s._v(\"ServiceLoader\")]),s._v(\" 同时 \"),t(\"code\",[s._v(\"load\")]),s._v(\" 时，会有并发问题。\")])]),s._v(\" \"),t(\"h2\",{attrs:{id:\"序列化和反序列化\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#序列化和反序列化\"}},[s._v(\"#\")]),s._v(\" 序列化和反序列化\")]),s._v(\" \"),t(\"p\",[s._v(\"关于序列化和反序列化的详细解读，请看这篇文章 \"),t(\"RouterLink\",{attrs:{to:\"/java/10.javaSE/serialization.html\"}},[s._v(\"Java 序列化详解\")]),s._v(\" ，里面涉及到的知识点和面试题更全面。\")],1),s._v(\" \"),t(\"h3\",{attrs:{id:\"什么是序列化-什么是反序列化\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是序列化-什么是反序列化\"}},[s._v(\"#\")]),s._v(\" 什么是序列化?什么是反序列化?\")]),s._v(\" \"),t(\"p\",[s._v(\"如果我们需要持久化 Java 对象比如将 Java 对象保存在文件中，或者在网络传输 Java 对象，这些场景都需要用到序列化。\")]),s._v(\" \"),t(\"p\",[s._v(\"简单来说：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[s._v(\"序列化\")]),s._v(\"：将数据结构或\"),t(\"strong\",[s._v(\"对象转换成二进制字节流的过程\")])]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"反序列化\")]),s._v(\"：将在序列化过程中所生成的\"),t(\"strong\",[s._v(\"二进制字节流转换成数据结构或者对象的过程\")])])]),s._v(\" \"),t(\"p\",[s._v(\"对于 Java 这种面向对象编程语言来说，我们序列化的都是对象（Object）也就是实例化后的类(Class)，但是在 C++这种半面向对象的语言中，struct(结构体)定义的是数据结构类型，而 class 对应的是对象类型。\")]),s._v(\" \"),t(\"p\",[s._v(\"下面是序列化和反序列化常见应用场景：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"对象在进行网络传输**（比如远程方法调用 RPC 的时候）之前需要先被序列化，接收到序列化的对象之后需要再进行反序列化；**\")]),s._v(\" \"),t(\"li\",[s._v(\"将对象存储到文件之前需要进行序列化，将对象从文件中读取出来需要进行反序列化；\")]),s._v(\" \"),t(\"li\",[s._v(\"将对象存储到数据库（如 Redis）之前需要用到序列化，将对象从缓存数据库中读取出来需要反序列化；\")]),s._v(\" \"),t(\"li\",[s._v(\"将对象存储到内存之前需要进行序列化，从内存中读取出来之后需要进行反序列化。\")])]),s._v(\" \"),t(\"p\",[s._v(\"维基百科是如是介绍序列化的：\")]),s._v(\" \"),t(\"blockquote\",[t(\"p\",[t(\"strong\",[s._v(\"序列化\")]),s._v(\"（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。依照序列化格式重新获取字节的结果时，可以利用它来产生与原始对象相同语义的副本。对于许多对象，像是使用大量引用的复杂对象，这种序列化重建的过程并不容易。面向对象中的对象序列化，并不概括之前原始对象所关系的函数。这种过程也称为对象编组（marshalling）。从一系列字节提取数据结构的反向操作，是反序列化（也称为解编组、deserialization、unmarshalling）。\")])]),s._v(\" \"),t(\"p\",[s._v(\"综上：\"),t(\"strong\",[s._v(\"序列化的主要目的是通过网络传输对象或者说是将对象存储到文件系统、数据库、内存中。\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/a478c74d-2c48-40ae-9374-87aacf05188c.png\",alt:\"\"}})]),s._v(\" \"),t(\"p\",{staticStyle:{\"text-align\":\"right\",\"font-size\":\"13px\",color:\"gray\"}},[s._v(\"https://www.corejavaguru.com/java/serialization/interview-questions-1\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"序列化协议对应于 TCP/IP 4 层模型的哪一层？\")])]),s._v(\" \"),t(\"p\",[s._v(\"我们知道网络通信的双方必须要采用和遵守相同的协议。TCP/IP 四层模型是下面这样的，序列化协议属于哪一层呢？\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"应用层\")]),s._v(\" \"),t(\"li\",[s._v(\"传输层\")]),s._v(\" \"),t(\"li\",[s._v(\"网络层\")]),s._v(\" \"),t(\"li\",[s._v(\"网络接口层\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/tcp-ip-4-model.png\",alt:\"TCP/IP 四层模型\"}})]),s._v(\" \"),t(\"p\",[s._v(\"如上图所示，OSI 七层协议模型中，表示层做的事情主要就是对应用层的用户数据进行处理转换为二进制流。反过来的话，就是将二进制流转换成应用层的用户数据。这不就对应的是序列化和反序列化么？\")]),s._v(\" \"),t(\"p\",[s._v(\"因为，OSI 七层协议模型中的应用层、表示层和会话层对应的都是 TCP/IP 四层模型中的应用层，\"),t(\"strong\",[s._v(\"所以序列化协议属于 TCP/IP 协议应用层的一部分。\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"如果有些字段不想进行序列化怎么办\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如果有些字段不想进行序列化怎么办\"}},[s._v(\"#\")]),s._v(\" 如果有些字段不想进行序列化怎么办？\")]),s._v(\" \"),t(\"p\",[s._v(\"对于不想进行序列化的变量，使用 \"),t(\"code\",[s._v(\"transient\")]),s._v(\" 关键字修饰。\")]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"transient\")]),s._v(\" 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 \"),t(\"code\",[s._v(\"transient\")]),s._v(\" 修饰的变量值不会被持久化和恢复。\")]),s._v(\" \"),t(\"p\",[s._v(\"关于 \"),t(\"code\",[s._v(\"transient\")]),s._v(\" 还有几点注意：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"transient\")]),s._v(\" 只能修饰变量，不能修饰类和方法。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"transient\")]),s._v(\" 修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰 \"),t(\"code\",[s._v(\"int\")]),s._v(\" 类型，那么反序列后结果就是 \"),t(\"code\",[s._v(\"0\")]),s._v(\"。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"static\")]),s._v(\" 变量因为不属于任何对象(Object)，所以无论有没有 \"),t(\"code\",[s._v(\"transient\")]),s._v(\" 关键字修饰，均不会被序列化。\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"常见序列化协议有哪些\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常见序列化协议有哪些\"}},[s._v(\"#\")]),s._v(\" 常见序列化协议有哪些？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"JDK 自带的序列化方式一般不会用 ，因为序列化效率低并且存在安全问题\")]),s._v(\"。比较常用的序列化协议有 \"),t(\"strong\",[s._v(\"Hessian、Kryo、Protobuf、ProtoStuff，这些都是基于二进制的序列化协议。\")])]),s._v(\" \"),t(\"p\",[s._v(\"像 JSON 和 XML 这种属于文本类序列化方式。虽然可读性比较好，但是性能较差，一般不会选择。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"为什么不推荐使用-jdk-自带的序列化\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么不推荐使用-jdk-自带的序列化\"}},[s._v(\"#\")]),s._v(\" 为什么不推荐使用 JDK 自带的序列化？\")]),s._v(\" \"),t(\"p\",[s._v(\"我们很少或者说几乎不会直接使用 JDK 自带的序列化方式，主要原因有下面这些原因：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[s._v(\"不支持跨语言调用\")]),s._v(\" : 如果调用的是其他语言开发的服务的时候就不支持了。\")]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"性能差\")]),s._v(\"：相比于其他序列化框架性能更低，\"),t(\"strong\",[s._v(\"主要原因是序列化之后的字节数组体积较大，导致传输成本加大。\")])]),s._v(\" \"),t(\"li\",[t(\"strong\",[s._v(\"存在安全问题\")]),s._v(\"：序列化和反序列化本身并不存在问题。但当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的任意代码。相关阅读：\"),t(\"a\",{attrs:{href:\"https://cryin.github.io/blog/secure-development-java-deserialization-vulnerability/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"应用安全：JAVA 反序列化漏洞之殇\"),t(\"OutboundLink\")],1),s._v(\" 。\")])]),s._v(\" \"),t(\"h2\",{attrs:{id:\"i-o\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#i-o\"}},[s._v(\"#\")]),s._v(\" I/O\")]),s._v(\" \"),t(\"p\",[s._v(\"关于 I/O 的详细解读，请看下面这几篇文章，里面涉及到的知识点和面试题更全面。\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"RouterLink\",{attrs:{to:\"/java/io/io-basis.html\"}},[s._v(\"Java IO 基础知识总结\")])],1),s._v(\" \"),t(\"li\",[t(\"RouterLink\",{attrs:{to:\"/java/io/io-design-patterns.html\"}},[s._v(\"Java IO 设计模式总结\")])],1),s._v(\" \"),t(\"li\",[t(\"RouterLink\",{attrs:{to:\"/java/io/io-model.html\"}},[s._v(\"Java IO 模型详解\")])],1)]),s._v(\" \"),t(\"h3\",{attrs:{id:\"java-io-流了解吗\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java-io-流了解吗\"}},[s._v(\"#\")]),s._v(\" Java IO 流了解吗？\")]),s._v(\" \"),t(\"p\",[s._v(\"IO 即 \"),t(\"code\",[s._v(\"Input/Output\")]),s._v(\"，输入和输出。数据输入到计算机内存的过程即输入，反之输出到外部存储（比如数据库，文件，远程主机）的过程即输出。数据传输过程类似于水流，因此称为 IO 流。IO 流在 Java 中分为输入流和输出流，而根据数据的处理方式又分为字节流和字符流。\")]),s._v(\" \"),t(\"p\",[s._v(\"Java IO 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[s._v(\"InputStream\")]),s._v(\"/\"),t(\"code\",[s._v(\"Reader\")]),s._v(\": 所有的输入流的基类，前者是字节输入流，后者是字符输入流。\")]),s._v(\" \"),t(\"li\",[t(\"code\",[s._v(\"OutputStream\")]),s._v(\"/\"),t(\"code\",[s._v(\"Writer\")]),s._v(\": 所有输出流的基类，前者是字节输出流，后者是字符输出流。\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"i-o-流为什么要分为字节流和字符流呢\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#i-o-流为什么要分为字节流和字符流呢\"}},[s._v(\"#\")]),s._v(\" I/O 流为什么要分为字节流和字符流呢?\")]),s._v(\" \"),t(\"p\",[s._v(\"问题本质想问：\"),t(\"strong\",[s._v(\"不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？\")])]),s._v(\" \"),t(\"p\",[s._v(\"个人认为主要有两点原因：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"字符流是由 Java 虚拟机将字节转换得到的，这个过程还算是比较耗时；\")]),s._v(\" \"),t(\"li\",[s._v(\"如果我们不知道编码类型的话，使用字节流的过程中很容易出现乱码问题。\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"java-io-中的设计模式有哪些\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java-io-中的设计模式有哪些\"}},[s._v(\"#\")]),s._v(\" Java IO 中的设计模式有哪些？\")]),s._v(\" \"),t(\"p\",[s._v(\"参考答案：\"),t(\"RouterLink\",{attrs:{to:\"/java/io/io-design-patterns.html\"}},[s._v(\"Java IO 设计模式总结\")])],1),s._v(\" \"),t(\"h3\",{attrs:{id:\"bio、nio-和-aio-的区别\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#bio、nio-和-aio-的区别\"}},[s._v(\"#\")]),s._v(\" BIO、NIO 和 AIO 的区别？\")]),s._v(\" \"),t(\"p\",[s._v(\"参考答案：\"),t(\"RouterLink\",{attrs:{to:\"/java/io/io-model.html\"}},[s._v(\"Java IO 模型详解\")])],1),s._v(\" \"),t(\"h2\",{attrs:{id:\"语法糖\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#语法糖\"}},[s._v(\"#\")]),s._v(\" 语法糖\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"什么是语法糖\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是语法糖\"}},[s._v(\"#\")]),s._v(\" 什么是语法糖？\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"语法糖（Syntactic sugar）\")]),s._v(\" 代指的是编程语言为了方便程序员开发程序而设计的一种特殊语法，这种语法对编程语言的功能并没有影响。\"),t(\"strong\",[s._v(\"实现相同的功能，基于语法糖写出来的代码往往更简单简洁且更易阅读。\")])]),s._v(\" \"),t(\"p\",[s._v(\"举个例子，J\"),t(\"strong\",[s._v(\"ava 中的 \"),t(\"code\",[s._v(\"for-each\")]),s._v(\" 就是一个常用的语法糖，其原理其实就是基于普通的 for 循环和迭代器。\")])]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" strs \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"JavaGuide\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"公众号：JavaGuide\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"博客：https://javaguide.cn/\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"for\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),s._v(\" s \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\":\")]),s._v(\" strs\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n  \\t\"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"s\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\")])]),t(\"p\",[s._v(\"不过，JVM 其实并不能识别语法糖，Java 语法糖要想被正确执行，\"),t(\"strong\",[s._v(\"需要先通过编译器进行解糖，也就是在程序编译阶段将其转换成 JVM 认识的基本语法。这也侧面说明，Java 中真正支持语法糖的是 Java 编译器而不是 JVM\")]),s._v(\"。如果你去看\"),t(\"code\",[s._v(\"com.sun.tools.javac.main.JavaCompiler\")]),s._v(\"的源码，你会发现在\"),t(\"code\",[s._v(\"compile()\")]),s._v(\"中有一个步骤就是调用\"),t(\"code\",[s._v(\"desugar()\")]),s._v(\"，这个方法就是负责解语法糖的实现的。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"java-中有哪些常见的语法糖\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java-中有哪些常见的语法糖\"}},[s._v(\"#\")]),s._v(\" Java 中有哪些常见的语法糖？\")]),s._v(\" \"),t(\"p\",[s._v(\"Java 中最常用的语法糖主要有泛型、自动拆装箱、变长参数、枚举、内部类、增强 for 循环、try-with-resources 语法、lambda 表达式等。\")]),s._v(\" \"),t(\"p\",[s._v(\"关于这些语法糖的详细解读，请看这篇文章 \"),t(\"RouterLink\",{attrs:{to:\"/java/10.javaSE/syntactic-sugar.html\"}},[s._v(\"Java 语法糖详解\")]),s._v(\" 。\")],1)])}),[],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}