{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{378:function(v,_,e){\"use strict\";e.r(_);var o=e(4),r=Object(o.a)({},(function(){var v=this,_=v._self._c;return _(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":v.$parent.slotKey}},[_(\"h1\",{attrs:{id:\"zookeeper\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#zookeeper\"}},[v._v(\"#\")]),v._v(\" Zookeeper\")]),v._v(\" \"),_(\"p\",[v._v(\"不止注册中心\")]),v._v(\" \"),_(\"p\",[v._v(\"Zookeeper 是 Apache Hadoop 项目下的一个子项目，是一个\"),_(\"strong\",[v._v(\"树形目录服务\")]),v._v(\"。\")]),v._v(\" \"),_(\"p\",[v._v(\"Zookeeper 是一个分布式的、开源的\"),_(\"strong\",[v._v(\"分布式应用程序的协调服务\")])]),v._v(\" \"),_(\"p\",[v._v(\"Zookeeper 提供的主要功能包括：\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[v._v(\"配置管理\")]),v._v(\" \"),_(\"li\",[v._v(\"分布式锁\")]),v._v(\" \"),_(\"li\",[v._v(\"集群管理\")])]),v._v(\" \"),_(\"h2\",{attrs:{id:\"数据模型\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据模型\"}},[v._v(\"#\")]),v._v(\" 数据模型\")]),v._v(\" \"),_(\"p\",[v._v(\"ZooKeeper 是一个树形目录服务,其数据模型和Unix的文件系统目录树很类似，拥有一个层次化结构。\")]),v._v(\" \"),_(\"p\",[v._v(\"这里面的每一个节点都被称为： ZNode，每个节点上都会保存自己的数据和节点信息。\")]),v._v(\" \"),_(\"p\",[v._v(\"节点可以拥有子节点，同时\"),_(\"strong\",[v._v(\"也允许少量（1MB）数据存储在该节点\")]),v._v(\"之下。\")]),v._v(\" \"),_(\"p\",[v._v(\"节点可以分为四大类：\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[v._v(\"PERSISTENT 持久化节点\")]),v._v(\" \"),_(\"li\",[v._v(\"EPHEMERAL 临时节点 ：-e\")]),v._v(\" \"),_(\"li\",[v._v(\"PERSISTENT_SEQUENTIAL 持久化顺序节点 ：-s\")]),v._v(\" \"),_(\"li\",[v._v(\"EPHEMERAL_SEQUENTIAL 临时顺序节点 ：-es\")])]),v._v(\" \"),_(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/Zookeeper01.png\"}}),v._v(\" \"),_(\"h2\",{attrs:{id:\"服务端命令\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#服务端命令\"}},[v._v(\"#\")]),v._v(\" 服务端命令\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[v._v(\"启动 ZooKeeper 服务: ./zkServer.sh start\")]),v._v(\" \"),_(\"li\",[v._v(\"查看 ZooKeeper 服务状态: ./zkServer.sh status\")]),v._v(\" \"),_(\"li\",[v._v(\"停止 ZooKeeper 服务: ./zkServer.sh stop\")]),v._v(\" \"),_(\"li\",[v._v(\"重启 ZooKeeper 服务: ./zkServer.sh restart\")])]),v._v(\" \"),_(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/Zookeeper02.png\"}}),v._v(\" \"),_(\"h2\",{attrs:{id:\"客户端命令\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#客户端命令\"}},[v._v(\"#\")]),v._v(\" 客户端命令\")]),v._v(\" \"),_(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/Zookeeper03.png\"}}),v._v(\" \"),_(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/Zookeeper04.png\"}}),v._v(\" \"),_(\"p\",[v._v(\"一些节点的创建同Linux类似\")]),v._v(\" \"),_(\"h2\",{attrs:{id:\"java-api\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java-api\"}},[v._v(\"#\")]),v._v(\" Java API\")]),v._v(\" \"),_(\"p\",[v._v(\"Curator 是 Apache ZooKeeper 的Java客户端库。\")]),v._v(\" \"),_(\"p\",[v._v(\"官网：http://curator.apache.org/\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[v._v(\"对节点 增删改查，用到去看文档即可\")])]),v._v(\" \"),_(\"h3\",{attrs:{id:\"watch事件监听\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#watch事件监听\"}},[v._v(\"#\")]),v._v(\" Watch事件监听\")]),v._v(\" \"),_(\"p\",[v._v(\"ZooKeeper 允许用户在指定节点上注册一些Watcher，并且在\"),_(\"strong\",[v._v(\"一些特定事件触发的时候\")]),v._v(\"，ZooKeeper 服务端会将事件通知到感兴趣的客户端上去，该机制是 ZooKeeper 实现分布式协调服务的重要特性。\")]),v._v(\" \"),_(\"p\",[v._v(\"ZooKeeper 中引入了Watcher机制来实现了\"),_(\"strong\",[v._v(\"发布/订阅功能\")]),v._v(\"，能够让多个订阅者同时监听某一个对象**，当一个对象自身状态变化时，会通知所有订阅者。**\")]),v._v(\" \"),_(\"p\",[v._v(\"ZooKeeper 原生支持通过注册Watcher来进行事件监听，但是其使用并不是特别方便\")]),v._v(\" \"),_(\"p\",[v._v(\"需要开发人员自己反复注册Watcher，比较繁琐。\")]),v._v(\" \"),_(\"p\",[v._v(\"Curator引入了 \"),_(\"strong\",[v._v(\"Cache\")]),v._v(\" 来实现对 ZooKeeper 服务端事件的监听。\")]),v._v(\" \"),_(\"p\",[v._v(\"ZooKeeper提供了三种Watcher：\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[v._v(\"NodeCache : 只是监听某一个特定的节点\")]),v._v(\" \"),_(\"li\",[v._v(\"PathChildrenCache : 监控一个ZNode的子节点.\")]),v._v(\" \"),_(\"li\",[v._v(\"TreeCache : 可以监控整个树上的所有节点，类似于PathChildrenCache和NodeCache的组合\")])]),v._v(\" \"),_(\"h2\",{attrs:{id:\"分布式锁\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分布式锁\"}},[v._v(\"#\")]),v._v(\" 分布式锁\")]),v._v(\" \"),_(\"p\",[v._v(\"之前的事件监听为此做出铺垫\")]),v._v(\" \"),_(\"p\",[v._v(\"在我们进行单机应用开发，涉及并发同步的时候，我们往往采用\"),_(\"strong\",[v._v(\"synchronized\")]),v._v(\"或者\"),_(\"strong\",[v._v(\"Lock\")]),v._v(\"的方式来解决多线程间的代码同步问题，这时多线程的运行都是在\"),_(\"strong\",[v._v(\"同一个JVM之下\")]),v._v(\"，没有任何问题。\")]),v._v(\" \"),_(\"p\",[v._v(\"但当我们的应用是分布式集群工作的情况下，\"),_(\"strong\",[v._v(\"属于多JVM下的工作环境\")]),v._v(\"，\"),_(\"strong\",[v._v(\"跨JVM之间已经无法通过多线程的锁解决同步问题。\")])]),v._v(\" \"),_(\"p\",[v._v(\"那么就需要一种\"),_(\"strong\",[v._v(\"更加高级的锁机制\")]),v._v(\"，来处理种跨机器的进程之间的\"),_(\"strong\",[v._v(\"数据同步问题——这就是分布式锁。\")])]),v._v(\" \"),_(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/Zookeeper05.png\"}}),v._v(\" \"),_(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/Zookeeper06.png\"}}),v._v(\" \"),_(\"p\",[v._v(\"分布式锁的实现原理：\")]),v._v(\" \"),_(\"p\",[v._v(\"核心思想：当客户端要获取锁，则创建节点，使用完锁，则删除该节点。\")]),v._v(\" \"),_(\"p\",[v._v(\"1.客户端获取锁时，在\"),_(\"strong\",[v._v(\"lock节点  （只是为了和下面图的名字一样，随便叫啥都行）\"),_(\"strong\",[v._v(\"下创建\")]),v._v(\"临时顺序\")]),v._v(\"节点。\"),_(\"strong\",[v._v(\"（注意 临时  顺序）\")])]),v._v(\" \"),_(\"p\",[v._v(\"2.然后获取lock下面的所有子节点，客户端（\"),_(\"strong\",[v._v(\"多个客户端\")]),v._v(\"）\"),_(\"strong\",[v._v(\"获取到所有的子节点之后\")]),v._v(\"，如果\"),_(\"strong\",[v._v(\"发现自己创建的子节点序号最小  （顺序的体现）\")]),v._v(\"，那么就认为该客户端获取到了锁。\"),_(\"strong\",[v._v(\"使用完锁后，将该节点删除。（临时的体现）\")])]),v._v(\" \"),_(\"p\",[v._v(\"3.如果发现自己创建的节点并非lock所有子节点中最小的，说明自己还没有获取到锁，此时客户端\"),_(\"strong\",[v._v(\"需要找到比自己小的那个节点  （只找比自己小的前一个）\")]),v._v(\"，同时对其\"),_(\"strong\",[v._v(\"注册事件监听器\")]),v._v(\"，监听删除事件。\")]),v._v(\" \"),_(\"p\",[v._v(\"4.如果发现比自己小的那个\"),_(\"strong\",[v._v(\"节点被删除\")]),v._v(\"，则客户端的\")]),v._v(\" \"),_(\"p\",[_(\"strong\",[v._v(\"Watcher会收到相应通知\")]),v._v(\"，此时再次判断自己创建的节点\")]),v._v(\" \"),_(\"p\",[v._v(\"是否是lock子节点中序号最小的，如果是则获取到了锁，\")]),v._v(\" \"),_(\"p\",[v._v(\"如果不是则重复以上步骤继续获取到比自己小的一个节点\")]),v._v(\" \"),_(\"p\",[v._v(\"并注册监听。\")]),v._v(\" \"),_(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/Zookeeper07.png\"}}),v._v(\" \"),_(\"h2\",{attrs:{id:\"集群\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集群\"}},[v._v(\"#\")]),v._v(\" 集群\")]),v._v(\" \"),_(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/Zookeeper08.png\"}}),v._v(\" \"),_(\"p\",[v._v(\"Leader选举：\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[_(\"strong\",[v._v(\"Serverid：服务器ID\")])])]),v._v(\" \"),_(\"p\",[v._v(\"比如有三台服务器，编号分别是1,2,3。\")]),v._v(\" \"),_(\"p\",[v._v(\"编号越大在选择算法中的权重越大。\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[v._v(\"Zxid：数据ID\")])]),v._v(\" \"),_(\"p\",[v._v(\"服务器中存放的最大数据ID,值越大说明数据越新，在选举算法中数据越新权重越大。\")]),v._v(\" \"),_(\"p\",[v._v(\"在Leader选举的过程中，如果某台ZooKeeper 获得了\"),_(\"strong\",[v._v(\"超过半数的选票\")]),v._v(\"， 则此ZooKeeper就可以成为Leader了\")]),v._v(\" \"),_(\"p\",[v._v(\"集群角色\")]),v._v(\" \"),_(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/Zookeeper09.png\"}}),v._v(\" \"),_(\"p\",[v._v(\"在ZooKeeper集群服中务中有三个角色：\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[_(\"strong\",[v._v(\"事务请求\")]),v._v(\"：增删改 等写操作\")]),v._v(\" \"),_(\"li\",[_(\"strong\",[v._v(\"非事务请求\")]),v._v(\"： 查询  读操作\")]),v._v(\" \"),_(\"li\",[v._v(\"所以一般是 \"),_(\"strong\",[v._v(\"查的多，写的少，也就是非事务请求多，事务请求较少\")])]),v._v(\" \"),_(\"li\",[v._v(\"所以之后的\"),_(\"strong\",[v._v(\"MySQL的主从同步\")]),v._v(\"就是分出一些库来供读，从库供读，主库供写\")])]),v._v(\" \"),_(\"p\",[_(\"strong\",[v._v(\"Leader 领导者\")]),v._v(\" ：\")]),v._v(\" \"),_(\"ol\",[_(\"li\",[_(\"p\",[v._v(\"处理\"),_(\"strong\",[v._v(\"事务请求\")])])]),v._v(\" \"),_(\"li\",[_(\"p\",[v._v(\"集群内部各服务器的调度者\")])])]),v._v(\" \"),_(\"p\",[_(\"strong\",[v._v(\"Follower 跟随者\")]),v._v(\" ：\")]),v._v(\" \"),_(\"ol\",[_(\"li\",[_(\"p\",[_(\"strong\",[v._v(\"处理客户端非事务请求\")]),v._v(\"，\"),_(\"strong\",[v._v(\"转发\")]),v._v(\"事务请求给Leader服务器\")])]),v._v(\" \"),_(\"li\",[_(\"p\",[v._v(\"参与Leader选举投票\")])])]),v._v(\" \"),_(\"p\",[_(\"strong\",[v._v(\"Observer 观察者\")]),v._v(\"：\")]),v._v(\" \"),_(\"ol\",[_(\"li\",[v._v(\"处理客户端非事务请求，转发事务请求给Leader服务器\")])])])}),[],!1,null,null,null);_.default=r.exports}}]);","extractedComments":[]}