{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{379:function(a,v,t){\"use strict\";t.r(v);var r=t(4),i=Object(r.a)({},(function(){var a=this,v=a._self._c;return v(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[v(\"h1\",{attrs:{id:\"java面试题\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java面试题\"}},[a._v(\"#\")]),a._v(\" Java面试题\")]),a._v(\" \"),v(\"p\",[a._v(\"主要以问答的形式来记一些知识点，然后有些是散装的各种东东。\")]),a._v(\" \"),v(\"h2\",{attrs:{id:\"_1、jdk-和-jre-和-jvm-分别是什么-有什么区别\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、jdk-和-jre-和-jvm-分别是什么-有什么区别\"}},[a._v(\"#\")]),a._v(\" 1、JDK 和 JRE 和 JVM 分别是什么，有什么区别？\")]),a._v(\" \"),v(\"ol\",[v(\"li\",[v(\"p\",[a._v(\"JDK（Java Development Kit）：JDK 是 Java 开发⼯具包，包含了编写、编译、调试和 运⾏ Java 程序所需的所有⼯具和组件，⽐如编译器（javac）、Java API、调试⼯具等。 JDK 是针对 Java 开发⼈员的，它包含了 JRE，还有编译器和其他⼯具，可以⽤来编写和 调试 Java 程序。\")])]),a._v(\" \"),v(\"li\",[v(\"p\",[a._v(\"JRE（Java Runtime Environment）：JRE 是 Java 运⾏时环境，包括了 Java 虚拟机 （JVM）和 Java 标准类库（Java API）。JRE 是针对 Java 应⽤程序的，它提供了在计 算机上运⾏ Java 应⽤程序所需的最⼩环境。\")])]),a._v(\" \"),v(\"li\",[v(\"p\",[a._v(\"JVM（Java Virtual Machine）：JVM 是 Java 虚拟机，是 Java 程序运⾏的环境。JVM 负责将 Java 代码解释或编译为本地机器代码，并在运⾏时提供必要的环境⽀持，⽐如内 存管理、垃圾回收、安全性等。JVM 的主要作⽤是将 Java 代码转换为可以在计算机上运 ⾏的机器码，并负责程序的执⾏。\")])])]),a._v(\" \"),v(\"p\",[a._v(\"综上所述，JDK、JRE 和 JVM 之间的区别可以总结如下：\")]),a._v(\" \"),v(\"p\",[a._v(\"**JDK 是 Java 开发⼯具包，**包括了编译器、Java API、调试⼯具等，⽤于开发 Java 应⽤程序。\")]),a._v(\" \"),v(\"p\",[v(\"strong\",[a._v(\"JRE 是 Java 运⾏时环境，包括了 Java 虚拟机和 Java 标准类库，⽤于在计算机上运⾏ Java 应⽤程序。\")])]),a._v(\" \"),v(\"p\",[a._v(\"JVM 是 Java 虚拟机，是 Java 程序运⾏的环境，负责将 Java 代码转换为可以在计算机 上运⾏的机器码，并提供必要的环境⽀持\")]),a._v(\" \"),v(\"p\",[a._v(\"搞清楚这个问题，我觉得⾸先你要清楚 Java 程序是如何在计算机上运⾏的。\")]),a._v(\" \"),v(\"p\",[a._v(\"1.编写Java源代码；--------需要⽤到JDK,Java Development KitJava (Java开发⼯具包)\")]),a._v(\" \"),v(\"p\",[a._v(\"2.将J\"),v(\"strong\",[a._v(\"ava源代码编译成字节码；---------需要⽤到JAVA开发⼯具包中的编译器（javac.exe）， ⽣产.class⽂件\")])]),a._v(\" \"),v(\"p\",[a._v(\"3.\"),v(\"strong\",[a._v(\"Java虚拟机（JVM）将字节码转换成机器码\")]),a._v(\"；-------需要⽤到 Java Virtual Machine (Java 虚拟机)\")]),a._v(\" \"),v(\"p\",[a._v(\"4.操作系统执⾏机器码，\"),v(\"strong\",[a._v(\"完成程序的运⾏。---------需要⽤到Java Runtime Environment (Java 运⾏环境)\")])]),a._v(\" \"),v(\"p\",[a._v(\"JDK 全称 Java Development KitJava (Java开发⼯具包)，就是包含了开发Java 程序时所需 的⽂件包。\")]),a._v(\" \"),v(\"p\",[a._v(\"JRE 全称 Java Runtime Environment (Java 运⾏环境)，就是运⾏Java 程序时所需的⽂件 包。\")]),a._v(\" \"),v(\"p\",[a._v(\"JVM 全称 Java Virtual Machine (Java虚拟机)，是可运⾏Java代码的假想计算机。在Java虚拟机上⽣成可运⾏的字节码，移植到在其他平台上时可不加修改地运⾏。\")]),a._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20240325185932024.png\",alt:\"image-20240325185932024\"}})]),a._v(\" \"),v(\"h2\",{attrs:{id:\"jdk动态代理和cglib动态代理\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jdk动态代理和cglib动态代理\"}},[a._v(\"#\")]),a._v(\" JDK动态代理和CGLIB动态代理\")]),a._v(\" \"),v(\"p\",[a._v(\"// TODO\")]),a._v(\" \"),v(\"h2\",{attrs:{id:\"java-中-final-关键字有什么用\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java-中-final-关键字有什么用\"}},[a._v(\"#\")]),a._v(\" Java 中 final 关键字有什么⽤？\")]),a._v(\" \"),v(\"p\",[a._v(\"在 Java 中，final 关键字⽤于表示⼀个不可变的常量或⼀个不可变的变量。 在 Java 中，final 关键字可以修饰类、⽅法和变量，作⽤如下：\")]),a._v(\" \"),v(\"ol\",[v(\"li\",[a._v(\"**final 修饰类，表示该类不能被继承。**final 类中的⽅法默认都是 final 的，不能被⼦类重 写。\")]),a._v(\" \"),v(\"li\",[v(\"strong\",[a._v(\"final 修饰⽅法，表示该⽅法不能被⼦类重写。\")])]),a._v(\" \"),v(\"li\",[a._v(\"**final 修饰变量，表示该变量只能被赋值⼀次。**final 修饰的变量必须在声明时或构造函数 中初始化，且不能再被修改。常⽤于定义常量\")])]),a._v(\" \"),v(\"h2\",{attrs:{id:\"反射机制\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#反射机制\"}},[a._v(\"#\")]),a._v(\" 反射机制\")]),a._v(\" \"),v(\"p\",[a._v(\"// TODO\")]),a._v(\" \"),v(\"h2\",{attrs:{id:\"访问修饰符-public、private、protected-以及无修饰符-默认-的区别\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#访问修饰符-public、private、protected-以及无修饰符-默认-的区别\"}},[a._v(\"#\")]),a._v(\" 访问修饰符 public、private、protected，以及⽆修饰符（默认）的区别\")]),a._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://czynotebook.oss-cn-beijing.aliyuncs.com/notebook/image-20240325190301698.png\",alt:\"image-20240325190301698\"}})]),a._v(\" \"),v(\"h2\",{attrs:{id:\"string-和-stringbuffer、stringbuilder-的区别是什么\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string-和-stringbuffer、stringbuilder-的区别是什么\"}},[a._v(\"#\")]),a._v(\" String 和 StringBuffer、StringBuilder 的区别是什么？\")]),a._v(\" \"),v(\"p\",[v(\"strong\",[a._v(\"String 是不可变的（immutable）对象，⽽ StringBuffer 和 StringBuilder 则是可变的 （mutable）对象。\")])]),a._v(\" \"),v(\"p\",[a._v(\"String 对象⼀旦被创建，就不可修改，任何的字符串操作都会返回⼀个新的 String 对象，这 可能导致频繁的对象创建和销毁，影响性能。\")]),a._v(\" \"),v(\"p\",[a._v(\"⽽ StringBuffer 和 StringBuilder 允许进⾏修改 操作，提供了⼀种更⾼效的字符串处理⽅式。\")]),a._v(\" \"),v(\"p\",[a._v(\"StringBuffer 和 StringBuilder 的主要区别在于线程安全性和性能⽅⾯。\")]),a._v(\" \"),v(\"p\",[v(\"strong\",[a._v(\"StringBuffer 是线程安全的，所有⽅法都是同步的，因此可以被多个线程同时访问和修改。⽽ StringBuilder 不是线程安全的\")]),a._v(\"，适⽤于单线程环境下的字符串处理，但是相⽐于 StringBuffer，StringBuilder 具有 更⾼的性能。 因此，当字符串处理需要频繁修改时，建议使⽤ StringBuffer 或 StringBuilder；⽽当字符串处 理不需要修改时，可以使⽤ String\")]),a._v(\" \"),v(\"h2\",{attrs:{id:\"java-内部类\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java-内部类\"}},[a._v(\"#\")]),a._v(\" Java 内部类\")]),a._v(\" \"),v(\"p\",[a._v(\"// TODO\")])])}),[],!1,null,null,null);v.default=i.exports}}]);","extractedComments":[]}