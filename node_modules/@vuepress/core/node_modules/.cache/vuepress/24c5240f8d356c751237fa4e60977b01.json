{"remainingRequest":"D:\\coding\\CzyNotebook\\notebook\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\coding\\CzyNotebook\\notebook\\docs\\.vuepress\\components\\Fantasy.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\coding\\CzyNotebook\\notebook\\docs\\.vuepress\\components\\Fantasy.vue","mtime":1685605312506},{"path":"D:\\coding\\CzyNotebook\\notebook\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1679311674030},{"path":"D:\\coding\\CzyNotebook\\notebook\\node_modules\\babel-loader\\lib\\index.js","mtime":1679311673578},{"path":"D:\\coding\\CzyNotebook\\notebook\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1679311674030},{"path":"D:\\coding\\CzyNotebook\\notebook\\node_modules\\vue-loader\\lib\\index.js","mtime":1679311675722}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}